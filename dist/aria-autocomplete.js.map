{"version":3,"sources":["closest-polyfill.js","helpers.js","aria-autocomplete.js"],"names":["Element","prototype","matches","msMatchesSelector","webkitMatchesSelector","closest","s","el","parentElement","parentNode","nodeType","trimString","theString","trim","hasClass","element","className","e","cur","getAttribute","indexOf","addClass","classes","currentValue","current","finalValue","i","cs","split","l","length","setAttribute","removeClass","replace","REGEX_AMPERSAND","REGEX_DUPE_WHITESPACE","REGEX_MAKE_SAFE","REGEX_TO_IGNORE","cleanString","toLowerCase","isPrintableKey","keyCode","mergeObjects","n","o","p","hasOwnProperty","dispatchEvent","event","document","createEvent","initEvent","fireEvent","setElementState","selected","instance","nodeName","checked","elementChangeEventTimer","clearTimeout","setTimeout","processSourceArray","sourceArray","mapping","setCleanedLabel","toReturn","mapValue","mapLabel","result","entry","value","label","toString","cleanedLabel","push","DIV","createElement","htmlToElement","html","innerHTML","firstChild","appIndex","DEFAULT_OPTIONS","name","source","sourceMapping","delay","minLength","maxResults","showAllControl","confirmOnBlur","multiple","autoGrow","maxItems","multipleSeparator","deleteOnBackspace","asyncQueryParam","asyncMaxResultsParam","placeholder","noResultsText","cssNameSpace","listClassName","inputClassName","wrapperClassName","srDeleteText","srDeletedText","srShowAllText","srSelectedText","srListLabelText","srAssistiveText","srResultsText","onAsyncPrep","undefined","onAsyncSuccess","onResponse","onSearch","onConfirm","onDelete","onReady","onClose","onOpen","AriaAutocomplete","options","ariaAutocomplete","ids","ELEMENT","id","PREFIX","LIST","INPUT","BUTTON","OPTION","WRAPPER","OPTION_SELECTED","SR_ASSISTANCE","SR_ANNOUNCEMENTS","elementIsInput","elementIsSelect","list","input","wrapper","showAll","srAnnouncements","xhr","term","async","menuOpen","disabled","filtering","forceShowAll","filteredSource","currentListHtml","inputPollingValue","currentSelectedIndex","documentClick","documentClickBound","filterTimer","pollingTimer","announcementTimer","componentBlurTimer","init","args","context","api","apply","toRemove","removeAttribute","expanded","show","triggerOptionCallback","addEventListener","hide","query","prop","text","textContent","ariaAutocompleteSelectedOption","childNodes","a","isSelectedElem","index","option","splice","buildMultiSelected","announce","currentSelectedElems","getSelectedElems","isInSelected","removeChild","deleteText","fragment","createDocumentFragment","selectedClass","isInDom","span","appendChild","insertBefore","join","toSet","exists","describedBy","cssName","nodes","resetOptionAttributes","target","focus","setOptionFocus","toFocus","toAdd","valToSet","valToSetString","disable","enable","focusAfterSelection","alreadySelected","setSourceElementValues","results","resultsLoop","j","k","labelMatch","toShow","optionId","updated","removeSelectedFromResults","callback","noText","optionClass","cancelFilterPrep","newListHtml","isFirstCall","XMLHttpRequest","encode","encodeURIComponent","isShowAll","unlimited","baseAmount","ampersandOrQuestionMark","test","url","abort","open","onload","readyState","DONE","status","callbackResponse","responseText","items","prepSelectedFromArray","setListOptions","send","handleAsync","call","response","search","staticSourceIndex","nameSpace","doValueOverrideCheck","runNow","setInputDescription","modifier","keydown","type","altKey","ctrlKey","metaKey","equalVals","filter","preventDefault","filterPrep","force","activeElem","activeElement","contains","isQueryIn","isQueryContainedIn","bind","toUse","handleOptionSelect","isInputOrDdl","removeEntryFromSelected","removeEventListener","filterPrepShowAll","usable","targetIsInput","handleEnterKey","selectedLength","focusInput","handleComponentBlur","handleUpArrowKey","handleDownArrowKey","handleKeyDownDefault","startPolling","prepKeyDown","cancelPolling","nodeIndex","elements","querySelectorAll","checkbox","toPush","querySelector","separator","valueArr","val","indexInSource","prepListSourceFunction","prepListSourceAsync","Array","isArray","prepListSourceArray","prepListSourceDdl","prepListSourceCheckboxes","ariaAutocompleteOriginalFor","labelledBy","explainerText","listClass","inputClass","wrapperClass","explainer","newHtml","insertAdjacentHTML","close","destroy","isRefresh","destroyCheck","setHtml","getElementById","prepListSource","generateApi","setInputStartingStates","bindEvents","window","elem"],"mappings":"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","file":"aria-autocomplete.js","sourceRoot":"../src","sourcesContent":["if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\nif (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n        var el = this;\n        do { \n            if (el.matches(s)) { \n                return el; \n            } \n            el = el.parentElement || el.parentNode; \n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}","/**\n * @description trim string helper\n * @param {string} theString\n */\nexport function trimString(theString) {\n    return theString == null ? '' : (theString + '').trim();\n}\n\n/**\n * @description check if element has class\n * @param {Element} element - element to check class on\n * @param {String} className\n * @returns {Boolean}\n */\nexport function hasClass(element, className) {\n    let e = element;\n    let cur = trimString(e.getAttribute && e.getAttribute('class'));\n    return ` ${cur} `.indexOf(` ${className} `) > -1;\n}\n\n/**\n * @description add class(es) to element\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to add\n */\nexport function addClass(element, classes) {\n    let currentValue = trimString(\n        element.getAttribute && element.getAttribute('class')\n    );\n    let current = ' ' + currentValue + ' ';\n    let finalValue = '';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        if (cs[i] !== '' && current.indexOf(' ' + cs[i] + ' ') === -1) {\n            finalValue += ' ' + cs[i];\n        }\n    }\n    if (currentValue !== (finalValue = trimString(currentValue + finalValue))) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n/**\n * @description remove class(es) from element\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to remove\n */\nexport function removeClass(element, classes) {\n    let currentValue = trimString(\n        element.getAttribute && element.getAttribute('class')\n    );\n    let finalValue = ' ' + currentValue + ' ';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        finalValue = finalValue.replace(' ' + cs[i] + ' ', ' ');\n    }\n    if (currentValue !== (finalValue = trimString(finalValue))) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n// regex constants used for string cleaning\nconst REGEX_AMPERSAND = /&/g;\nconst REGEX_DUPE_WHITESPACE = /\\s\\s+/g;\nconst REGEX_MAKE_SAFE = /[.*+?^${}()|[\\]\\\\]/g;\nconst REGEX_TO_IGNORE = /[\\u2018\\u2019',:\\u2013-]/g;\n/**\n * @description clean string of some characters, and make safe for regex searching\n * @param {String} theString\n * @returns {String}\n */\nexport function cleanString(theString) {\n    theString = theString.replace(REGEX_TO_IGNORE, ''); // ignore quotes, commas, colons, and hyphens\n    theString = theString.replace(REGEX_AMPERSAND, 'and'); // treat & and 'and' as the same\n    theString = theString.replace(REGEX_MAKE_SAFE, '\\\\$&'); // make safe for regex searching\n    theString = theString.replace(REGEX_DUPE_WHITESPACE, ' '); // ignore duplicate whitespace\n    return trimString(theString.toLowerCase()); // case insensitive\n}\n\n/**\n * @description check if keycode is for a printable/width-affecting character\n * @param {Number} keyCode\n * @returns {Boolean}\n */\nexport function isPrintableKey(keyCode) {\n    return (\n        (keyCode >= 48 && keyCode <= 57) || // 0-9\n        (keyCode >= 65 && keyCode <= 90) || // a-z\n        (keyCode >= 96 && keyCode <= 111) || // numpad 0-9, numeric operators\n        (keyCode >= 186 && keyCode <= 222) || // semicolon, equal, comma, dash, etc.\n        keyCode === 32 || // space\n        keyCode === 8 || // backspace\n        keyCode === 46 // delete\n    );\n}\n\n/**\n * @description merge objects together to generate a new one\n * @param {Object} args - objects to merge together\n * @returns {Object}\n */\nexport function mergeObjects(...args) {\n    let n = {};\n    for (let i = 0, l = args.length; i < l; i += 1) {\n        let o = args[i];\n        for (let p in o) {\n            if (o.hasOwnProperty(p) && typeof o[p] !== 'undefined') {\n                n[p] = o[p];\n            }\n        }\n    }\n    return n;\n}\n\n/**\n * @description dispatch event helper\n * @param {Element} element\n * @param {String} event\n */\nexport function dispatchEvent(element, event) {\n    if ('createEvent' in document) {\n        let e = document.createEvent('HTMLEvents');\n        e.initEvent(event, true, true);\n        element.dispatchEvent(e);\n    } else {\n        element.fireEvent('on' + event);\n    }\n}\n\n/**\n * @description set element option or checkbox to specified state and trigger change event\n * @param {Element} element\n * @param {Boolean} selected\n * @param {(AriaAutocomplete|Object)} instance\n */\nexport function setElementState(element, selected, instance) {\n    selected = !!selected;\n    if (element) {\n        // handle checkbox\n        if (\n            element.nodeName === 'INPUT' &&\n            typeof element.checked === 'boolean' &&\n            element.checked !== selected\n        ) {\n            element.checked = selected;\n            dispatchEvent(element, 'change');\n        }\n\n        // handle dropdown option\n        if (element.nodeName === 'OPTION' && element.selected !== selected) {\n            element.selected = selected;\n            // ensure change event only fires once for dropdown\n            if (instance.elementChangeEventTimer) {\n                clearTimeout(instance.elementChangeEventTimer);\n            }\n            instance.elementChangeEventTimer = setTimeout(function() {\n                dispatchEvent(element.closest('select'), 'change');\n            }, 1);\n        }\n    }\n}\n\n/**\n * @description process an array of strings or objects to ensure needed props exist\n * @param {(String|Object)[]} sourceArray\n * @param {Object=} mapping - value and label mapping used in object cases\n * @param {Boolean=} setCleanedLabel - defaults to true\n * @returns {Array}\n */\nexport function processSourceArray(sourceArray, mapping = {}, setCleanedLabel) {\n    let toReturn = [];\n    let mapValue = mapping['value'];\n    let mapLabel = mapping['label'];\n    for (let i = 0, l = sourceArray.length; i < l; i += 1) {\n        let result = {};\n        let entry = sourceArray[i];\n        // handle array of strings\n        if (typeof entry === 'string') {\n            result.value = result.label = entry;\n        }\n        // handle array of objects - ensure value and label exist, and maintain any other properties\n        else {\n            result = entry;\n            let value = result[mapValue] || result.value || result.label;\n            let label = result[mapLabel] || result.label || result.value;\n            result.value = (value || '').toString();\n            result.label = (label || '').toString();\n        }\n        // whether to set a cleaned label for static source filtering (in filter method)\n        if (setCleanedLabel !== false) {\n            result.cleanedLabel = cleanString(result.label);\n        }\n        toReturn.push(result);\n    }\n    return toReturn;\n}\n\nconst DIV = document.createElement('div');\n/**\n * @description convert HTML string into an element\n * @param {String} html\n * @returns {Element}\n */\nexport function htmlToElement(html) {\n    DIV.innerHTML = trimString(html);\n    return DIV.firstChild;\n}\n","import './closest-polyfill';\r\nimport {\r\n    trimString,\r\n    hasClass,\r\n    addClass,\r\n    removeClass,\r\n    cleanString,\r\n    isPrintableKey,\r\n    mergeObjects,\r\n    dispatchEvent,\r\n    setElementState,\r\n    processSourceArray,\r\n    htmlToElement\r\n} from './helpers';\r\n\r\nlet appIndex = 0;\r\n\r\nconst DEFAULT_OPTIONS = {\r\n    /**\r\n     * @description Give the autocomplete a name to be included in form submissions\r\n     * (Instead of using this option, I would advise initialising the autocomplete\r\n     * on an existing input that will be submitted; this approach is compatible\r\n     * with the control in multiple mode)\r\n     */\r\n    name: '',\r\n    /**\r\n     * @type {String | String[] | Object[] | Function}\r\n     * @description Specify source. See examples file for more specific usage.\r\n     * @example ['Afghanistan', 'Albania', 'Algeria', ...more]\r\n     * @example (query, render) => render(arrayToUse)\r\n     */\r\n    source: '',\r\n    /**\r\n     * @description Properties to use for label and value\r\n     * when source is an Array of Objects\r\n     */\r\n    sourceMapping: {},\r\n\r\n    /**\r\n     * @description Input delay after typing before running a search\r\n     */\r\n    delay: 100,\r\n    /**\r\n     * @description Minimum number of characters to run a search (includes spaces)\r\n     */\r\n    minLength: 1,\r\n    /**\r\n     * @description Maximum number of results to render. Also used with async endpoint\r\n     */\r\n    maxResults: 9999,\r\n    /**\r\n     * @description Render a control that triggers showing all options.\r\n     * Runs a search with an empty query: '', and maxResults of 9999\r\n     */\r\n    showAllControl: false,\r\n    /**\r\n     * Confirm currently active selection when blurring off of the control. If\r\n     * no active selection, will compare current input value against available labels\r\n     */\r\n    confirmOnBlur: true,\r\n\r\n    /**\r\n     * @description Allow multiple items to be selected\r\n     */\r\n    multiple: false,\r\n    /**\r\n     * @description @todo Adjust input width to match its value.\r\n     * Experimental, and a performance hit\r\n     */\r\n    autoGrow: false,\r\n    /**\r\n     * @description Maximum number of items that can be selected\r\n     */\r\n    maxItems: 9999,\r\n    /**\r\n     * @description If initialised element is an input, and in multiple mode,\r\n     * character that separates the selected values e.g. \"GLP,ZWE\"\r\n     */\r\n    multipleSeparator: ',',\r\n    /**\r\n     * @description If input is empty and in multiple mode,\r\n     * delete last selected item on backspace\r\n     */\r\n    deleteOnBackspace: false,\r\n\r\n    /**\r\n     * @description In async mode, parameter to use when adding the input value\r\n     * to the endpoint String. e.g. https://some-endpoint?q=norway&limit=9999\r\n     */\r\n    asyncQueryParam: 'q',\r\n    /**\r\n     * @description In async mode, parameter to use when adding results limit\r\n     * to the endpoint String. e.g. https://some-endpoint?q=norway&limit=9999\r\n     */\r\n    asyncMaxResultsParam: 'limit',\r\n\r\n    /**\r\n     * @description Placeholder text to show in generated input\r\n     */\r\n    placeholder: '',\r\n    /**\r\n     * @description Text to show (and announce to screen readers) if no results found.\r\n     * If empty, the list of options will remain hidden when there are no results\r\n     */\r\n    noResultsText: 'No results',\r\n    /**\r\n     * @description String to prepend to classes for BEM naming\r\n     * e.g. aria-autocomplete__input\r\n     */\r\n    cssNameSpace: 'aria-autocomplete',\r\n    /**\r\n     * @description Custom class name to add to the options list holder\r\n     */\r\n    listClassName: '',\r\n    /**\r\n     * @description Custom class name to add to the generated input\r\n     */\r\n    inputClassName: '',\r\n    /**\r\n     * @description Custom class name to add to the component wrapper\r\n     */\r\n    wrapperClassName: '',\r\n\r\n    /**\r\n     * @description In multiple mode, screen reader text used for element deletion.\r\n     * Prepended to option label in aria-label attribute e.g. 'delete Canada'\r\n     */\r\n    srDeleteText: 'delete',\r\n    /**\r\n     * @description Screen reader text announced after deletion.\r\n     * Apended to option label e.g. 'Canada deleted'\r\n     */\r\n    srDeletedText: 'deleted',\r\n    /**\r\n     * @description Value for aria-label attribute on the show all control\r\n     */\r\n    srShowAllText: 'Show all',\r\n    /**\r\n     * @description Screen reader text announced after confirming a selection.\r\n     * Appended to option label e.g. 'Canada selected'\r\n     */\r\n    srSelectedText: 'selected',\r\n    /**\r\n     * @description Screen reader explainer added to the list element\r\n     * via aria-label attribute\r\n     */\r\n    srListLabelText: 'Search suggestions',\r\n    /**\r\n     * @description Screen reader description announced when the input receives focus.\r\n     * Only announced when input is empty\r\n     */\r\n    srAssistiveText:\r\n        'When results are available use up and down arrows to review and ' +\r\n        'enter to select. Touch device users, explore by touch or with swipe gestures.',\r\n    /**\r\n     * @description Screen reader announcement after results are rendered\r\n     */\r\n    srResultsText: length =>\r\n        `${length} ${length === 1 ? 'result' : 'results'} available.`,\r\n\r\n    /**\r\n     * @description Callback before async call is made - receives the URL.\r\n     * Can be used to format the endpoint URL by returning a String\r\n     */\r\n    onAsyncPrep: undefined,\r\n    /**\r\n     * @description Callback after async call completes - receives the xhr object.\r\n     * Can be used to format the results by returning an Array\r\n     */\r\n    onAsyncSuccess: undefined,\r\n    /**\r\n     * @description Callback prior to rendering - receives the options that are going\r\n     * to render. Can be used to format the results by returning an Array\r\n     */\r\n    onResponse: undefined,\r\n    /**\r\n     * @description Callback before a search is performed - receives the input value.\r\n     * Can be used to alter the search value by returning a String\r\n     */\r\n    onSearch: undefined,\r\n    /**\r\n     * @description Callback after selection is made -\r\n     * receives an object with the option details\r\n     */\r\n    onConfirm: undefined,\r\n    /**\r\n     * @description Callback after an autocomplete selection is deleted.\r\n     * Fires in single-select mode when selection is deleted automatically.\r\n     * Fires in multi-select mode when selected is deleted by user action\r\n     */\r\n    onDelete: undefined,\r\n    /**\r\n     * @description Callback when main script processing and initial rendering has finished\r\n     */\r\n    onReady: undefined,\r\n    /**\r\n     * @description Callback when list area closes - receives the list holder element\r\n     */\r\n    onClose: undefined,\r\n    /**\r\n     * @description Callback when list area opens - receives the list holder element\r\n     */\r\n    onOpen: undefined\r\n};\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {Object=} options\r\n */\r\nclass AriaAutocomplete {\r\n    constructor(element, options) {\r\n        // fail silently if no list provided\r\n        if (!element) {\r\n            return;\r\n        }\r\n\r\n        // if instance already exists on the list element, do not re-initialise\r\n        if (element.ariaAutocomplete) {\r\n            return element.ariaAutocomplete;\r\n        }\r\n\r\n        appIndex += 1;\r\n        // ids used for DOM queries and accessibility attributes e.g. aria-controls\r\n        this.ids = {};\r\n        this.ids.ELEMENT = element.id;\r\n        this.ids.PREFIX = `${element.id || ''}aria-autocomplete-${appIndex}`;\r\n        this.ids.LIST = `${this.ids.PREFIX}-list`;\r\n        this.ids.INPUT = `${this.ids.PREFIX}-input`;\r\n        this.ids.BUTTON = `${this.ids.PREFIX}-button`;\r\n        this.ids.OPTION = `${this.ids.PREFIX}-option`;\r\n        this.ids.WRAPPER = `${this.ids.PREFIX}-wrapper`;\r\n        this.ids.OPTION_SELECTED = `${this.ids.OPTION}-selected`;\r\n        this.ids.SR_ASSISTANCE = `${this.ids.PREFIX}-sr-assistance`;\r\n        this.ids.SR_ANNOUNCEMENTS = `${this.ids.PREFIX}-sr-announcements`;\r\n\r\n        // vars defined later - related explicitly to core initialising params\r\n        this.options;\r\n        this.element;\r\n        this.elementIsInput;\r\n        this.elementIsSelect;\r\n\r\n        // vars defined later - elements\r\n        this.list;\r\n        this.input;\r\n        this.wrapper;\r\n        this.showAll;\r\n        this.srAnnouncements;\r\n\r\n        // vars defined later - non elements\r\n        this.xhr;\r\n        this.term;\r\n        this.async;\r\n        this.source;\r\n        this.menuOpen;\r\n        this.multiple;\r\n        this.selected;\r\n        this.disabled;\r\n        this.filtering;\r\n        this.cssNameSpace;\r\n        this.forceShowAll;\r\n        this.filteredSource; // filtered source items to render\r\n        this.currentListHtml;\r\n        this.inputPollingValue;\r\n        this.currentSelectedIndex; // for storing index of currently focused option\r\n\r\n        // document click\r\n        this.documentClick;\r\n        this.documentClickBound;\r\n\r\n        // timers\r\n        this.filterTimer;\r\n        this.pollingTimer;\r\n        this.announcementTimer;\r\n        this.componentBlurTimer;\r\n        this.elementChangeEventTimer;\r\n\r\n        this.init(element, options);\r\n    }\r\n\r\n    /**\r\n     * trigger callbacks included in component options\r\n     * @param {String} name\r\n     * @param {Array=} args\r\n     * @param {Any=} args\r\n     */\r\n    triggerOptionCallback(name, args, context) {\r\n        context = typeof context === 'undefined' ? this.api : context;\r\n        if (typeof this.options[name] === 'function') {\r\n            return this.options[name].apply(context, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description show element with CSS only - if none provided, set list state to visible\r\n     * @param {Element=} element\r\n     */\r\n    show(element) {\r\n        if (typeof element !== 'undefined') {\r\n            let toRemove = `${this.cssNameSpace}--hide hide hidden`;\r\n            removeClass(element, toRemove);\r\n            return element.removeAttribute('hidden');\r\n        }\r\n\r\n        this.input.setAttribute('aria-expanded', 'true');\r\n        if (this.showAll) {\r\n            let expanded = (!!this.forceShowAll).toString();\r\n            this.showAll.setAttribute('aria-expanded', expanded);\r\n        }\r\n        if (!this.menuOpen) {\r\n            this.show(this.list);\r\n            this.menuOpen = true;\r\n            this.triggerOptionCallback('onOpen', [this.list]);\r\n            if (!this.documentClickBound) {\r\n                this.documentClickBound = true;\r\n                document.addEventListener('click', this.documentClick);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @description hide element with CSS only - if none provided, set list state to hidden\r\n     * @param {Element=} element\r\n     */\r\n    hide(element) {\r\n        if (typeof element !== 'undefined') {\r\n            addClass(element, `${this.cssNameSpace}--hide hide hidden`);\r\n            return element.setAttribute('hidden', 'hidden');\r\n        }\r\n\r\n        this.currentSelectedIndex = -1;\r\n        this.input.setAttribute('aria-expanded', 'false');\r\n        if (this.showAll) {\r\n            this.showAll.setAttribute('aria-expanded', 'false');\r\n        }\r\n        if (this.menuOpen) {\r\n            this.hide(this.list);\r\n            this.menuOpen = false;\r\n            this.triggerOptionCallback('onClose', [this.list]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description enable autocomplete (e.g. when under maxItems selected)\r\n     */\r\n    enable() {\r\n        if (this.disabled) {\r\n            this.disabled = false;\r\n            this.input.disabled = false;\r\n            let n = this.cssNameSpace;\r\n            removeClass(this.input, `${n}__input--disabled disabled`);\r\n            removeClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '0');\r\n                removeClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description disable autocomplete (e.g. when maxItems selected)\r\n     */\r\n    disable() {\r\n        if (!this.disabled) {\r\n            this.disabled = true;\r\n            this.input.disabled = true;\r\n            let n = this.cssNameSpace;\r\n            addClass(this.input, `${n}__input--disabled disabled`);\r\n            addClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '-1');\r\n                addClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description check if current input value is contained in a selection of options\r\n     * @param {String} query - string to use - checks input value otherwise\r\n     * @param {Array} options - array of objects with value and label properties\r\n     * @param {String=} prop - prop to check against in options array - defaults to 'label'\r\n     * @returns {Number} index of array entry that matches, or -1 if none found\r\n     */\r\n    isQueryContainedIn(query, options, prop) {\r\n        query = trimString(query || this.input.value).toLowerCase();\r\n        if (query) {\r\n            prop = prop || 'label';\r\n            for (let i = 0, l = options.length; i < l; i += 1) {\r\n                if (trimString(options[i][prop]).toLowerCase() === query) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * @description make a screen reader announcement\r\n     * @param {String} text\r\n     * @param {Number=} delay\r\n     */\r\n    announce(text, delay) {\r\n        if (!text || !this.srAnnouncements) {\r\n            return;\r\n        }\r\n        // in immediate case, do not user timer\r\n        if (delay === 0) {\r\n            return (this.srAnnouncements.textContent = text);\r\n        }\r\n        delay = typeof delay === 'number' ? delay : 400;\r\n        if (this.announcementTimer) {\r\n            clearTimeout(this.announcementTimer);\r\n        }\r\n        this.announcementTimer = setTimeout(() => {\r\n            this.srAnnouncements.textContent = text;\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description check if element is a selected element in the DOM\r\n     * @param {Element} element\r\n     * @returns {Boolean}\r\n     */\r\n    isSelectedElem(element) {\r\n        return (\r\n            this.multiple &&\r\n            element.ariaAutocompleteSelectedOption &&\r\n            hasClass(element, `${this.cssNameSpace}__selected`)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @description get DOM elements for selected items\r\n     * @returns {Element[]}\r\n     */\r\n    getSelectedElems() {\r\n        let n = this.wrapper.childNodes;\r\n        let a = [];\r\n        for (let i = 0, l = n.length; i < l; i += 1) {\r\n            if (this.isSelectedElem(n[i])) {\r\n                a.push(n[i]);\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @description remove object from selected\r\n     * @param {Object} entry\r\n     */\r\n    removeEntryFromSelected(entry) {\r\n        let index = this.selected.indexOf(entry);\r\n        if (index === -1) {\r\n            // value check, in case explicit object reference did not work\r\n            for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n                if (this.selected[i].value === entry.value) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // set element state, dispatch change event, set selected array,\r\n        // trigger callback, build selected, and do screen reader announcement\r\n        if (index > -1 && this.selected[index]) {\r\n            let option = mergeObjects(this.selected[index]);\r\n            let label = option.label;\r\n            setElementState(this.selected.element, false, this);\r\n            this.selected.splice(index, 1);\r\n            this.triggerOptionCallback('onDelete', [option]);\r\n            this.buildMultiSelected();\r\n            this.announce(`${label} ${this.options.srDeletedText}`, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description re-build the html showing the selected items\r\n     * @todo: test performance in old IE - lots of loops here!\r\n     */\r\n    buildMultiSelected() {\r\n        // only do anything in multiple mode\r\n        if (!this.multiple) {\r\n            return;\r\n        }\r\n\r\n        // no elements, and none selected, do nothing\r\n        let currentSelectedElems = this.getSelectedElems();\r\n        if (!this.selected.length && !currentSelectedElems.length) {\r\n            return;\r\n        }\r\n\r\n        // cycle through existing elements, and remove any not in the selected array\r\n        let current = [];\r\n        let i = currentSelectedElems.length;\r\n        while (i--) {\r\n            let option = currentSelectedElems[i].ariaAutocompleteSelectedOption;\r\n            let l = this.selected.length;\r\n            let isInSelected = false;\r\n            while (l--) {\r\n                let selected = this.selected[l];\r\n                if (selected === option || selected.value === option.value) {\r\n                    isInSelected = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (isInSelected) {\r\n                current.push(currentSelectedElems[i]);\r\n            } else {\r\n                this.wrapper.removeChild(currentSelectedElems[i]);\r\n            }\r\n        }\r\n\r\n        // cycle through selected array, and add elements for any not represented by one\r\n        let deleteText = this.options.srDeleteText;\r\n        let fragment = document.createDocumentFragment();\r\n        let selectedClass = `${this.cssNameSpace}__selected`;\r\n        for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n            let selected = this.selected[i];\r\n            let l = current.length;\r\n            let isInDom = false;\r\n            while (l--) {\r\n                let option = current[l].ariaAutocompleteSelectedOption;\r\n                if (option === selected || option.value === selected.value) {\r\n                    isInDom = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!isInDom) {\r\n                let label = selected.label;\r\n                let span = htmlToElement(\r\n                    `<span role=\"button\" class=\"${selectedClass}\" ` +\r\n                        `tabindex=\"0\" aria-label=\"${deleteText} ${label}\">` +\r\n                        `${label}</span>`\r\n                );\r\n                span.ariaAutocompleteSelectedOption = selected;\r\n                fragment.appendChild(span);\r\n            }\r\n        }\r\n        if (fragment.childNodes && fragment.childNodes.length) {\r\n            this.wrapper.insertBefore(fragment, this.list);\r\n        }\r\n\r\n        // set ids on elements\r\n        let ids = [];\r\n        current = this.getSelectedElems();\r\n        for (let i = 0, l = current.length; i < l; i += 1) {\r\n            let id = `${this.ids.OPTION_SELECTED}-${i}`;\r\n            current[i].setAttribute('id', id);\r\n            ids.push(id);\r\n        }\r\n        ids.push(this.ids.LIST);\r\n\r\n        // set input aria-owns\r\n        this.input.setAttribute('aria-owns', ids.join(' '));\r\n\r\n        // in autogrow mode, hide the placeholder if there are selected items\r\n        if (this.autoGrow && this.options.placeholder) {\r\n            let toSet = this.selected.length ? '' : this.options.placeholder;\r\n            this.input.setAttribute('placeholder', toSet);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set the aria-describedby attribute on the input\r\n     */\r\n    setInputDescription() {\r\n        let exists = this.input.getAttribute('aria-describedby');\r\n        let current = trimString(exists || '');\r\n        let describedBy = current.replace(this.ids.SR_ASSISTANCE, '');\r\n\r\n        if (this.input.value.length === 0) {\r\n            describedBy = describedBy + ' ' + this.ids.SR_ASSISTANCE;\r\n        }\r\n\r\n        // set or remove attribute, but only if necessary\r\n        if ((describedBy = trimString(describedBy))) {\r\n            if (describedBy !== current) {\r\n                this.input.setAttribute('aria-describedby', describedBy);\r\n            }\r\n        } else if (exists) {\r\n            this.input.removeAttribute('aria-describedby');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description reset classes and aria-selected attribute for all visible filtered options\r\n     */\r\n    resetOptionAttributes() {\r\n        let cssName = this.cssNameSpace;\r\n        let nodes = this.list.childNodes;\r\n        let l = nodes.length;\r\n\r\n        while (l--) {\r\n            removeClass(nodes[l], `${cssName}__option--focused focused focus`);\r\n            nodes[l].setAttribute('aria-selected', 'false');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description move focus to correct option, or to input (on up and down arrows)\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     */\r\n    setOptionFocus(event, index) {\r\n        // set aria-selected to false and remove focused class\r\n        this.resetOptionAttributes();\r\n\r\n        // if negative index, or no options available, focus on input\r\n        let options = this.list.childNodes;\r\n        if (index < 0 || !options || !options.length) {\r\n            this.currentSelectedIndex = -1;\r\n            // focus on input, only if event was from another element\r\n            if (event && event.target !== this.input) {\r\n                this.input.focus();\r\n            }\r\n            return;\r\n        }\r\n\r\n        // down arrow on/past last option, focus on last item\r\n        if (index >= options.length) {\r\n            this.currentSelectedIndex = options.length - 1;\r\n            this.setOptionFocus(event, this.currentSelectedIndex);\r\n            return;\r\n        }\r\n\r\n        // if option found, focus...\r\n        let toFocus = options[index];\r\n        if (toFocus && typeof toFocus.getAttribute('tabindex') === 'string') {\r\n            this.currentSelectedIndex = index;\r\n            let toAdd = `${this.cssNameSpace}__option--focused focused focus`;\r\n            addClass(toFocus, toAdd);\r\n            toFocus.setAttribute('aria-selected', 'true');\r\n            toFocus.focus();\r\n            return;\r\n        }\r\n\r\n        // reset index just in case\r\n        this.currentSelectedIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * @description set values and dispatch events based on any DOM elements in the selected array\r\n     */\r\n    setSourceElementValues() {\r\n        let valToSet = [];\r\n        for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n            let entry = this.selected[i];\r\n            valToSet.push(entry.value);\r\n            setElementState(entry.element, true, this); // element processing\r\n        }\r\n\r\n        // set original input value\r\n        if (this.elementIsInput) {\r\n            let valToSetString = valToSet.join(this.options.multipleSeparator);\r\n            if (valToSetString !== this.element.value) {\r\n                this.element.value = valToSetString;\r\n                dispatchEvent(this.element, 'change');\r\n            }\r\n        }\r\n\r\n        // included in case of multi-select mode used with a <select> element as the source\r\n        if (!this.selected.length && this.elementIsSelect) {\r\n            this.element.value = '';\r\n        }\r\n\r\n        // set disabled state as needed\r\n        if (this.multiple && this.selected.length >= this.options.maxItems) {\r\n            return this.disable();\r\n        }\r\n        this.enable();\r\n    }\r\n\r\n    /**\r\n     * @description select option from the list by index\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     * @param {Boolean=} focusAfterSelection\r\n     */\r\n    handleOptionSelect(event, index, focusAfterSelection = true) {\r\n        // defensive check for proper index, that the filteredSource exists, and not exceed max items option\r\n        if (\r\n            typeof index !== 'number' ||\r\n            index < 0 ||\r\n            (this.multiple && this.selected.length >= this.options.maxItems) ||\r\n            !this.filteredSource.length ||\r\n            !this.filteredSource[index]\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // generate new object from the selected item in case the original source gets altered\r\n        let option = mergeObjects(this.filteredSource[index]);\r\n\r\n        // detect if selected option is already in selected array\r\n        let l = this.selected.length;\r\n        let alreadySelected = false;\r\n        while (l--) {\r\n            if (this.selected[l].value === option.value) {\r\n                alreadySelected = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        let valToSet = this.multiple ? '' : option.label;\r\n        this.input.value = this.term = this.inputPollingValue = valToSet;\r\n\r\n        // reset selected array in single select mode\r\n        if (!alreadySelected && !this.multiple) {\r\n            this.selected = [];\r\n        }\r\n\r\n        // (re)set values of any DOM elements based on selected array\r\n        if (!alreadySelected) {\r\n            this.selected.push(option);\r\n            this.setSourceElementValues();\r\n            this.buildMultiSelected(); // rebuild multi-selected if needed\r\n        }\r\n\r\n        this.triggerOptionCallback('onConfirm', [option]);\r\n        this.announce(`${option.label} ${this.options.srSelectedText}`, 0);\r\n\r\n        // return focus to input\r\n        if (!this.disabled && focusAfterSelection !== false) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // close menu after option selection, and after returning focus to input\r\n        this.hide();\r\n    }\r\n\r\n    /**\r\n     * @description remove selected entries from results if in multiple mode\r\n     * @param {Array} results\r\n     * @returns {Array}\r\n     */\r\n    removeSelectedFromResults(results) {\r\n        if (!this.multiple || !this.selected.length) {\r\n            return results;\r\n        }\r\n        let toReturn = [];\r\n        resultsLoop: for (let i = 0, l = results.length; i < l; i += 1) {\r\n            let selected = this.selected;\r\n            let result = results[i];\r\n            for (let j = 0, k = selected.length; j < k; j += 1) {\r\n                let labelMatch = result.label === selected[j].label;\r\n                if (labelMatch && result.value === selected[j].value) {\r\n                    continue resultsLoop;\r\n                }\r\n            }\r\n            toReturn.push(result);\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * @description final filtering and render for list options, and render\r\n     * @param {Array} results\r\n     */\r\n    setListOptions(results) {\r\n        let toShow = [];\r\n        let optionId = this.ids.OPTION;\r\n        let cssName = this.cssNameSpace;\r\n        let mapping = this.options.sourceMapping;\r\n        // if in multiple mode, exclude items already in the selected array\r\n        let updated = this.removeSelectedFromResults(results);\r\n        // allow callback to alter the response before rendering\r\n        let callback = this.triggerOptionCallback('onResponse', updated);\r\n\r\n        // now commit to setting the filtered source\r\n        this.filteredSource = callback\r\n            ? processSourceArray(callback, mapping)\r\n            : updated;\r\n        let length = this.filteredSource.length;\r\n\r\n        // build up the list html\r\n        let maxResults = this.forceShowAll ? 9999 : this.options.maxResults;\r\n        for (let i = 0; i < length && i < maxResults; i += 1) {\r\n            toShow.push(\r\n                `<li tabindex=\"-1\" aria-selected=\"false\" role=\"option\" class=\"${cssName}__option\" ` +\r\n                    `id=\"${optionId}--${i}\" aria-posinset=\"${i + 1}\" ` +\r\n                    `aria-setsize=\"${length}\">${this.filteredSource[i].label}</li>`\r\n            );\r\n        }\r\n\r\n        // set has-results or no-results class on the list element\r\n        if (toShow.length) {\r\n            addClass(this.list, `${cssName}__list--has-results`);\r\n            removeClass(this.list, `${cssName}__list--no-results`);\r\n        } else {\r\n            removeClass(this.list, `${cssName}__list--has-results`);\r\n            addClass(this.list, `${cssName}__list--no-results`);\r\n        }\r\n\r\n        // no results text handling\r\n        let announce;\r\n        let noText = this.options.noResultsText;\r\n        if (!toShow.length && typeof noText === 'string' && noText.length) {\r\n            announce = noText;\r\n            let optionClass = `${cssName}__option`;\r\n            toShow.push(\r\n                `<li class=\"${optionClass} ${optionClass}--no-results\">${noText}</li>`\r\n            );\r\n        }\r\n\r\n        // remove loading class(es) and reset variables\r\n        this.cancelFilterPrep();\r\n\r\n        // announce to screen reader\r\n        if (!announce) {\r\n            announce = this.triggerOptionCallback('srResultsText', [length]);\r\n        }\r\n        this.announce(announce);\r\n\r\n        // render the list, only if we have to\r\n        // time taken for string comparison is worth it to not have to re-parse and re-render the list\r\n        let newListHtml = toShow.join('');\r\n        if (this.currentListHtml !== newListHtml) {\r\n            this.currentListHtml = newListHtml;\r\n            /** @todo: test innerHTML vs insertAdjacentHtml performance in old IE */\r\n            this.list.innerHTML = newListHtml;\r\n        } else {\r\n            // if list html matches, and not re-rendered, clear aria-selected and focus classes\r\n            this.resetOptionAttributes();\r\n        }\r\n\r\n        // if toShow array is empty, make sure not to render the menu\r\n        if (!toShow.length) {\r\n            this.hide();\r\n            this.forceShowAll = false;\r\n            return;\r\n        }\r\n\r\n        this.show();\r\n        // reset forceShowAll must be after .show()\r\n        // aria-expanded attribute on showAllControl is controlled in .show() method\r\n        this.forceShowAll = false;\r\n    }\r\n\r\n    /**\r\n     * @description trigger async call for options to render\r\n     * @param {String} value\r\n     * @param {Boolean=} isFirstCall\r\n     */\r\n    handleAsync(value, isFirstCall = false) {\r\n        let xhr = new XMLHttpRequest();\r\n        let encode = encodeURIComponent;\r\n        let isShowAll = this.forceShowAll;\r\n        let unlimited = isShowAll || isFirstCall;\r\n        let baseAmount = this.multiple ? this.selected.length : 0;\r\n        let ampersandOrQuestionMark = /\\?/.test(this.source) ? '&' : '?';\r\n        let url =\r\n            this.source +\r\n            ampersandOrQuestionMark +\r\n            `${encode(this.options.asyncQueryParam)}=${encode(value)}&` +\r\n            `${encode(this.options.asyncMaxResultsParam)}=` +\r\n            `${unlimited ? 9999 : baseAmount + this.options.maxResults}`;\r\n\r\n        // abort any current call first\r\n        if (this.xhr) {\r\n            this.xhr.abort();\r\n        }\r\n\r\n        let context = isFirstCall ? null : this.api;\r\n        url = this.triggerOptionCallback('onAsyncPrep', [url], context) || url;\r\n\r\n        xhr.open('GET', url);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === xhr.DONE) {\r\n                if (xhr.status === 200) {\r\n                    this.forceShowAll = isShowAll; // return forceShowAll to previous state before the options render\r\n                    let context = isFirstCall ? null : this.api;\r\n                    let callbackResponse = this.triggerOptionCallback(\r\n                        'onAsyncSuccess',\r\n                        [value, xhr],\r\n                        context\r\n                    );\r\n                    let mapping = this.options.sourceMapping;\r\n                    let source = callbackResponse || xhr.responseText;\r\n                    let items = processSourceArray(source, mapping, false);\r\n\r\n                    if (isFirstCall) {\r\n                        this.prepSelectedFromArray(items);\r\n                    } else {\r\n                        this.setListOptions(items);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        // allow the creation of an uncancellable call to use on first load\r\n        if (!isFirstCall) {\r\n            this.xhr = xhr;\r\n        }\r\n\r\n        xhr.send();\r\n    }\r\n\r\n    /**\r\n     * @description trigger filtering using a value\r\n     * @param {String} value\r\n     */\r\n    filter(value) {\r\n        // fail silently if no value is provided\r\n        if (typeof value !== 'string') {\r\n            this.cancelFilterPrep();\r\n            return;\r\n        }\r\n\r\n        let forceShowAll = this.forceShowAll;\r\n        let callbackResponse = this.triggerOptionCallback('onSearch', [value]);\r\n        let toReturn = [];\r\n\r\n        // allow onSearch callback to affect the searched value\r\n        // only permitted when not a forceShowAll case\r\n        if (!forceShowAll && typeof callbackResponse === 'string') {\r\n            value = callbackResponse;\r\n        }\r\n\r\n        // store search term - used for comparison in filterPrep\r\n        this.term = this.inputPollingValue = value;\r\n\r\n        // async handling\r\n        if (this.async) {\r\n            this.handleAsync(value);\r\n            // set show all to false immediately as may be used in other places\r\n            this.forceShowAll = false;\r\n            return;\r\n        }\r\n\r\n        // handle the source as a function\r\n        if (typeof this.source === 'function') {\r\n            this.source.call(this.api, this.term, response => {\r\n                let mapping = this.options.mapping;\r\n                let result = processSourceArray(response, mapping);\r\n                this.setListOptions(result);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // if empty string, show all\r\n        if (!value) {\r\n            forceShowAll = true;\r\n        }\r\n\r\n        // existing list handling\r\n        if (this.source && this.source.length) {\r\n            if (!forceShowAll) {\r\n                value = cleanString(value);\r\n            }\r\n            for (let i = 0, l = this.source.length; i < l; i += 1) {\r\n                let entry = this.source[i];\r\n                if (forceShowAll || entry.cleanedLabel.search(value) !== -1) {\r\n                    toReturn.push({\r\n                        element: entry.element,\r\n                        staticSourceIndex: i,\r\n                        label: entry.label,\r\n                        value: entry.value\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setListOptions(toReturn);\r\n    }\r\n\r\n    /**\r\n     * @description cancel filter timer and remove loading classes\r\n     */\r\n    cancelFilterPrep() {\r\n        if (this.filterTimer) {\r\n            clearTimeout(this.filterTimer);\r\n        }\r\n        let nameSpace = this.cssNameSpace;\r\n        removeClass(this.wrapper, `${nameSpace}__wrapper--loading loading`);\r\n        removeClass(this.input, `${nameSpace}__input--loading loading`);\r\n        this.filtering = false;\r\n    }\r\n\r\n    /**\r\n     * @description checks before filtering, and set filter timer\r\n     * @param {Event} e\r\n     * @param {Boolean=} doValueOverrideCheck - whether to check input value against selected item(s)\r\n     * @param {Boolean=} runNow\r\n     */\r\n    filterPrep(e, doValueOverrideCheck = false, runNow = false) {\r\n        let forceShowAll = this.forceShowAll;\r\n        let delay = forceShowAll || runNow ? 0 : this.options.delay;\r\n\r\n        // clear timers\r\n        this.cancelFilterPrep();\r\n        this.filtering = true;\r\n        this.filterTimer = setTimeout(() => {\r\n            let value = this.input.value;\r\n            // treat as empty search if...\r\n            // forceShowAll, or in single mode and selected item label matches current value\r\n            if (\r\n                forceShowAll ||\r\n                value === '' ||\r\n                (doValueOverrideCheck &&\r\n                    !this.multiple &&\r\n                    this.selected.length &&\r\n                    trimString(this.selected[0].label) === trimString(value))\r\n            ) {\r\n                value = '';\r\n            }\r\n\r\n            // handle aria-describedby\r\n            this.setInputDescription();\r\n            this.inputPollingValue = value;\r\n\r\n            if (!forceShowAll && value.length < this.options.minLength) {\r\n                this.hide();\r\n                return;\r\n            }\r\n\r\n            // try catch used due to permissions issues in some cases\r\n            let modifier;\r\n            try {\r\n                let keydown = e && e.type === 'keydown';\r\n                modifier = keydown && (e.altKey || e.ctrlKey || e.metaKey); // allow shift key, just in case...\r\n            } catch (e) {}\r\n\r\n            // if value to use matches last used search term, do nothing\r\n            let equalVals = value === '' ? false : value === this.term;\r\n\r\n            // prevent search being run again with the same value\r\n            if (!equalVals || (equalVals && !this.menuOpen && !modifier)) {\r\n                let n = this.cssNameSpace;\r\n                addClass(this.wrapper, `${n}__wrapper--loading loading`);\r\n                addClass(this.input, `${n}__input--loading loading`);\r\n                this.currentSelectedIndex = -1;\r\n                this.filter(value);\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description trigger filter prep in showAll mode\r\n     * @param {Event} event\r\n     */\r\n    filterPrepShowAll(event) {\r\n        if (this.componentBlurTimer) {\r\n            clearTimeout(this.componentBlurTimer);\r\n        }\r\n        event.preventDefault();\r\n        this.forceShowAll = true;\r\n        this.filterPrep(event, false, true);\r\n    }\r\n\r\n    /**\r\n     * @description blur behaviour for hiding list and removing focus class(es)\r\n     * @param {Event} event\r\n     * @param {Boolean=} force - fire instantly and force blurring out of the component\r\n     */\r\n    handleComponentBlur(event, force = false) {\r\n        let delay = force ? 0 : 100;\r\n        if (this.componentBlurTimer) {\r\n            clearTimeout(this.componentBlurTimer);\r\n        }\r\n        // use a timeout to ensure this blur fires after other focus events\r\n        // and in case the user focuses back in immediately\r\n        this.componentBlurTimer = setTimeout(() => {\r\n            // do nothing if blurring to an element within the list\r\n            let activeElem = document.activeElement;\r\n            if (\r\n                !force &&\r\n                !(this.showAll && this.showAll === activeElem) && // exception for show all button\r\n                !activeElem.ariaAutocompleteSelectedOption // exception for selected items\r\n            ) {\r\n                // must base this on the wrapper to allow scrolling the list in IE\r\n                if (this.wrapper.contains(activeElem)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // cancel any running async call\r\n            if (this.xhr) {\r\n                this.xhr.abort();\r\n            }\r\n\r\n            // confirmOnBlur behaviour\r\n            let isQueryIn = this.isQueryContainedIn.bind(this);\r\n            if (!force && this.options.confirmOnBlur && this.menuOpen) {\r\n                // if blurring from an option (currentSelectedIndex > -1), select it\r\n                let toUse = this.currentSelectedIndex;\r\n                if (typeof toUse !== 'number' || toUse === -1) {\r\n                    // otherwise check for exact match between current input value and available items\r\n                    toUse = isQueryIn('', this.filteredSource);\r\n                }\r\n                this.handleOptionSelect({}, toUse, false);\r\n            }\r\n\r\n            let n = this.cssNameSpace;\r\n            removeClass(this.wrapper, `${n}__wrapper--focused focused focus`);\r\n            removeClass(this.input, `${n}__input--focused focused focus`);\r\n            this.cancelFilterPrep();\r\n            this.hide();\r\n\r\n            // in single select case, if current value and chosen value differ, clear selected and input value\r\n            if (!this.multiple && isQueryIn('', this.selected) === -1) {\r\n                let isInputOrDdl = this.elementIsInput || this.elementIsSelect;\r\n                if (isInputOrDdl && this.element.value !== '') {\r\n                    this.element.value = '';\r\n                    dispatchEvent(this.element, 'change');\r\n                }\r\n                if (this.selected.length) {\r\n                    this.removeEntryFromSelected(this.selected[0]);\r\n                }\r\n                this.input.value = '';\r\n            }\r\n\r\n            // unbind document click\r\n            if (this.documentClickBound) {\r\n                this.documentClickBound = false;\r\n                document.removeEventListener('click', this.documentClick);\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description enter keydown for selections\r\n     * @param {Event} event\r\n     */\r\n    handleEnterKey(event) {\r\n        // if in multiple mode, and event target was a selected item, remove it\r\n        if (this.isSelectedElem(event.target)) {\r\n            let option = event.target.ariaAutocompleteSelectedOption;\r\n            return this.removeEntryFromSelected(option);\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (this.showAll && event.target === this.showAll) {\r\n            this.filterPrepShowAll(event);\r\n            return;\r\n        }\r\n\r\n        if (this.menuOpen) {\r\n            event.preventDefault();\r\n            if (this.currentSelectedIndex > -1) {\r\n                this.handleOptionSelect(event, this.currentSelectedIndex);\r\n            }\r\n        }\r\n\r\n        // if enter keypress was from the filter input, trigger search immediately\r\n        if (event.target === this.input) {\r\n            this.filterPrep(event, false, true);\r\n        }\r\n    }\r\n    /**\r\n     * @description down arrow usage - option focus, or search all\r\n     * @param {Event} event\r\n     */\r\n    handleDownArrowKey(event) {\r\n        event.preventDefault();\r\n        // if closed, and text is long enough, run search\r\n        if (!this.menuOpen) {\r\n            this.forceShowAll = this.options.minLength < 1;\r\n            if (\r\n                this.forceShowAll ||\r\n                this.input.value.length >= this.options.minLength\r\n            ) {\r\n                this.filterPrep(event);\r\n            }\r\n        }\r\n        // move focus to downward option\r\n        if (this.menuOpen && !this.filtering) {\r\n            let current = this.currentSelectedIndex;\r\n            if (typeof current !== 'number' || current < 0) {\r\n                this.setOptionFocus(event, 0);\r\n            } else {\r\n                this.setOptionFocus(event, current + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description up arrow usage - option focus, or return focus to input\r\n     * @param {Event} event\r\n     */\r\n    handleUpArrowKey(event) {\r\n        event.preventDefault();\r\n        let usable = !this.disabled && this.menuOpen;\r\n        if (usable && typeof this.currentSelectedIndex === 'number') {\r\n            this.setOptionFocus(event, this.currentSelectedIndex - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description standard keydown handling (excluding enter, up, down, escape)\r\n     * @param {Event} event\r\n     */\r\n    handleKeyDownDefault(event) {\r\n        const targetIsInput = event.target === this.input;\r\n        // on space, if focus state is on any other item, treat as enter\r\n        if (event.keyCode === 32 && !targetIsInput) {\r\n            return this.handleEnterKey(event);\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        // on backspace, if using empty input in multiple mode, delete last selected entry\r\n        let selectedLength = this.selected && this.selected.length;\r\n        if (\r\n            this.options.deleteOnBackspace &&\r\n            this.input.value === '' &&\r\n            event.keyCode === 8 &&\r\n            selectedLength &&\r\n            targetIsInput &&\r\n            this.multiple\r\n        ) {\r\n            return this.removeEntryFromSelected(this.selected.length - 1);\r\n        }\r\n\r\n        // any printable character not on input, return focus to input\r\n        let focusInput = !targetIsInput && isPrintableKey(event.keyCode);\r\n        if (focusInput) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // trigger filtering - done here, instead of using input event, due to IE9 issues\r\n        if (focusInput || targetIsInput) {\r\n            this.filterPrep(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description component keydown handling\r\n     * @param {Event} event\r\n     */\r\n    prepKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 13: // on enter\r\n                this.handleEnterKey(event);\r\n                break;\r\n            case 27: // on escape\r\n                this.handleComponentBlur(event, true);\r\n                break;\r\n            case 38: // on up\r\n                this.handleUpArrowKey(event);\r\n                break;\r\n            case 40: // on down\r\n                this.handleDownArrowKey(event);\r\n                break;\r\n            default:\r\n                this.handleKeyDownDefault(event);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description cancel checking for input value changes from external causes\r\n     */\r\n    cancelPolling() {\r\n        if (this.pollingTimer) {\r\n            clearTimeout(this.pollingTimer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description start checking for input value changes from causes that bypass event detection\r\n     */\r\n    startPolling() {\r\n        // check if input value does not equal last searched term\r\n        if (!this.filtering && this.input.value !== this.inputPollingValue) {\r\n            this.filterPrep({});\r\n        }\r\n        this.pollingTimer = setTimeout(() => {\r\n            this.startPolling();\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * @description bind component events to generated elements\r\n     */\r\n    bindEvents() {\r\n        // when focus is moved outside of the component, close everything\r\n        this.wrapper.addEventListener('focusout', event => {\r\n            this.handleComponentBlur(event, false);\r\n        });\r\n        // set wrapper focus state\r\n        this.wrapper.addEventListener('focusin', event => {\r\n            let toAdd = `${this.cssNameSpace}__wrapper--focused focused focus`;\r\n            addClass(this.wrapper, toAdd);\r\n            if (!this.list.contains(event.target)) {\r\n                this.currentSelectedIndex = -1;\r\n            }\r\n        });\r\n        // handle all keydown events inside the component\r\n        this.wrapper.addEventListener('keydown', event => {\r\n            this.prepKeyDown(event);\r\n        });\r\n        // if clicking directly on the wrapper, move focus to the input\r\n        this.wrapper.addEventListener('click', event => {\r\n            if (event.target === this.wrapper) {\r\n                this.input.focus();\r\n                return;\r\n            }\r\n            if (this.isSelectedElem(event.target)) {\r\n                let option = event.target.ariaAutocompleteSelectedOption;\r\n                this.removeEntryFromSelected(option);\r\n            }\r\n        });\r\n\r\n        // when blurring out of input, check current value against selected one and clear if needed\r\n        this.input.addEventListener('blur', () => {\r\n            let toRemove = `${this.cssNameSpace}__input--focused focused focus`;\r\n            removeClass(this.input, toRemove);\r\n            this.cancelPolling();\r\n        });\r\n        // trigger filter on input event as well as keydown (covering bases)\r\n        this.input.addEventListener('input', event => {\r\n            this.filterPrep(event);\r\n        });\r\n        // when specifically clicking on input, if menu is closed, and value is long enough, search\r\n        this.input.addEventListener('click', event => {\r\n            let open = this.menuOpen;\r\n            if (!open && this.input.value.length >= this.options.minLength) {\r\n                this.filterPrep(event, true);\r\n            }\r\n        });\r\n        // when focusing on input, reset selected index and trigger search handling\r\n        this.input.addEventListener('focusin', () => {\r\n            let toAdd = `${this.cssNameSpace}__input--focused focused focus`;\r\n            addClass(this.input, toAdd);\r\n            this.startPolling();\r\n            if (!this.disabled && !this.menuOpen) {\r\n                this.filterPrep(event, true);\r\n            }\r\n        });\r\n\r\n        // show all button click\r\n        if (this.showAll) {\r\n            this.showAll.addEventListener('click', event => {\r\n                this.filterPrepShowAll(event);\r\n            });\r\n        }\r\n\r\n        // clear any current focus position when hovering into the list\r\n        this.list.addEventListener('mouseenter', event => {\r\n            this.resetOptionAttributes();\r\n        });\r\n        // trigger options selection\r\n        this.list.addEventListener('click', event => {\r\n            if (event.target !== this.list) {\r\n                let childNodes = this.list.childNodes;\r\n                if (childNodes.length) {\r\n                    let nodeIndex = [].indexOf.call(childNodes, event.target);\r\n                    this.handleOptionSelect(event, nodeIndex);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on child checkboxes\r\n     */\r\n    prepListSourceCheckboxes() {\r\n        this.multiple = true; // force multiple in this case\r\n        // reset source and use checkboxes\r\n        this.source = [];\r\n        let elements = this.element.querySelectorAll('input[type=\"checkbox\"]');\r\n        for (let i = 0, l = elements.length; i < l; i += 1) {\r\n            let checkbox = elements[i];\r\n            // must have a value other than empty string\r\n            if (!checkbox.value) {\r\n                continue;\r\n            }\r\n            let toPush = { element: checkbox, value: checkbox.value };\r\n            // label searching\r\n            let label = checkbox.closest('label');\r\n            if (!label && checkbox.id) {\r\n                label = document.querySelector('[for=\"' + checkbox.id + '\"]');\r\n            }\r\n            if (label) {\r\n                toPush.label = label.textContent;\r\n            }\r\n            // if no label so far, re-use value\r\n            if (!toPush.label) {\r\n                toPush.label = toPush.value;\r\n            }\r\n            toPush.cleanedLabel = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (checkbox.checked) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on <select> options\r\n     */\r\n    prepListSourceDdl() {\r\n        this.multiple = this.element.multiple; // force multiple to match select\r\n        // reset source and use options\r\n        this.source = [];\r\n        let options = this.element.querySelectorAll('option');\r\n        for (let i = 0, l = options.length; i < l; i += 1) {\r\n            let option = options[i];\r\n            // must have a value other than empty string\r\n            if (!option.value) {\r\n                continue;\r\n            }\r\n            let toPush = {\r\n                element: option,\r\n                value: option.value,\r\n                label: option.textContent\r\n            };\r\n            toPush.cleanedLabel = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (option.selected) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description build up selected array if starting element was an input, and had a value\r\n     * @param {Object[]} source\r\n     */\r\n    prepSelectedFromArray(source) {\r\n        let value = this.elementIsInput && this.element.value;\r\n        if (value && source && source.length) {\r\n            // account for multiple mode\r\n            let multiple = this.options.multiple;\r\n            let separator = this.options.multipleSeparator;\r\n            let valueArr = multiple ? value.split(separator) : [value];\r\n\r\n            for (let i = 0, l = valueArr.length; i < l; i += 1) {\r\n                let val = valueArr[i];\r\n                let isQueryIn = this.isQueryContainedIn;\r\n                // make sure it is not already in the selected array\r\n                let isInSelected = isQueryIn(val, this.selected, 'value') > -1;\r\n\r\n                // but is in the source array (check via 'value', not 'label')\r\n                if (!isInSelected) {\r\n                    let indexInSource = isQueryIn(val, source, 'value');\r\n                    if (indexInSource > -1) {\r\n                        this.selected.push(source[indexInSource]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust starting source array to format needed, and set selected\r\n     */\r\n    prepListSourceArray() {\r\n        let mapping = this.options.sourceMapping;\r\n        this.source = processSourceArray(this.source, mapping);\r\n        this.prepSelectedFromArray(this.source);\r\n    }\r\n\r\n    /**\r\n     * @description trigger source string endpoint to generate selected array\r\n     */\r\n    prepListSourceAsync() {\r\n        this.async = true;\r\n        if (this.elementIsInput && this.element.value) {\r\n            this.handleAsync(this.element.value, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description process source function to generate selected array\r\n     */\r\n    prepListSourceFunction() {\r\n        if (this.elementIsInput && this.element.value) {\r\n            this.source.call(undefined, this.element.value, response => {\r\n                this.prepSelectedFromArray(processSourceArray(response));\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust set sources to needed format\r\n     */\r\n    prepListSource() {\r\n        // allow complete control over the source handling via custom function\r\n        if (typeof this.source === 'function') {\r\n            return this.prepListSourceFunction();\r\n        }\r\n\r\n        // string source - treat as async endpoint\r\n        if (typeof this.source === 'string' && this.source.length) {\r\n            return this.prepListSourceAsync();\r\n        }\r\n\r\n        // array source - copy array\r\n        if (Array.isArray(this.source) && this.source.length) {\r\n            return this.prepListSourceArray();\r\n        }\r\n\r\n        // dropdown source\r\n        if (this.elementIsSelect) {\r\n            return this.prepListSourceDdl();\r\n        }\r\n\r\n        // checkboxlist source\r\n        if (this.element.querySelector('input[type=\"checkbox\"]')) {\r\n            this.prepListSourceCheckboxes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set input starting states - aria attributes, disabled state, starting value\r\n     */\r\n    setInputStartingStates() {\r\n        // update corresponding label to now focus on the new input\r\n        if (this.ids.ELEMENT) {\r\n            let label = document.querySelector(\r\n                '[for=\"' + this.ids.ELEMENT + '\"]'\r\n            );\r\n            if (label) {\r\n                label.ariaAutocompleteOriginalFor = this.ids.ELEMENT;\r\n                label.setAttribute('for', this.ids.INPUT);\r\n            }\r\n        }\r\n\r\n        // update aria-describedby and aria-labelledby attributes if present\r\n        let describedBy = this.element.getAttribute('aria-describedby');\r\n        if (describedBy) {\r\n            this.input.setAttribute('aria-describedby', describedBy);\r\n        }\r\n        let labelledBy = this.element.getAttribute('aria-labelledby');\r\n        if (labelledBy) {\r\n            this.input.setAttribute('aria-labelledby', labelledBy);\r\n        }\r\n\r\n        // if selected item(s) already exists\r\n        let disable = this.disabled;\r\n        if (this.selected.length) {\r\n            // for multi select variant, set selected items\r\n            if (this.multiple) {\r\n                this.buildMultiSelected();\r\n                disable = this.selected.length >= this.options.maxItems;\r\n            }\r\n            // for single select variant, set value to match\r\n            else {\r\n                this.input.value = this.selected[0].label || '';\r\n                this.term = this.inputPollingValue = this.input.value;\r\n            }\r\n        }\r\n\r\n        // setup input description - done here in case value is affected above\r\n        this.setInputDescription();\r\n\r\n        // disable the control if the invoked element was disabled\r\n        if (disable || !!this.element.disabled) {\r\n            this.disable();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description build and insert component html structure\r\n     */\r\n    setHtml() {\r\n        let o = this.options;\r\n        let cssName = this.cssNameSpace;\r\n        let explainerText = o.srListLabelText;\r\n        let name = o.name ? ` ${o.name}` : ``;\r\n        let listClass = o.listClassName ? ` ${o.listClassName}` : '';\r\n        let inputClass = o.inputClassName ? ` ${o.inputClassName}` : '';\r\n        let wrapperClass = o.wrapperClassName ? ` ${o.wrapperClassName}` : '';\r\n        let explainer = explainerText ? ` aria-label=\"${explainerText}\"` : '';\r\n\r\n        let newHtml = [\r\n            `<div id=\"${this.ids.WRAPPER}\" class=\"${cssName}__wrapper${wrapperClass}\">`\r\n        ];\r\n\r\n        // add input\r\n        newHtml.push(\r\n            `<input type=\"text\" autocomplete=\"off\" aria-expanded=\"false\" aria-autocomplete=\"list\" ` +\r\n                `role=\"combobox\" id=\"${this.ids.INPUT}\" placeholder=\"${o.placeholder}\" ` +\r\n                `aria-owns=\"${this.ids.LIST}\" aria-placeholder=\"${o.placeholder}\" ` +\r\n                `class=\"${cssName}__input${inputClass}\"${name} />`\r\n        );\r\n\r\n        // button to show all available options\r\n        if (o.showAllControl) {\r\n            newHtml.push(\r\n                `<span role=\"button\" aria-label=\"${o.srShowAllText}\" class=\"${cssName}__show-all\" ` +\r\n                    `tabindex=\"0\" id=\"${this.ids.BUTTON}\" aria-expanded=\"false\"></span>`\r\n            );\r\n        }\r\n        // add the list holder\r\n        newHtml.push(\r\n            `<ul id=\"${this.ids.LIST}\" class=\"${cssName}__list${listClass}\" role=\"listbox\" ` +\r\n                `hidden=\"hidden\"${explainer}></ul>`\r\n        );\r\n        // add the screen reader assistance element\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-assistance\" ` +\r\n                `id=\"${this.ids.SR_ASSISTANCE}\">${o.srAssistiveText}</span>`\r\n        );\r\n        // add element for added screen reader announcements\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-announcements\" ` +\r\n                `id=\"${this.ids.SR_ANNOUNCEMENTS}\" aria-live=\"polite\" aria-atomic=\"true\"></span>`\r\n        );\r\n\r\n        // close all and append\r\n        newHtml.push(`</div>`);\r\n        this.element.insertAdjacentHTML('afterend', newHtml.join(''));\r\n    }\r\n\r\n    /**\r\n     * @description generate api object to expose on the element\r\n     */\r\n    generateApi() {\r\n        this.api = {\r\n            open: () => this.show.call(this),\r\n            close: () => this.hide.call(this)\r\n        };\r\n\r\n        let a = [\r\n            'options',\r\n            'refresh',\r\n            'destroy',\r\n            'filter',\r\n            'input',\r\n            'wrapper',\r\n            'list',\r\n            'selected'\r\n        ];\r\n\r\n        for (let i = 0, l = a.length; i < l; i += 1) {\r\n            this.api[a[i]] =\r\n                typeof this[a[i]] === 'function'\r\n                    ? (...args) => this[a[i]].apply(this, args)\r\n                    : this[a[i]];\r\n        }\r\n\r\n        // store api on original element\r\n        this.element.ariaAutocomplete = this.api;\r\n    }\r\n\r\n    /**\r\n     * refresh method for use after changing options, source, etc. - soft destroy\r\n     * @todo: test this!\r\n     */\r\n    refresh() {\r\n        // store element, as this is wiped in destroy method\r\n        let element = this.element;\r\n        // do not do a hard destroy\r\n        this.destroy(true);\r\n        this.init(element, this.options);\r\n    }\r\n\r\n    /**\r\n     * @description destroy component\r\n     * @param {Boolean=} isRefresh\r\n     */\r\n    destroy(isRefresh = false) {\r\n        // return original label 'for' attribute back to element id\r\n        let label = document.querySelector('[for=\"' + this.ids.INPUT + '\"]');\r\n        if (label && label.ariaAutocompleteOriginalFor) {\r\n            label.setAttribute('for', label.ariaAutocompleteOriginalFor);\r\n            delete label.ariaAutocompleteOriginalFor;\r\n        }\r\n        // remove the document click if still bound\r\n        if (this.documentClickBound) {\r\n            document.removeEventListener('click', this.documentClick);\r\n        }\r\n        // remove the whole wrapper and set all instance properties to null to clean up DOMNode references\r\n        this.element.parentNode.removeChild(this.wrapper);\r\n        let destroyCheck = prop => (isRefresh ? prop instanceof Element : true);\r\n        for (let i in this) {\r\n            if (this.hasOwnProperty(i) && destroyCheck(this[i])) {\r\n                this[i] = null;\r\n            }\r\n        }\r\n        delete this.element.ariaAutocomplete;\r\n        // re-show original element\r\n        this.show(this.element);\r\n    }\r\n\r\n    /**\r\n     * @description initialise AriaAutocomplete\r\n     * @param {Element} element\r\n     * @param {Object=} options\r\n     */\r\n    init(element, options) {\r\n        this.selected = [];\r\n        this.element = element;\r\n        this.elementIsInput = element.nodeName === 'INPUT';\r\n        this.elementIsSelect = element.nodeName === 'SELECT';\r\n        this.options = mergeObjects(DEFAULT_OPTIONS, options);\r\n\r\n        // set these internally so that the component has to be properly refreshed to change them\r\n        this.source = this.options.source;\r\n        this.multiple = this.options.multiple;\r\n        this.cssNameSpace = this.options.cssNameSpace;\r\n        this.documentClick = this.handleComponentBlur.bind(this);\r\n\r\n        // create html structure\r\n        this.setHtml();\r\n\r\n        // additional app variables\r\n        this.list = document.getElementById(this.ids.LIST);\r\n        this.input = document.getElementById(this.ids.INPUT);\r\n        this.wrapper = document.getElementById(this.ids.WRAPPER);\r\n        this.showAll = document.getElementById(this.ids.BUTTON);\r\n        this.srAnnouncements = document.getElementById(\r\n            this.ids.SR_ANNOUNCEMENTS\r\n        );\r\n\r\n        // set internal source array, from static elements if necessary\r\n        this.prepListSource();\r\n\r\n        // set any further classes on component wrapper based on options\r\n        let wrapperClass = '';\r\n        if (this.options.showAllControl) {\r\n            wrapperClass += ` ${cssName}__wrapper--show-all`;\r\n        }\r\n        if (this.options.autoGrow) {\r\n            wrapperClass += ` ${this.cssNameSpace}__wrapper--autogrow`;\r\n        }\r\n        if (this.multiple) {\r\n            wrapperClass += ` ${this.cssNameSpace}__wrapper--multiple`;\r\n        }\r\n        if (wrapperClass) {\r\n            addClass(this.wrapper, wrapperClass);\r\n        }\r\n\r\n        // hide element and list manually\r\n        this.hide(this.list); // pass in the list so that the onClose is not triggered\r\n        this.hide(this.element);\r\n\r\n        // generate api object to expose\r\n        this.generateApi();\r\n\r\n        // set starting states for input - must be after source has been defined\r\n        this.setInputStartingStates();\r\n\r\n        // bind all necessary events\r\n        this.bindEvents();\r\n\r\n        // fire onready callback\r\n        this.triggerOptionCallback('onReady', [this.wrapper]);\r\n    }\r\n}\r\n\r\n/**\r\n * @description expose specific function rather than the AriaAutocomplete class\r\n * @param {Element} elem\r\n * @param {Object} options\r\n * @returns {Object}\r\n */\r\nwindow['AriaAutocomplete'] = (elem, options) => {\r\n    return new AriaAutocomplete(elem, options).api;\r\n};\r\n\r\nexport default (elem, options) => {\r\n    return new AriaAutocomplete(elem, options).api;\r\n};\r\n"]}