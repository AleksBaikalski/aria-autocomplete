{"version":3,"sources":["closest-polyfill.js","helpers.js","aria-autocomplete.js"],"names":["Element","prototype","matches","msMatchesSelector","webkitMatchesSelector","closest","s","el","parentElement","parentNode","nodeType","REGEX_TRIM","trimString","theString","replace","addClass","element","classes","currentValue","getAttribute","current","finalValue","i","cs","split","l","length","indexOf","setAttribute","removeClass","REGEX_AMPERSAND","REGEX_DUPE_WHITESPACE","REGEX_MAKE_SAFE","REGEX_TO_IGNORE","cleanString","toLowerCase","isPrintableKey","keyCode","mergeObjects","n","o","a","p","hasOwnProperty","dispatchEvent","event","document","e","createEvent","initEvent","fireEvent","setElementState","selected","instance","nodeName","checked","elementChangeEventTimer","clearTimeout","setTimeout","processSourceArray","sourceArray","setCleanedLabel","toReturn","result","entry","value","label","toString","cleanedLabel","push","appIndex","DEFAULT_OPTIONS","source","delay","minLength","maxResults","showAllButton","confirmOnBlur","multiple","maxItems","multipleSeparator","placeholder","noResultsText","listClassName","inputClassName","wrapperClassName","cssNameSpace","asyncQueryParam","asyncMaxResultsParam","srDeleteText","srDeletedText","srSelectedText","srExplanatoryText","srAssistiveText","srResultsText","onAsyncSuccess","undefined","onResponse","onSearch","onSelect","onReady","onClose","onOpen","AriaAutocomplete","options","ariaAutocomplete","elementIsInput","elementIsSelect","ids","ELEMENT","id","PREFIX","LIST","INPUT","BUTTON","OPTION","WRAPPER","OPTION_SELECTED","SR_ASSISTANCE","SR_ANNOUNCEMENTS","list","input","wrapper","showAll","srAnnouncements","xhr","term","async","menuOpen","disabled","filtering","forceShowAll","filteredSource","currentListHtml","currentSelectedIndex","filterTimer","announcementTimer","componentBlurTimer","init","name","args","apply","toRemove","removeAttribute","expanded","show","triggerOptionCallback","hide","query","prop","text","textContent","exists","describedBy","cssName","nodes","childNodes","index","resetOptionAttributes","target","focus","setOptionFocus","toFocus","toAdd","valToSet","valToSetString","join","disable","enable","focusAfterSelection","option","alreadySelected","setSourceElementValues","buildMultiSelected","announce","results","resultsLoop","j","k","labelMatch","thisResult","toShow","optionId","updated","removeSelectedFromResults","callback","noText","noResults","optionClass","cancelFilterPrep","newListHtml","innerHTML","canCancel","XMLHttpRequest","encode","encodeURIComponent","isShowAll","limit","limitParam","queryParam","params","url","test","abort","open","onload","items","responseText","setListOptions","send","callbackResponse","handleAsync","call","search","staticSourceIndex","nameSpace","doValueOverrideCheck","runNow","setInputDescription","modifier","keydown","type","altKey","ctrlKey","metaKey","equalVals","filter","preventDefault","filterPrep","force","forceClose","activeElem","activeElement","contains","isQueryIn","isQueryContainedIn","toUse","handleOptionSelect","isInputOrDdl","filterPrepShowAll","usable","targetIsInput","handleEnterKey","selectedLength","lastSelectedLabel","announcement","pop","focusInput","handleComponentBlur","handleUpArrowKey","handleDownArrowKey","handleKeyDownDefault","addEventListener","prepKeyDown","nodeIndex","elements","querySelectorAll","checkbox","toPush","querySelector","node","separator","valueArr","val","isInSelected","indexInSource","Array","isArray","prepListSourceArray","prepListSourceDdl","prepListSourceCheckboxes","ariaAutocompleteOriginalFor","labelledBy","explainerText","listClass","inputClass","wrapperClass","explainer","newHtml","insertAdjacentHTML","destroy","removeChild","setHtml","getElementById","prepListSource","setInputStartingStates","bindEvents","elem","autocomplete","api"],"mappings":"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","file":"aria-autocomplete.js","sourceRoot":"../src","sourcesContent":["if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\nif (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n        var el = this;\n        do { \n            if (el.matches(s)) { \n                return el; \n            } \n            el = el.parentElement || el.parentNode; \n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}","const REGEX_TRIM = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n/**\n * trim string helper\n * @param {string} theString\n */\nexport function trimString(theString) {\n    return theString == null ? '' : (theString + '').replace(REGEX_TRIM, '');\n}\n\n/**\n * add class(es) to element\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to add\n */\nexport function addClass(element, classes) {\n    let currentValue = trimString(element.getAttribute && element.getAttribute('class'));\n    let current = ' ' + currentValue + ' ';\n    let finalValue = '';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        if (cs[i] !== '' && current.indexOf(' ' + cs[i] + ' ') === -1) {\n            finalValue += ' ' + cs[i];\n        }\n    }\n    if (currentValue !== (finalValue = currentValue + finalValue)) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n/**\n * remove class(es) from element\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to remove\n */\nexport function removeClass(element, classes) {\n    let currentValue = trimString(element.getAttribute && element.getAttribute('class'));\n    let finalValue = ' ' + currentValue + ' ';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        finalValue = finalValue.replace(' ' + cs[i] + ' ', ' ');\n    }\n    if (currentValue !== (finalValue = trimString(finalValue))) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n// regex constants used for string cleaning\nconst REGEX_AMPERSAND = /&/g;\nconst REGEX_DUPE_WHITESPACE = /\\s\\s+/g;\nconst REGEX_MAKE_SAFE = /[.*+?^${}()|[\\]\\\\]/g;\nconst REGEX_TO_IGNORE = /[\\u2018\\u2019',:\\u2013-]/g;\n/**\n * @description clean string of some characters, and make safe for regex searching\n * @param {String} theString\n * @returns {String}\n */\nexport function cleanString(theString) {\n    theString = theString.replace(REGEX_TO_IGNORE, ''); // ignore quotes, commas, colons, and hyphens\n    theString = theString.replace(REGEX_AMPERSAND, 'and'); // treat & and 'and' as the same\n    theString = theString.replace(REGEX_MAKE_SAFE, '\\\\$&'); // make safe for regex searching\n    theString = theString.replace(REGEX_DUPE_WHITESPACE, ' '); // ignore duplicate whitespace \n    return trimString(theString.toLowerCase()); // case insensitive\n}\n\n/**\n * @description check if keycode is for a printable/width-affecting character\n * @param {Number} keyCode \n * @returns {Boolean}\n */\nexport function isPrintableKey(keyCode) {\n    return (\n        (keyCode >= 48 && keyCode <= 57) || // 0-9\n        (keyCode >= 65 && keyCode <= 90) || // a-z\n        (keyCode >= 96 && keyCode <= 111) || // numpad 0-9, numeric operators\n        (keyCode >= 186 && keyCode <= 222) || // semicolon, equal, comma, dash, etc.\n        keyCode === 32 || keyCode === 8 || keyCode === 46 // space, backspace, or delete\n    );\n}\n\n/**\n * @description merge objects together to generate a new one\n * @param {Object} args - objects to merge together\n * @returns {Object}\n */\nexport function mergeObjects(...args) {\n    let n = {};\n    for (let i = 0, l = args.length; i < l; i += 1) {\n        let o = a[i];\n        for (let p in o) {\n            if (o.hasOwnProperty(p) && typeof o[p] !== 'undefined') {\n                n[p] = o[p];\n            }\n        }\n    }\n    return n;\n}\n\n/**\n * @description dispatch event helper\n * @param {Element} element\n * @param {String} event\n */\nexport function dispatchEvent(element, event) {\n    if ('createEvent' in document) {\n        let e = document.createEvent('HTMLEvents');\n        e.initEvent(event, true, true);\n        element.dispatchEvent(e);\n    } else {\n        element.fireEvent('on' + event);\n    }\n}\n\n/**\n * @description set element option or checkbox to specified state and trigger change event\n * @param {Element} element\n * @param {Boolean} selected\n * @param {(AriaAutocomplete|Object)} instance\n */\nexport function setElementState(element, selected, instance) {\n    selected = !!selected;\n    if (element) {\n        // handle checkbox\n        if (element.nodeName === 'INPUT' && typeof element.checked === 'boolean' && element.checked !== selected) {\n            element.checked = selected;\n            dispatchEvent(element, 'change');\n        }\n\n        // handle dropdown option\n        if (element.nodeName === 'OPTION' && element.selected !== selected) {\n            element.selected = selected;\n            // ensure change event only fires once for dropdown\n            if (instance.elementChangeEventTimer) {\n                clearTimeout(instance.elementChangeEventTimer);\n            }\n            instance.elementChangeEventTimer = setTimeout(function () {\n                dispatchEvent(element.closest('select'), 'change');\n            }, 1);\n        }\n    }\n}\n\n/**\n * @description process an array of strings or objects to ensure needed props exist\n * @param {(String|Object)[]} sourceArray\n * @param {Boolean=} setCleanedLabel - defaults to true\n * @returns {Array}\n */\nexport function processSourceArray(sourceArray, setCleanedLabel) {\n    let toReturn = [];\n    for (let i = 0, l = sourceArray.length; i < l; i += 1) {\n        let result = {};\n        let entry = sourceArray[i];\n        // handle array of strings\n        if (typeof entry === 'string') {\n            result.value = entry;\n            result.label = entry;\n        }\n        // handle array of objects - ensure value and label exist, and maintain any other properties\n        else {\n            result = entry;\n            result.value = (result.value || result.label || '').toString();\n            result.label = (result.label || result.value || '').toString();\n        }\n        // whether to set a cleaned label for static source filtering (in filter method)\n        if (setCleanedLabel !== false) {\n            result.cleanedLabel = cleanString(result.label);\n        }\n        toReturn.push(result);\n    }\n    return toReturn;\n}","import './closest-polyfill';\r\nimport {\r\n    trimString,\r\n    addClass,\r\n    removeClass,\r\n    cleanString,\r\n    isPrintableKey,\r\n    mergeObjects,\r\n    dispatchEvent,\r\n    setElementState,\r\n    processSourceArray\r\n} from './helpers';\r\n\r\nlet appIndex = 0;\r\n\r\nconst DEFAULT_OPTIONS = {\r\n    /**\r\n     * @description string for async endpoint, array of strings, array of objects with value and label, or function\r\n     * @type {String|String[]|Object[]|Function}\r\n     */\r\n    source: '',\r\n\r\n    /** @description input delay before running a search */\r\n    delay: 300,\r\n    /** @description min number of characters to run a search (includes spaces) */\r\n    minLength: 0,\r\n    /** @description max number of results to render */\r\n    maxResults: 9999,\r\n    /** @description whether to render a button that triggers showing all options */\r\n    showAllButton: true,\r\n    /** @description confirm selection when blurring off of the control */\r\n    confirmOnBlur: true,\r\n\r\n    /** @description whether to allow multiple items to be selected */\r\n    multiple: false,\r\n    /** @description max number of items that can be selected */\r\n    maxItems: 9999,\r\n    /** @description if element is an input, and in multiple mode, character that separates the values */\r\n    multipleSeparator: ',',\r\n\r\n    /** @description placeholder text to show in generated input */\r\n    placeholder: 'Type to search...',\r\n    /** @description text to show (and announce) if no results found */\r\n    noResultsText: 'No results',\r\n\r\n    /** @description class name to add to list */\r\n    listClassName: '',\r\n    /** @description class name to add to input */\r\n    inputClassName: '',\r\n    /** @description class name to add to component wrapper */\r\n    wrapperClassName: 'form-control',\r\n    /** @description string to use in front of main classes that are used */\r\n    cssNameSpace: 'aria-autocomplete',\r\n\r\n    /** @description when source is a string, param to use when adding input value */\r\n    asyncQueryParam: 'q',\r\n    /** @description when source is a string, param to use when adding results limit */\r\n    asyncMaxResultsParam: 'limit',\r\n\r\n    /** @description in multi mode, screen reader text used for element deletion - prepended to label */\r\n    srDeleteText: 'delete',\r\n    /** @description in multi mode, screen reader text announced after deletion - appended to label */\r\n    srDeletedText: 'deleted',\r\n    /** @description screen reader text announced after selection - appended to label */\r\n    srSelectedText: 'selected',\r\n    /** @description screen reader explainer added to the list element via aria-label attribute */\r\n    srExplanatoryText: 'Search suggestions',\r\n    /** @description screen reader description used for main input when empty */\r\n    srAssistiveText:\r\n        'When autocomplete results are available use up and down arrows to review and enter to select. ' +\r\n        'Touch device users, explore by touch or with swipe gestures.',\r\n    /** @description screen reader announcement after results are rendered */\r\n    srResultsText: length =>\r\n        `${length} ${length === 1 ? 'result' : 'results'} available.`,\r\n\r\n    /** @description callback after async call completes - can be used to format the results */\r\n    onAsyncSuccess: undefined, //  to needed format (onResponse can also be used for this)\r\n    /** @description callback prior to rendering - can be used to format the results */\r\n    onResponse: undefined, // before response is processed and rendered - can be used to modify results\r\n    /** @description callback before search is performed - can be used to affect search value */\r\n    onSearch: undefined,\r\n    /** @description callback after selection is made */\r\n    onSelect: undefined,\r\n    /** @description callback when main script processing and initial rendering has finished */\r\n    onReady: undefined,\r\n    /** @description callback when list area closes */\r\n    onClose: undefined,\r\n    /** @description callback when list area opens */\r\n    onOpen: undefined\r\n};\r\n\r\nclass AriaAutocomplete {\r\n    /**\r\n     * @param {Element} element\r\n     * @param {Object=} options\r\n     */\r\n    constructor(element, options) {\r\n        // fail silently if no list provided\r\n        if (!element) {\r\n            return;\r\n        }\r\n\r\n        // if instance already exists on the list element, do not re-initialise\r\n        if (element.ariaAutocomplete) {\r\n            return element.ariaAutocomplete;\r\n        }\r\n\r\n        appIndex += 1;\r\n        this.element = element;\r\n        this.elementIsInput = element.nodeName === 'INPUT';\r\n        this.elementIsSelect = element.nodeName === 'SELECT';\r\n\r\n        // ids used for DOM queries and accessibility attributes e.g. aria-controls\r\n        this.ids = {};\r\n        this.ids.ELEMENT = element.id;\r\n        this.ids.PREFIX = `${element.id || ''}aria-autocomplete-${appIndex}`;\r\n        this.ids.LIST = `${this.ids.PREFIX}-list`;\r\n        this.ids.INPUT = `${this.ids.PREFIX}-input`;\r\n        this.ids.BUTTON = `${this.ids.PREFIX}-button`;\r\n        this.ids.OPTION = `${this.ids.PREFIX}-option`;\r\n        this.ids.WRAPPER = `${this.ids.PREFIX}-wrapper`;\r\n        this.ids.OPTION_SELECTED = `${this.ids.OPTION}-selected`;\r\n        this.ids.OPTION_SELECTED = `${this.ids.OPTION}-selected`;\r\n        this.ids.SR_ASSISTANCE = `${this.ids.PREFIX}-sr-assistance`;\r\n        this.ids.SR_ANNOUNCEMENTS = `${this.ids.PREFIX}-sr-announcements`;\r\n\r\n        // always have an id on the original element for caching state\r\n        if (!this.ids.ELEMENT) {\r\n            this.ids.ELEMENT = `${this.ids.PREFIX}-element`;\r\n            this.element.setAttribute('id', this.ids.ELEMENT);\r\n        }\r\n\r\n        // vars defined later - elements\r\n        this.list;\r\n        this.input;\r\n        this.wrapper;\r\n        this.showAll;\r\n        this.srAnnouncements;\r\n\r\n        // vars defined later - non elements\r\n        this.xhr;\r\n        this.term;\r\n        this.async;\r\n        this.source;\r\n        this.menuOpen;\r\n        this.multiple;\r\n        this.selected;\r\n        this.disabled;\r\n        this.filtering;\r\n        this.cssNameSpace;\r\n        this.forceShowAll;\r\n        this.filteredSource; // filtered source items to render\r\n        this.currentListHtml;\r\n        this.currentSelectedIndex; // for storing index of currently focused option\r\n\r\n        // timers\r\n        this.filterTimer;\r\n        this.announcementTimer;\r\n        this.componentBlurTimer;\r\n        this.elementChangeEventTimer;\r\n\r\n        this.options = mergeObjects(DEFAULT_OPTIONS, options);\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * trigger callbacks included in component options\r\n     * @param {String} name\r\n     * @param {Array=} args\r\n     */\r\n    triggerOptionCallback(name, args) {\r\n        if (typeof this.options[name] === 'function') {\r\n            return this.options[name].apply(this.wrapper, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description show element with CSS only - if none provided, set list state to visible\r\n     * @param {Element=} element\r\n     */\r\n    show(element) {\r\n        if (typeof element !== 'undefined') {\r\n            let toRemove = `${this.cssNameSpace}--hide hide hidden`;\r\n            removeClass(element, toRemove);\r\n            return element.removeAttribute('hidden');\r\n        }\r\n\r\n        this.input.setAttribute('aria-expanded', 'true');\r\n        if (this.showAll) {\r\n            let expanded = (!!this.forceShowAll).toString();\r\n            this.showAll.setAttribute('aria-expanded', expanded);\r\n        }\r\n        if (!this.menuOpen) {\r\n            this.show(this.list);\r\n            this.menuOpen = true;\r\n            this.triggerOptionCallback('onOpen', [this.list]);\r\n        }\r\n    }\r\n    /**\r\n     * @description hide element with CSS only - if none provided, set list state to hidden\r\n     * @param {Element=} element\r\n     */\r\n    hide(element) {\r\n        if (typeof element !== 'undefined') {\r\n            addClass(element, `${this.cssNameSpace}--hide hide hidden`);\r\n            return element.setAttribute('hidden', 'hidden');\r\n        }\r\n\r\n        this.currentSelectedIndex = -1;\r\n        this.input.setAttribute('aria-expanded', 'false');\r\n        if (this.showAll) {\r\n            this.showAll.setAttribute('aria-expanded', 'false');\r\n        }\r\n        if (this.menuOpen) {\r\n            this.hide(this.list);\r\n            this.menuOpen = false;\r\n            this.triggerOptionCallback('onClose', [this.list]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description enable autocomplete (e.g. when under maxItems selected)\r\n     */\r\n    enable() {\r\n        if (this.disabled) {\r\n            this.disabled = false;\r\n            this.input.disabled = false;\r\n            let n = this.cssNameSpace;\r\n            removeClass(this.input, `${n}__input--disabled disabled`);\r\n            removeClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '0');\r\n                removeClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description disable autocomplete (e.g. when maxItems selected)\r\n     */\r\n    disable() {\r\n        if (!this.disabled) {\r\n            this.disabled = true;\r\n            this.input.disabled = true;\r\n            let n = this.cssNameSpace;\r\n            addClass(this.input, `${n}__input--disabled disabled`);\r\n            addClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '-1');\r\n                addClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description check if current input value is contained in a selection of options\r\n     * @param {String} query - string to use - checks input value otherwise\r\n     * @param {Array} options - array of objects with value and label properties\r\n     * @param {String=} prop - prop to check against in options array - defaults to 'label'\r\n     * @returns {Number} index of array entry that matches, or -1 if none found\r\n     */\r\n    isQueryContainedIn(query, options, prop) {\r\n        query = trimString(query || this.input.value).toLowerCase();\r\n        if (query) {\r\n            prop = prop || 'label';\r\n            for (let i = 0, l = options.length; i < l; i += 1) {\r\n                if (trimString(options[i][prop]).toLowerCase() === query) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * @description make a screen reader announcement\r\n     * @param {String} text\r\n     * @param {Number=} delay\r\n     */\r\n    announce(text, delay) {\r\n        if (!text || !this.srAnnouncements) {\r\n            return;\r\n        }\r\n        // in immediate case, do not user timer\r\n        if (delay === 0) {\r\n            return (this.srAnnouncements.textContent = text);\r\n        }\r\n        delay = typeof delay === 'number' ? delay : 400;\r\n        if (this.announcementTimer) {\r\n            clearTimeout(this.announcementTimer);\r\n        }\r\n        this.announcementTimer = setTimeout(() => {\r\n            this.srAnnouncements.textContent = text;\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @todo: implement this!\r\n     */\r\n    buildMultiSelected() {}\r\n\r\n    /**\r\n     * @description set the aria-describedby attribute on the input\r\n     */\r\n    setInputDescription() {\r\n        let exists = this.input.getAttribute('aria-describedby');\r\n        let current = trimString(exists || '');\r\n        let describedBy = current.replace(this.ids.SR_ASSISTANCE, '');\r\n\r\n        if (this.input.value.length === 0) {\r\n            describedBy = describedBy + ' ' + this.ids.SR_ASSISTANCE;\r\n        }\r\n\r\n        // set or remove attribute, but only if necessary\r\n        if ((describedBy = trimString(describedBy))) {\r\n            if (describedBy !== current) {\r\n                this.input.setAttribute('aria-describedby', describedBy);\r\n            }\r\n        } else if (exists) {\r\n            this.input.removeAttribute('aria-describedby');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description reset classes and aria-selected attribute for all visible filtered options\r\n     */\r\n    resetOptionAttributes() {\r\n        let cssName = this.cssNameSpace;\r\n        let nodes = this.list.childNodes;\r\n        let l = nodes.length;\r\n\r\n        while (l--) {\r\n            removeClass(nodes[l], `${cssName}__option--focused focused focus`);\r\n            nodes[l].setAttribute('aria-selected', 'false');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description move focus to correct option, or to input (on up and down arrows)\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     */\r\n    setOptionFocus(event, index) {\r\n        // set aria-selected to false and remove focused class\r\n        this.resetOptionAttributes();\r\n\r\n        // if negative index, or no options available, focus on input\r\n        let options = this.list.childNodes;\r\n        if (index < 0 || !options || !options.length) {\r\n            this.currentSelectedIndex = -1;\r\n            // focus on input, only if event was from another element\r\n            if (event && event.target !== this.input) {\r\n                this.input.focus();\r\n            }\r\n            return;\r\n        }\r\n\r\n        // down arrow on/past last option, focus on last item\r\n        if (index >= options.length) {\r\n            this.currentSelectedIndex = options.length - 1;\r\n            this.setOptionFocus(event, this.currentSelectedIndex);\r\n            return;\r\n        }\r\n\r\n        // if option found, focus...\r\n        let toFocus = options[index];\r\n        if (toFocus && typeof toFocus.getAttribute('tabindex') === 'string') {\r\n            this.currentSelectedIndex = index;\r\n            let toAdd = `${this.cssNameSpace}__option--focused focused focus`;\r\n            addClass(toFocus, toAdd);\r\n            toFocus.setAttribute('aria-selected', 'true');\r\n            toFocus.focus();\r\n            return;\r\n        }\r\n\r\n        // reset index just in case\r\n        this.currentSelectedIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * @description set values and dispatch events based on any DOM elements in the selected array\r\n     */\r\n    setSourceElementValues() {\r\n        let valToSet = [];\r\n        for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n            let entry = this.selected[i];\r\n            valToSet.push(entry.value);\r\n            setElementState(entry.element, true, this); // element processing\r\n        }\r\n\r\n        // set original input value\r\n        if (this.elementIsInput) {\r\n            let valToSetString = valToSet.join(this.options.multipleSeparator);\r\n            if (valToSetString !== this.element.value) {\r\n                this.element.value = valToSetString;\r\n                dispatchEvent(this.element, 'change');\r\n            }\r\n        }\r\n\r\n        // included in case of multi-select mode used with a <select> element as the source\r\n        if (!this.selected.length && this.elementIsSelect) {\r\n            this.element.value = '';\r\n        }\r\n\r\n        // set disabled state as needed\r\n        if (this.multiple && this.selected.length >= this.options.maxItems) {\r\n            return this.disable();\r\n        }\r\n        this.enable();\r\n    }\r\n\r\n    /**\r\n     * @description select option from the list by index\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     * @param {Boolean} focusAfterSelection\r\n     */\r\n    handleOptionSelect(event, index, focusAfterSelection) {\r\n        // defensive check for proper index, that the filteredSource exists, and not exceed max items option\r\n        if (\r\n            typeof index !== 'number' ||\r\n            index < 0 ||\r\n            (this.multiple && this.selected.length >= this.options.maxItems) ||\r\n            !this.filteredSource.length ||\r\n            !this.filteredSource[index]\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // generate new object from the selected item in case of varying original source\r\n        /** @todo: confirm if a new object actually needs to be generated */\r\n        let option = mergeObjects(this.filteredSource[index]);\r\n\r\n        // detect if selected option is already in selected array\r\n        let l = this.selected.length;\r\n        let alreadySelected = false;\r\n        while (l--) {\r\n            if (this.selected[l].value === option.value) {\r\n                alreadySelected = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.input.value = this.multiple ? '' : option.label;\r\n\r\n        // reset selected array in single select mode\r\n        if (!alreadySelected && !this.multiple) {\r\n            this.selected = [];\r\n        }\r\n\r\n        // (re)set values of any DOM elements based on selected array\r\n        if (!alreadySelected) {\r\n            this.selected.push(option);\r\n            this.setSourceElementValues();\r\n            this.buildMultiSelected(option); // rebuild multi-selected if needed\r\n        }\r\n\r\n        this.triggerOptionCallback('onSelect', [option]);\r\n        this.announce(`${option.label} ${this.options.srSelectedText}`, 0);\r\n\r\n        // return focus to input\r\n        if (!this.disabled && focusAfterSelection !== false) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // close menu after option selection, and after returning focus to input\r\n        this.hide();\r\n    }\r\n\r\n    /**\r\n     * @description remove selected entries from results if in multiple mode\r\n     * @param {Array} results\r\n     * @returns {Array}\r\n     */\r\n    removeSelectedFromResults(results) {\r\n        if (!this.multiple || !this.selected.length) {\r\n            return results;\r\n        }\r\n        let toReturn = [];\r\n        resultsLoop: for (let i = 0, l = results.length; i < l; i += 1) {\r\n            let selected = this.selected;\r\n            let result = results[i];\r\n            for (let j = 0, k = selected.length; j < k; j += 1) {\r\n                let labelMatch = result.label === selected[j].label;\r\n                if (labelMatch && result.value === selected[j].value) {\r\n                    continue resultsLoop;\r\n                }\r\n            }\r\n            toReturn.push(thisResult);\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * @description final filtering and render for list options, and render\r\n     * @param {Array} results\r\n     */\r\n    setListOptions(results) {\r\n        let toShow = [];\r\n        let optionId = this.ids.OPTION;\r\n        let cssName = this.cssNameSpace;\r\n        // if in multiple mode, exclude items already in the selected array\r\n        let updated = this.removeSelectedFromResults(results);\r\n        // allow callback to alter the response before rendering\r\n        let callback = this.triggerOptionCallback('onResponse', updated);\r\n\r\n        // now commit to setting the filtered source\r\n        this.filteredSource = callback ? processSourceArray(callback) : updated;\r\n        let length = this.filteredSource.length;\r\n\r\n        // build up the list html\r\n        let maxResults = this.options.maxResults;\r\n        for (let i = 0; i < length && i < maxResults; i += 1) {\r\n            toShow.push(\r\n                `<li tabindex=\"-1\" aria-selected=\"false\" role=\"option\" class=\"${cssName}__option\" id=\"${optionId}--${i}\" aria-posinset=\"${i +\r\n                    1}\" aria-setsize=\"${length}\">${\r\n                    this.filteredSource[i].label\r\n                }</li>`\r\n            );\r\n        }\r\n\r\n        // set has-results or no-results class on the list element\r\n        if (toShow.length) {\r\n            addClass(this.list, `${cssName}__list--has-results`);\r\n            removeClass(this.list, `${cssName}__list--no-results`);\r\n        } else {\r\n            removeClass(this.list, `${cssName}__list--has-results`);\r\n            addClass(this.list, `${cssName}__list--no-results`);\r\n        }\r\n\r\n        // no results text handling\r\n        let announce;\r\n        let noText = this.options.noResultsText;\r\n        if (!toShow.length && typeof noText === 'string' && noText.length) {\r\n            announce = noResults;\r\n            let optionClass = `${cssName}__option`;\r\n            toShow.push(\r\n                `<li class=\"${optionClass} ${optionClass}--no-results\">${noText}</li>`\r\n            );\r\n        }\r\n\r\n        // remove loading class(es) and reset variables\r\n        this.cancelFilterPrep();\r\n\r\n        // announce to screen reader\r\n        if (!announce) {\r\n            announce = this.triggerOptionCallback('srResultsText', [length]);\r\n        }\r\n        this.announce(announce);\r\n\r\n        // render the list, only if we have to\r\n        // time taken for string comparison is worth it to not have to re-parse and re-render the list\r\n        let newListHtml = toShow.join('');\r\n        if (this.currentListHtml !== newListHtml) {\r\n            this.currentListHtml = newListHtml;\r\n            /** @todo: test innerHTML vs insertAdjacentHtml performance in old IE */\r\n            this.list.innerHTML = newListHtml;\r\n        } else {\r\n            // if list html matches, and not re-rendered, clear aria-selected and focus classes\r\n            this.resetOptionAttributes();\r\n        }\r\n\r\n        // if toShow array is empty, make sure not to render the menu\r\n        if (!toShow.length) {\r\n            this.hide();\r\n            return;\r\n        }\r\n\r\n        this.show();\r\n        // reset forceShowAll must be after .show()\r\n        // aria-expanded attribute on showAllButton is controlled in .show() method\r\n        this.forceShowAll = false;\r\n    }\r\n\r\n    /**\r\n     * @description trigger async call for options to render\r\n     * @param {String} value\r\n     * @param {Boolean=} canCancel\r\n     */\r\n    handleAsync(value, canCancel = true) {\r\n        let options = this.options;\r\n        let xhr = new XMLHttpRequest();\r\n        let encode = encodeURIComponent;\r\n        let isShowAll = this.forceShowAll;\r\n        let limit = this.selected.length + options.maxResults;\r\n        let limitParam = `${encode(options.asyncMaxResultsParam)}=${limit}`;\r\n        let queryParam = `${encode(options.asyncQueryParam)}=${encode(value)}`;\r\n        let params = `${queryParam}&${limitParam}`;\r\n        let url = this.source + (/\\?/.test(this.source) ? '&' : '?') + params;\r\n\r\n        // abort any current call first\r\n        if (this.xhr) {\r\n            this.xhr.abort();\r\n        }\r\n\r\n        xhr.open('GET', url);\r\n        xhr.onload = () => {\r\n            this.forceShowAll = isShowAll; // return forceShowAll to previous state before the options render\r\n            let callback = this.triggerOptionCallback('onAsyncSuccess', [xhr]);\r\n            let items = processSourceArray(callback || xhr.responseText, false);\r\n            this.setListOptions(items);\r\n        };\r\n        xhr.send();\r\n\r\n        // allow the creation of an uncancellable call to use on first load\r\n        if (canCancel !== false) {\r\n            this.xhr = xhr;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description trigger filtering using a value\r\n     * @param {String} value\r\n     */\r\n    filter(value) {\r\n        // fail silently if no value is provided\r\n        if (typeof value === 'undefined') {\r\n            this.cancelFilterPrep();\r\n            return;\r\n        }\r\n\r\n        let forceShowAll = this.forceShowAll;\r\n        let callbackResponse = this.triggerOptionCallback('onSearch', [value]);\r\n        let toReturn = [];\r\n\r\n        // allow onSearch callback to affect the searched value\r\n        // only permitted when not a forceShowAll case\r\n        if (!forceShowAll && typeof callbackResponse === 'string') {\r\n            value = callbackResponse;\r\n        }\r\n\r\n        // store search term - used for comparison in filterPrep\r\n        this.term = value;\r\n\r\n        // async handling\r\n        if (this.async) {\r\n            this.handleAsync(value);\r\n            // set show all to false immediately as may be used in other places\r\n            this.forceShowAll = false;\r\n            return;\r\n        }\r\n\r\n        // handle the source as a function\r\n        if (typeof this.source === 'function') {\r\n            toReturn = this.source.call(this.wrapper, this.term);\r\n            this.setListOptions(toReturn);\r\n            return;\r\n        }\r\n\r\n        // if empty string, show all\r\n        if (!value) {\r\n            forceShowAll = true;\r\n        }\r\n\r\n        // existing list handling\r\n        if (this.source && this.source.length) {\r\n            if (!forceShowAll) {\r\n                value = cleanString(value);\r\n            }\r\n            for (let i = 0, l = this.source.length; i < l; i += 1) {\r\n                let entry = this.source[i];\r\n                if (forceShowAll || entry.cleanedLabel.search(value) !== -1) {\r\n                    toReturn.push({\r\n                        element: entry.element,\r\n                        staticSourceIndex: i,\r\n                        label: entry.label,\r\n                        value: entry.value\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setListOptions(toReturn);\r\n    }\r\n\r\n    /**\r\n     * @description cancel filter timer and remove loading classes\r\n     */\r\n    cancelFilterPrep() {\r\n        if (this.filterTimer) {\r\n            clearTimeout(this.filterTimer);\r\n        }\r\n        let nameSpace = this.cssNameSpace;\r\n        removeClass(this.wrapper, `${nameSpace}__wrapper--loading loading`);\r\n        removeClass(this.input, `${nameSpace}__input--loading loading`);\r\n        this.filtering = false;\r\n    }\r\n\r\n    /**\r\n     * @description checks before filtering, and set filter timer\r\n     * @param {Event} e\r\n     * @param {Boolean=} doValueOverrideCheck - whether to check input value against selected item(s)\r\n     * @param {Boolean=} runNow\r\n     */\r\n    filterPrep(e, doValueOverrideCheck = false, runNow = false) {\r\n        let forceShowAll = this.forceShowAll;\r\n        let delay = forceShowAll || runNow ? 0 : this.options.delay;\r\n\r\n        // clear timers\r\n        this.filtering = true;\r\n        this.cancelFilterPrep();\r\n        this.filterTimer = setTimeout(() => {\r\n            let value = this.input.value;\r\n            // treat as empty search if...\r\n            // forceShowAll, or in single mode and selected item label matches current value\r\n            if (\r\n                forceShowAll ||\r\n                value === '' ||\r\n                (doValueOverrideCheck &&\r\n                    !this.multiple &&\r\n                    this.selected.length &&\r\n                    trimString(this.selected[0].label) === trimString(value))\r\n            ) {\r\n                value = '';\r\n            }\r\n\r\n            // handle aria-describedby\r\n            this.setInputDescription();\r\n\r\n            if (!forceShowAll && value.length < this.options.minLength) {\r\n                this.hide();\r\n                return;\r\n            }\r\n\r\n            // try catch used due to permissions issues in some cases\r\n            let modifier;\r\n            try {\r\n                let keydown = e && e.type === 'keydown';\r\n                modifier = keydown && (e.altKey || e.ctrlKey || e.metaKey); // allow shift key, just in case...\r\n            } catch (e) {}\r\n\r\n            // if value to use matches last used search term, do nothing\r\n            let equalVals = value === this.term;\r\n\r\n            // prevent search being run again with the same value\r\n            if (!equalVals || (equalVals && !this.menuOpen && !modifier)) {\r\n                let n = this.cssNameSpace;\r\n                addClass(this.wrapper, `${n}__wrapper--loading loading`);\r\n                addClass(this.input, `${n}__input--loading loading`);\r\n                this.currentSelectedIndex = -1;\r\n                this.filter(value);\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description trigger filter prep in showAll mode\r\n     * @param {Event} event\r\n     */\r\n    filterPrepShowAll(event) {\r\n        event.preventDefault();\r\n        this.forceShowAll = true;\r\n        this.filterPrep(event, false, true);\r\n    }\r\n\r\n    /**\r\n     * @description blur behaviour for hiding list and removing focus class(es)\r\n     * @param {Event} event\r\n     * @param {Boolean} force - fire instantly and force blurring out of the component\r\n     */\r\n    handleComponentBlur(event, force) {\r\n        let delay = forceClose ? 0 : 100;\r\n        if (this.componentBlurTimer) {\r\n            clearTimeout(this.componentBlurTimer);\r\n        }\r\n        // use a timeout to ensure this blur fires after other focus events\r\n        // and in case the user focuses back in immediately\r\n        this.componentBlurTimer = setTimeout(() => {\r\n            // do nothing if blurring to an element within the list\r\n            let activeElem = document.activeElement;\r\n            // exception for show all button\r\n            /** @todo: exception for selected items */\r\n            if (!force && !(this.showAll && this.showAll === activeElem)) {\r\n                // must base this on the wrapper to allow scrolling the list in IE\r\n                if (this.wrapper.contains(activeElem)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            let isQueryIn = this.isQueryContainedIn;\r\n\r\n            // cancel any running async call\r\n            if (this.xhr) {\r\n                this.xhr.abort();\r\n            }\r\n\r\n            // confirmOnBlur behaviour\r\n            if (!force && this.options.confirmOnBlur && this.menuOpen) {\r\n                // if blurring from an option (currentSelectedIndex > -1), select it\r\n                let toUse = this.currentSelectedIndex;\r\n                if (typeof toUse !== 'number' || toUse === -1) {\r\n                    // otherwise check for exact match between current input value and available items\r\n                    toUse = isQueryIn('', this.filteredSource);\r\n                }\r\n                this.handleOptionSelect({}, toUse, false);\r\n            }\r\n\r\n            let n = this.cssNameSpace;\r\n            removeClass(this.wrapper, `${n}__wrapper--focused focused focus`);\r\n            removeClass(this.input, `${n}__input--focused focused focus`);\r\n            this.cancelFilterPrep();\r\n            this.hide();\r\n\r\n            // in single select case, if current value and chosen value differ, clear selected and input value\r\n            if (!this.multiple && isQueryIn('', this.selected) === -1) {\r\n                let isInputOrDdl = this.elementIsInput || this.elementIsSelect;\r\n                if (isInputOrDdl && this.element.value !== '') {\r\n                    this.element.value = '';\r\n                    dispatchEvent(this.element, 'change');\r\n                }\r\n                this.input.value = '';\r\n                this.selected = [];\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description enter keydown for selections\r\n     * @param {Event} event\r\n     */\r\n    handleEnterKey(event) {\r\n        /** @todo: if in multiple mode, and event target was a selected item, remove it */\r\n        if (this.multiple) {\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (this.showAll && event.target === this.showAll) {\r\n            this.filterPrepShowAll(event);\r\n            return;\r\n        }\r\n\r\n        if (this.menuOpen) {\r\n            event.preventDefault();\r\n            if (this.currentSelectedIndex > -1) {\r\n                this.handleOptionSelect(event, this.currentSelectedIndex);\r\n            }\r\n        }\r\n\r\n        // if enter keypress was from the filter input, trigger search immediately\r\n        if (event.target === this.input) {\r\n            this.filterPrep(event, false, true);\r\n        }\r\n    }\r\n    /**\r\n     * @description down arrow usage - option focus, or search all\r\n     * @param {Event} event\r\n     */\r\n    handleDownArrowKey(event) {\r\n        event.preventDefault();\r\n        // if closed, and text is long enough, run search\r\n        if (!this.menuOpen) {\r\n            this.forceShowAll = this.options.minLength < 1;\r\n            if (\r\n                this.forceShowAll ||\r\n                this.input.value.length >= this.options.minLength\r\n            ) {\r\n                this.filterPrep(event);\r\n            }\r\n        }\r\n        // move focus to downward option\r\n        if (this.menuOpen && !this.filtering) {\r\n            let current = this.currentSelectedIndex;\r\n            if (typeof current !== 'number' || current < 0) {\r\n                this.setOptionFocus(event, 0);\r\n            } else {\r\n                this.setOptionFocus(event, current + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description up arrow usage - option focus, or return focus to input\r\n     * @param {Event} event\r\n     */\r\n    handleUpArrowKey(event) {\r\n        event.preventDefault();\r\n        let usable = !this.disabled && this.menuOpen;\r\n        if (usable && typeof this.currentSelectedIndex === 'number') {\r\n            this.setOptionFocus(event, this.currentSelectedIndex - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description standard keydown handling (excluding enter, up, down, escape)\r\n     * @param {Event} event\r\n     */\r\n    handleKeyDownDefault(event) {\r\n        const targetIsInput = event.target === this.input;\r\n        // on space, if focus state is on any other item, treat as enter\r\n        if (event.keyCode === 32 && !targetIsInput) {\r\n            this.handleEnterKey(event);\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        // on backspace, if using empty input in multiple mode, delete last selected entry\r\n        let selectedLength = this.selected && this.selected.length;\r\n        if (\r\n            targetIsInput &&\r\n            this.multiple &&\r\n            selectedLength &&\r\n            event.keyCode === 8 &&\r\n            this.input.value === ''\r\n        ) {\r\n            let lastSelectedLabel = this.selected[selectedLength - 1].label;\r\n            let announcement = `${lastSelectedLabel} ${this.options.srDeletedText}`;\r\n            this.announce(announcement, 0);\r\n            this.selected.pop();\r\n            this.buildMultiSelected();\r\n            return;\r\n        }\r\n\r\n        // any printable character not on input, return focus to input\r\n        let focusInput = !targetIsInput && isPrintableKey(event.keyCode);\r\n        if (focusInput) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // trigger filtering - done here, instead of using input event, due to IE9 issues\r\n        if (focusInput || targetIsInput) {\r\n            this.filterPrep(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description component keydown handling\r\n     * @param {Event} event\r\n     */\r\n    prepKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 13: // on enter\r\n                this.handleEnterKey(event);\r\n                break;\r\n            case 27: // on escape\r\n                this.handleComponentBlur(event, true);\r\n                break;\r\n            case 38: // on up\r\n                this.handleUpArrowKey(event);\r\n                break;\r\n            case 40: // on down\r\n                this.handleDownArrowKey(event);\r\n                break;\r\n            default:\r\n                this.handleKeyDownDefault(event);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description bind component events to generated elements\r\n     */\r\n    bindEvents() {\r\n        // when focus is moved outside of the component, close everything\r\n        this.wrapper.addEventListener('focusout', event => {\r\n            this.handleComponentBlur(event, false);\r\n        });\r\n        // set wrapper focus state\r\n        this.wrapper.addEventListener('focusin', event => {\r\n            let toAdd = `${this.cssNameSpace}__wrapper--focused focused focus`;\r\n            addClass(this.wrapper, toAdd);\r\n            if (!this.list.contains(event.target)) {\r\n                this.currentSelectedIndex = -1;\r\n            }\r\n        });\r\n        // handle all keydown events inside the component\r\n        this.wrapper.addEventListener('keydown', event => {\r\n            this.prepKeyDown(event);\r\n        });\r\n        // if clicking directly on the wrapper, move focus to the input\r\n        this.wrapper.addEventListener('click', event => {\r\n            if (event.target === this.wrapper) {\r\n                this.input.focus();\r\n            }\r\n        });\r\n\r\n        // when blurring out of input, check current value against selected one and clear if needed\r\n        this.input.addEventListener('blur', () => {\r\n            let toRemove = `${this.cssNameSpace}__input--focused focused focus`;\r\n            removeClass(this.input, toRemove);\r\n        });\r\n        // trigger filter on input event as well as keydown (covering bases)\r\n        this.input.addEventListener('input', event => {\r\n            this.filterPrep(event);\r\n        });\r\n        // when specifically clicking on input, if menu is closed, and value is long enough, search\r\n        this.input.addEventListener('click', event => {\r\n            let open = this.menuOpen;\r\n            if (!open && this.input.value.length >= this.options.minLength) {\r\n                this.filterPrep(event, true);\r\n            }\r\n        });\r\n        // when focusing on input, reset selected index and trigger search handling\r\n        this.input.addEventListener('focusin', () => {\r\n            let toAdd = `${this.cssNameSpace}__input--focused focused focus`;\r\n            addClass(instance.input, toAdd);\r\n            if (!this.disabled && !this.menuOpen) {\r\n                instance.filterPrep(event, true);\r\n            }\r\n        });\r\n\r\n        // show all button click\r\n        if (this.showAll) {\r\n            this.showAll.addEventListener('click', event => {\r\n                this.filterPrepShowAll(event);\r\n            });\r\n        }\r\n\r\n        // clear any current focus position when hovering into the list\r\n        this.list.addEventListener('mouseenter', event => {\r\n            this.resetOptionAttributes();\r\n        });\r\n        // trigger options selection\r\n        this.list.addEventListener('click', event => {\r\n            if (event.target !== this.list) {\r\n                let childNodes = this.list.childNodes;\r\n                if (childNodes.length) {\r\n                    let nodeIndex = [].indexOf.call(childNodes, event.target);\r\n                    this.handleOptionSelect(event, nodeIndex);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on child checkboxes\r\n     */\r\n    prepListSourceCheckboxes() {\r\n        this.multiple = true; // force multiple in this case\r\n        // reset source and use checkboxes\r\n        this.source = [];\r\n        let elements = this.element.querySelectorAll('input[type=\"checkbox\"]');\r\n        for (let i = 0, l = elements.length; i < l; i += 1) {\r\n            let checkbox = elements[i];\r\n            // must have a value other than empty string\r\n            if (!checkbox.value) {\r\n                continue;\r\n            }\r\n            let toPush = { element: checkbox, value: checkbox.value };\r\n            // label searching\r\n            let label = checkbox.closest('label');\r\n            if (!label && checkbox.id) {\r\n                label = document.querySelector('[for=\"' + node.id + '\"]');\r\n            }\r\n            if (label) {\r\n                toPush.label = label.textContent;\r\n            }\r\n            // if no label so far, re-use value\r\n            if (!toPush.label) {\r\n                toPush.label = toPush.value;\r\n            }\r\n            toPush.cleanedLabel = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (node.checked) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on <select> options\r\n     */\r\n    prepListSourceDdl() {\r\n        this.multiple = this.element.multiple; // force multiple to match select\r\n        // reset source and use options\r\n        this.source = [];\r\n        let options = this.element.querySelectorAll('option');\r\n        for (let i = 0, l = options.length; i < l; i += 1) {\r\n            let option = options[i];\r\n            // must have a value other than empty string\r\n            if (!option.value) {\r\n                continue;\r\n            }\r\n            let toPush = {\r\n                element: option,\r\n                value: option.value,\r\n                label: option.textContent\r\n            };\r\n            toPush.cleanedLabel = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (node.selected) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust starting source array to format needed, and set selected\r\n     */\r\n    prepListSourceArray() {\r\n        this.source = processSourceArray(this.source);\r\n\r\n        // build up selected array if starting element was an input, and had a value\r\n        if (this.elementIsInput && this.element.value) {\r\n            let value = this.element.value;\r\n\r\n            // account for multiple mode\r\n            let multiple = this.options.multiple;\r\n            let separator = this.options.multipleSeparator;\r\n            let valueArr = multiple ? value.split(separator) : [value];\r\n\r\n            for (let i = 0, l = valueArr.length; i < l; i += 1) {\r\n                let val = valueArr[i];\r\n                let isQueryIn = this.isQueryContainedIn;\r\n                // make sure it is not already in the selected array\r\n                let isInSelected = isQueryIn(val, this.selected, 'value') > -1;\r\n\r\n                // but is in the source array (check via 'value', not 'label')\r\n                if (!isInSelected) {\r\n                    let indexInSource = isQueryIn(val, this.source, 'value');\r\n                    if (indexInSource > -1) {\r\n                        this.selected.push(this.source[indexInSource]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust set sources to needed format\r\n     */\r\n    prepListSource() {\r\n        this.async = false;\r\n\r\n        // allow complete control over the source handling via custom function\r\n        if (typeof this.source === 'function') {\r\n            return;\r\n        }\r\n\r\n        // string source - treat as async endpoint\r\n        if (typeof this.source === 'string' && this.source.length) {\r\n            return (this.async = true);\r\n        }\r\n\r\n        // array source - copy array\r\n        if (Array.isArray(this.source) && this.source.length) {\r\n            return this.prepListSourceArray();\r\n        }\r\n\r\n        // dropdown source\r\n        if (this.elementIsSelect) {\r\n            return this.prepListSourceDdl();\r\n        }\r\n\r\n        // checkboxlist source\r\n        if (this.element.querySelector('input[type=\"checkbox\"]')) {\r\n            this.prepListSourceCheckboxes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set input starting states - aria attributes, disabled state, starting value\r\n     */\r\n    setInputStartingStates() {\r\n        // update corresponding label to now focus on the new input\r\n        let label = document.querySelector('[for=\"' + this.ids.ELEMENT + '\"]');\r\n        if (label) {\r\n            label.ariaAutocompleteOriginalFor = this.ids.ELEMENT;\r\n            label.setAttribute('for', this.ids.INPUT);\r\n        }\r\n\r\n        // update aria-describedby and aria-labelledby attributes if present\r\n        let describedBy = this.element.getAttribute('aria-describedby');\r\n        if (describedBy) {\r\n            this.input.setAttribute('aria-describedby', describedBy);\r\n        }\r\n        let labelledBy = this.element.getAttribute('aria-labelledby');\r\n        if (labelledBy) {\r\n            this.input.setAttribute('aria-labelledby', labelledBy);\r\n        }\r\n\r\n        // if selected item(s) already exists\r\n        if (this.selected.length) {\r\n            // for multi select variant, set selected items\r\n            if (this.multiple) {\r\n                this.buildMultiSelected();\r\n            }\r\n            // for single select variant, set value to match\r\n            else {\r\n                this.input.value = this.selected[0].label || '';\r\n            }\r\n        }\r\n\r\n        // setup input description - done here in case value is affected above\r\n        this.setInputDescription();\r\n\r\n        // disable the control if the invoked element was disabled\r\n        if (!!this.element.disabled) {\r\n            this.disable();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description build and insert component html structure\r\n     */\r\n    setHtml() {\r\n        let o = this.options;\r\n        let cssName = this.cssNameSpace;\r\n        let explainerText = o.srExplanatoryText;\r\n        let listClass = o.listClassName ? ` ${o.listClassName}` : '';\r\n        let inputClass = o.inputClassName ? ` ${o.inputClassName}` : '';\r\n        let wrapperClass = o.wrapperClassName ? ` ${o.wrapperClassName}` : '';\r\n        let explainer = explainerText ? ` aria-label=\"${explainerText}\"` : '';\r\n\r\n        let newHtml = [\r\n            `<div id=\"${this.ids.WRAPPER}\" class=\"${cssName}__wrapper${wrapperClass}\">`\r\n        ];\r\n\r\n        // add input\r\n        newHtml.push(\r\n            `<input type=\"text\" autocomplete=\"off\" aria-expanded=\"false\" aria-autocomplete=\"list\" role=\"combobox\" id=\"${this.ids.INPUT}\" placeholder=\"${this.options.placeholder} aria-owns=\"${this.ids.LIST}\" aria-placeholder=\"${this.options.placeholder} class=\"${cssName}__input${inputClass}\" />`\r\n        );\r\n\r\n        // button to show all available options\r\n        if (this.options.showAll) {\r\n            newHtml.push(\r\n                `<span role=\"button\" aria-label=\"Show all\" class=\"${cssName}__show-all\" tabindex=\"0\" id=\"${this.ids.BUTTON}\" aria-expanded=\"false\"></span>`\r\n            );\r\n        }\r\n        // add the list holder\r\n        newHtml.push(\r\n            `<ul id=\"${this.ids.LIST}\" class=\"${cssName}__list${listClass}\" role=\"listbox\" hidden=\"hidden\"${explainer}></ul>`\r\n        );\r\n        // add the screen reader assistance element\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-assistance\" id=\"${this.ids.SR_ASSISTANCE}\">${this.options.srAssistiveText}</span>`\r\n        );\r\n        // add element for added screen reader announcements\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-announcements\" id=\"${this.ids.SR_ANNOUNCEMENTS}\" aria-live=\"polite\" aria-atomic=\"true\"></span>`\r\n        );\r\n\r\n        // close all and append\r\n        newHtml.push(`</div>`);\r\n        this.element.insertAdjacentHTML('afterend', newHtml.join(''));\r\n    }\r\n\r\n    /**\r\n     * @todo: refresh method for use after changing options, source, etc.\r\n     */\r\n    refresh() {\r\n        let options = mergeObjects(this.options); // store new object from existing options\r\n        /** @todo: soft destroy in this case */\r\n        this.destroy();\r\n        this.options = options;\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * @description destroy component\r\n     */\r\n    destroy() {\r\n        // return original label 'for' attribute back to element id\r\n        let label = document.querySelector('[for=\"' + this.ids.INPUT + '\"]');\r\n        if (label && label.ariaAutocompleteOriginalFor) {\r\n            label.setAttribute('for', label.ariaAutocompleteOriginalFor);\r\n            delete label.ariaAutocompleteOriginalFor;\r\n        }\r\n        // remove the whole wrapper and set all instance properties to null to clean up DOMNode references\r\n        this.element.parentNode.removeChild(this.wrapper);\r\n        for (let i in this) {\r\n            if (this.hasOwnProperty(i)) {\r\n                this[i] = null;\r\n            }\r\n        }\r\n        delete this.element.ariaAutocomplete;\r\n        // re-show original element\r\n        this.show(this.element);\r\n    }\r\n\r\n    /**\r\n     * @description do it!!\r\n     */\r\n    init() {\r\n        this.selected = [];\r\n\r\n        // set these internally so that the component has to be properly refreshed to change them\r\n        this.source = this.options.source;\r\n        this.multiple = this.options.multiple;\r\n        this.cssNameSpace = this.options.cssNameSpace;\r\n\r\n        // create html structure\r\n        this.setHtml();\r\n\r\n        // additional app variables\r\n        this.list = document.getElementById(this.ids.LIST);\r\n        this.input = document.getElementById(this.ids.INPUT);\r\n        this.wrapper = document.getElementById(this.ids.WRAPPER);\r\n        this.showAll = document.getElementById(this.ids.BUTTON);\r\n        this.srAnnouncements = document.getElementById(\r\n            this.ids.SR_ANNOUNCEMENTS\r\n        );\r\n\r\n        // hide element and list manually\r\n        this.hide(this.list); // pass in the list so that the onClose is not triggered\r\n        this.hide(this.element);\r\n\r\n        // set internal source array, from static elements if necessary\r\n        this.prepListSource();\r\n\r\n        // set starting states for input - must be after source has been defined\r\n        this.setInputStartingStates();\r\n\r\n        // bind all necessary events\r\n        this.bindEvents();\r\n\r\n        /** @todo: handling of initial value in async case - other cases handled in setInputStartingStates */\r\n\r\n        /** @todo: store api on original element */\r\n        this.element.ariaAutocomplete = {};\r\n\r\n        // fire onready callback\r\n        this.triggerOptionCallback('onReady');\r\n    }\r\n}\r\n\r\n/**\r\n * @description expose specific function rather than the AriaAutocomplete class\r\n * @param {Element} elem\r\n * @param {Object} options\r\n * @returns {Object}\r\n */\r\nexport default function(elem, options) {\r\n    let autocomplete = new AriaAutocomplete(elem, options);\r\n    return autocomplete.api;\r\n}\r\n"]}