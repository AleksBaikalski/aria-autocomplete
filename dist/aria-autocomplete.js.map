{"version":3,"sources":["closest-polyfill.js","autocomplete-helpers.js","autogrow.js","aria-autocomplete.js"],"names":["Element","prototype","matches","msMatchesSelector","webkitMatchesSelector","closest","s","el","parentElement","parentNode","nodeType","CLEANED_LABEL","SELECTED_OPTION","trimString","theString","trim","hasClass","element","className","e","cur","getAttribute","indexOf","addClass","classes","currentValue","current","finalValue","i","cs","split","l","length","setAttribute","removeClass","replace","REGEX_AMPERSAND","REGEX_DUPE_WHITESPACE","REGEX_TO_IGNORE","REGEX_MAKE_SAFE","cleanString","makeSafeForRegex","toLowerCase","isPrintableKey","keyCode","mergeObjects","n","o","p","hasOwnProperty","dispatchEvent","event","document","htmlEvents","createEvent","initEvent","fireEvent","setElementState","selected","instance","nodeName","checked","elementChangeEventTimer","clearTimeout","setTimeout","processSourceArray","sourceArray","mapping","setCleanedLabel","toReturn","mapValue","mapLabel","result","entry","value","label","toString","push","DIV","createElement","htmlToElement","html","innerHTML","firstChild","setCss","style","transferStyles","from","to","properties","fromStyles","getComputedStyle","styles","searchPropFor","prop","regexSafeQuery","name","search","Array","isArray","searchVarPropsFor","obj","props","query","makeQuerySafe","proceed","removeDuplicatesAndLabel","arr","str","j","testSpan","AutoGrow","input","currentString","eventHandler","currentWidth","init","checkAndSet","call","start","selectionStart","selectionEnd","selection","focus","createRange","selectionLength","text","moveStart","position","top","left","width","padding","whiteSpace","body","appendChild","textContent","offsetWidth","clientWidth","metaKey","altKey","type","keyCodeIsDelete","keyCodeIsBackspace","getInputSelection","substring","undefined","character","String","fromCharCode","shiftKey","toUpperCase","placeholder","measureString","removeEventListener","bind","addEventListener","appIndex","DEFAULT_OPTIONS","source","sourceMapping","alsoSearchIn","delay","minLength","maxResults","showAllControl","confirmOnBlur","multiple","autoGrow","maxItems","multipleSeparator","deleteOnBackspace","asyncQueryParam","asyncMaxResultsParam","noResultsText","cssNameSpace","listClassName","inputClassName","wrapperClassName","srDeleteText","srDeletedText","srShowAllText","srSelectedText","srListLabelText","srAssistiveText","srResultsText","onSearch","onAsyncPrep","onAsyncSuccess","onResponse","onItemRender","onConfirm","onDelete","onReady","onClose","onOpen","AriaAutocomplete","options","ariaAutocomplete","open","api","elementIsInput","elementIsSelect","list","wrapper","showAll","srAnnouncements","ids","xhr","term","async","menuOpen","disabled","filtering","forceShowAll","filteredSource","currentListHtml","inputPollingValue","currentSelectedIndex","documentClick","documentClickBound","filterTimer","pollingTimer","announcementTimer","componentBlurTimer","AutoGrowInput","args","context","apply","toRemove","removeAttribute","expanded","show","triggerOptionCallback","hide","trigger","setPollingValue","childNodes","a","isSelectedElem","index","option","splice","buildMultiSelected","announce","disable","enable","currentSelectedElems","getSelectedElems","isInSelected","removeChild","deleteText","fragment","createDocumentFragment","selectedClass","isInDom","span","insertBefore","nowSelectedElems","id","OPTION_SELECTED","LIST","join","toSet","exists","describedBy","SR_ASSISTANCE","cssName","nodes","resetOptionAttributes","target","setOptionFocus","toFocus","toAdd","valToSet","valToSetString","focusAfterSelection","alreadySelected","setInputValue","triggerAutoGrow","setSourceElementValues","results","resultsLoop","k","labelMatch","toShow","updated","removeSelectedFromResults","callback","optionId","OPTION","checkCallback","thisSource","callbackResponse","itemContent","noText","optionClass","cancelFilterPrep","newListHtml","isFirstCall","abort","XMLHttpRequest","encode","encodeURIComponent","isShowAll","unlimited","baseAmount","ampersandOrQuestionMark","test","url","onload","readyState","DONE","status","responseText","items","prepSelectedFromArray","setInputStartingStates","setListOptions","send","handleAsync","response","check","searchIn","concat","nameSpace","doValueOverrideCheck","runNow","setInputDescription","modifier","keydown","ctrlKey","equalVals","filter","showAllPrepTimer","preventDefault","filterPrep","force","activeElem","activeElement","contains","isQueryIn","indexOfQueryIn","toUse","handleOptionSelect","inputOrDdl","removeEntryFromSelected","filterPrepShowAll","usable","targetIsInput","handleEnterKey","selectedLength","printableKey","focusInput","handleComponentBlur","handleUpArrowKey","handleDownArrowKey","handleKeyDownDefault","startPolling","prepKeyDown","wrapperFocusClasses","inputFocusClasses","cancelPolling","nodeIndex","elements","querySelectorAll","checkbox","toPush","querySelector","separator","valueArr","val","isSelected","indexInSource","prepListSourceFunction","prepListSourceAsync","prepListSourceArray","prepListSourceDdl","prepListSourceCheckboxes","setAriaAttrs","ELEMENT","ariaAutocompleteOriginalFor","INPUT","labelledBy","wrapperClass","newHtml","WRAPPER","inputClass","BUTTON","explainerText","listClass","explainer","SR_ANNOUNCEMENTS","insertAdjacentHTML","close","destroy","PREFIX","setHtml","getElementById","prepListSource","generateApi","bindEvents","window","elem"],"mappings":"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","file":"aria-autocomplete.js","sourceRoot":"../src","sourcesContent":["if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\nif (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n        var el = this;\n        do { \n            if (el.matches(s)) { \n                return el; \n            } \n            el = el.parentElement || el.parentNode; \n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}","export const CLEANED_LABEL = '_ariaAutocompleteCleanedLabel';\nexport const SELECTED_OPTION = '_ariaAutocompleteSelectedOption';\n\n/**\n * @description trim string helper\n * @param {string} theString\n */\nexport function trimString(theString) {\n    return theString == null ? '' : (theString + '').trim();\n}\n\n/**\n * @description check if element has class - support pre `classList`\n * @param {Element} element - element to check class on\n * @param {String} className\n * @returns {Boolean}\n */\nexport function hasClass(element, className) {\n    const e = element;\n    const cur = trimString(e.getAttribute && e.getAttribute('class'));\n    return ` ${cur} `.indexOf(` ${className} `) > -1;\n}\n\n/**\n * @description add class(es) to element - support pre `classList`\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to add\n */\nexport function addClass(element, classes) {\n    const currentValue = trimString(\n        element.getAttribute && element.getAttribute('class')\n    );\n    const current = ' ' + currentValue + ' ';\n    let finalValue = '';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        if (cs[i] !== '' && current.indexOf(' ' + cs[i] + ' ') === -1) {\n            finalValue += ' ' + cs[i];\n        }\n    }\n    if (currentValue !== (finalValue = trimString(currentValue + finalValue))) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n/**\n * @description remove class(es) from element - support pre `classList`\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to remove\n */\nexport function removeClass(element, classes) {\n    const currentValue = trimString(\n        element.getAttribute && element.getAttribute('class')\n    );\n    let finalValue = ' ' + currentValue + ' ';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        finalValue = finalValue.replace(' ' + cs[i] + ' ', ' ');\n    }\n    if (currentValue !== (finalValue = trimString(finalValue))) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n// regex constants used for string cleaning\nconst REGEX_AMPERSAND = /&/g;\nconst REGEX_DUPE_WHITESPACE = /\\s\\s+/g;\nconst REGEX_TO_IGNORE = /[\\u2018\\u2019',:\\u2013-]/g;\nconst REGEX_MAKE_SAFE = /[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g;\n/**\n * @description clean string of some characters, and make safe for regex searching\n * @param {String} theString\n * @param {Boolean=} makeSafeForRegex\n * @returns {String}\n */\nexport function cleanString(theString, makeSafeForRegex = false) {\n    theString = trimString(theString)\n        .toLowerCase() // case insensitive\n        .replace(REGEX_TO_IGNORE, '') // ignore quotes, commas, colons, and hyphens\n        .replace(REGEX_AMPERSAND, 'and') // treat & and 'and' as the same\n        .replace(REGEX_DUPE_WHITESPACE, ' '); // ignore duplicate whitespace\n    // make safe for regex searching\n    if (makeSafeForRegex) {\n        theString = theString.replace(REGEX_MAKE_SAFE, '\\\\$&');\n    }\n    return theString;\n}\n\n/**\n * @description check if keycode is for a printable/width-affecting character\n * @param {Number} keyCode\n * @returns {Boolean}\n */\nexport function isPrintableKey(keyCode) {\n    return (\n        (keyCode >= 48 && keyCode <= 57) || // 0-9\n        (keyCode >= 65 && keyCode <= 90) || // a-z\n        (keyCode >= 96 && keyCode <= 111) || // numpad 0-9, numeric operators\n        (keyCode >= 186 && keyCode <= 222) || // semicolon, equal, comma, dash, etc.\n        keyCode === 32 || // space\n        keyCode === 8 || // backspace\n        keyCode === 46 // delete\n    );\n}\n\n/**\n * @description merge objects together to generate a new one\n * @param {Object} args - objects to merge together\n * @returns {Object}\n */\nexport function mergeObjects(...args) {\n    const n = {};\n    for (let i = 0, l = args.length; i < l; i += 1) {\n        const o = args[i];\n        for (let p in o) {\n            if (o.hasOwnProperty(p) && typeof o[p] !== 'undefined') {\n                n[p] = o[p];\n            }\n        }\n    }\n    return n;\n}\n\n/**\n * @description dispatch event helper\n * @param {Element} element\n * @param {String} event\n */\nexport function dispatchEvent(element, event) {\n    if ('createEvent' in document) {\n        const htmlEvents = document.createEvent('HTMLEvents');\n        htmlEvents.initEvent(event, true, true);\n        element.dispatchEvent(htmlEvents);\n    } else {\n        element.fireEvent('on' + event);\n    }\n}\n\n/**\n * @description set element option or checkbox to specified state and trigger change event\n * @param {Element} element\n * @param {Boolean} selected\n * @param {(AriaAutocomplete|Object)} instance\n */\nexport function setElementState(element, selected, instance) {\n    selected = !!selected;\n    if (element) {\n        // handle checkbox\n        if (\n            element.nodeName === 'INPUT' &&\n            typeof element.checked === 'boolean' &&\n            element.checked !== selected\n        ) {\n            element.checked = selected;\n            dispatchEvent(element, 'change');\n        }\n\n        // handle dropdown option\n        if (element.nodeName === 'OPTION' && element.selected !== selected) {\n            element.selected = selected;\n            // ensure change event only fires once for dropdown\n            if (instance.elementChangeEventTimer) {\n                clearTimeout(instance.elementChangeEventTimer);\n            }\n            instance.elementChangeEventTimer = setTimeout(function() {\n                dispatchEvent(element.closest('select'), 'change');\n            }, 1);\n        }\n    }\n}\n\n/**\n * @description process an array of strings or objects to ensure needed props exist\n * @param {(String|Object)[]} sourceArray\n * @param {Object=} mapping - value and label mapping used in object cases\n * @param {Boolean=} setCleanedLabel - defaults to true\n * @returns {Array}\n */\nexport function processSourceArray(sourceArray, mapping = {}, setCleanedLabel) {\n    const toReturn = [];\n    const mapValue = mapping['value'];\n    const mapLabel = mapping['label'];\n    for (let i = 0, l = sourceArray.length; i < l; i += 1) {\n        let result = {};\n        let entry = sourceArray[i];\n        // handle array of strings\n        if (typeof entry === 'string') {\n            result.value = result.label = entry;\n        }\n        // handle array of objects - ensure value and label exist, and maintain any other properties\n        else {\n            // generate new object to not modify original\n            result = mergeObjects(entry);\n            const value = result[mapValue] || result.value || result.label;\n            const label = result[mapLabel] || result.label || result.value;\n            result.value = (value || '').toString();\n            result.label = (label || '').toString();\n        }\n        // whether to set a cleaned label for static source filtering (in filter method)\n        if (setCleanedLabel !== false) {\n            result[CLEANED_LABEL] = cleanString(result.label);\n        }\n        toReturn.push(result);\n    }\n    return toReturn;\n}\n\nconst DIV = document.createElement('div');\n/**\n * @description convert HTML string into an element\n * @param {String} html\n * @returns {Element}\n */\nexport function htmlToElement(html) {\n    DIV.innerHTML = trimString(html);\n    return DIV.firstChild;\n}\n\n/**\n * @description set styles on an element\n * @param {Element} element\n * @param {Object} s\n */\nexport function setCss(element, s) {\n    if (!element) {\n        return;\n    }\n    for (let i in s) {\n        const style = typeof s[i] === 'number' ? s[i] + 'px' : s[i];\n        element.style[i] = style + ''; // force to be a string\n    }\n}\n\n/**\n * @description transfer styles from one Element to another\n * @param {Element} from\n * @param {Element} to\n * @param {Array=} properties\n */\nexport function transferStyles(from, to, properties) {\n    if (!from || !to) {\n        return;\n    }\n    const fromStyles = getComputedStyle(from);\n    let styles = {};\n\n    if (properties && properties.length) {\n        for (let i = 0, l = properties.length; i < l; i += 1) {\n            styles[properties[i]] = fromStyles[properties[i]];\n        }\n    } else {\n        styles = fromStyles;\n    }\n\n    setCss(to, styles);\n}\n\n/**\n * @description search String or Array for another string - partial match\n * @param {String|Array} prop\n * @param {String} regexSafeQuery\n * @param {String=} name\n */\nconst searchPropFor = (prop, regexSafeQuery, name) => {\n    if (typeof prop === 'string') {\n        if (name !== CLEANED_LABEL) {\n            prop = cleanString(prop, false);\n        }\n        return prop.search(regexSafeQuery) !== -1;\n    } else if (Array.isArray(prop)) {\n        for (let i = 0, l = prop.length; i < l; i += 1) {\n            if (searchPropFor(prop[i], regexSafeQuery)) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n/**\n * @description check through object's String or String[] properties for query match\n * @param {Object} obj\n * @param {String[]} props\n * @param {String} query\n * @param {Boolean=} makeQuerySafe\n * @returns {Boolean}\n */\nexport function searchVarPropsFor(obj, props, query, makeQuerySafe = false) {\n    if (makeQuerySafe) {\n        query = cleanString(query, true);\n    }\n\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            let proceed = false;\n            // check if obj property is a string, and if property name is in props Array\n            if (typeof obj[i] === 'string') {\n                // use while loop instead of indexOf for performance in older browsers\n                let l = props.length;\n                while (l--) {\n                    if (props[l] === i) {\n                        proceed = true;\n                        break;\n                    }\n                }\n            } else {\n                // if not a string, only allow Arrays otherwise\n                proceed = Array.isArray(obj[i]);\n            }\n            if (proceed && searchPropFor(obj[i], query, i)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * @description remove duplicate array entries, and `label`\n * @param {Array} arr\n * @returns {String[]}\n */\nexport function removeDuplicatesAndLabel(arr) {\n    // remove `label` (we will be using CLEANED_LABEL) and duplicates from props array\n    const result = [];\n    for (let i = 0, l = arr.length; i < l; i += 1) {\n        if (typeof arr[i] !== 'string') {\n            continue;\n        }\n        const str = trimString(arr[i]);\n        let proceed = str !== 'label';\n        let j = result.length;\n        while (proceed && j--) {\n            if (result[j] === str) {\n                proceed = false;\n            }\n        }\n        if (proceed) {\n            result.push(str);\n        }\n    }\n    return result;\n}\n","import { isPrintableKey, setCss, transferStyles } from './autocomplete-helpers';\r\n\r\n/**\r\n * @description storage for element used to detect value width\r\n */\r\nlet testSpan;\r\n\r\n/**\r\n * @description set an input element to autogrow based on its value\r\n * @param {Element} input\r\n */\r\nexport default class AutoGrow {\r\n    constructor(input) {\r\n        this.input = input;\r\n        this.currentString;\r\n        this.eventHandler;\r\n        this.currentWidth;\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * @description trigger an autogrow check\r\n     */\r\n    trigger() {\r\n        this.checkAndSet.call(this);\r\n    }\r\n\r\n    /**\r\n     * @description get current user selection from within the input\r\n     */\r\n    getInputSelection() {\r\n        const result = {};\r\n        if ('selectionStart' in this.input) {\r\n            result.start = this.input.selectionStart;\r\n            result.length = this.input.selectionEnd - result.start;\r\n        } else if (document.selection) {\r\n            this.input.focus();\r\n            const selection = document.selection.createRange();\r\n            const selectionLength = selection.text.length;\r\n            selection.moveStart('character', -this.input.value.length);\r\n            result.start = selection.text.length - selectionLength;\r\n            result.length = selectionLength;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @description measure the pixel width of a string in an input\r\n     * @param {String} str\r\n     * @returns {Number}\r\n     */\r\n    measureString(str) {\r\n        if (!str) {\r\n            this.currentString = str;\r\n            return 0;\r\n        }\r\n\r\n        // check for matching string\r\n        // risky, as styles could change between checks, but better for performance\r\n        if (str === this.currentString) {\r\n            return this.currentWidth;\r\n        }\r\n\r\n        if (!testSpan) {\r\n            testSpan = document.createElement('span');\r\n            setCss(testSpan, {\r\n                position: 'absolute',\r\n                top: -99999,\r\n                left: -99999,\r\n                width: 'auto',\r\n                padding: 0,\r\n                whiteSpace: 'pre'\r\n            });\r\n            document.body.appendChild(testSpan);\r\n        }\r\n\r\n        testSpan.textContent = str;\r\n        this.currentString = str;\r\n\r\n        transferStyles(this.input, testSpan, [\r\n            'letterSpacing',\r\n            'fontSize',\r\n            'fontFamily',\r\n            'fontWeight',\r\n            'textTransform'\r\n        ]);\r\n\r\n        return testSpan.offsetWidth || testSpan.clientWidth;\r\n    }\r\n\r\n    /**\r\n     * @description check the current input value and set width\r\n     * @param {Event} event\r\n     */\r\n    checkAndSet(event = {}) {\r\n        if (event.metaKey || event.altKey) {\r\n            return;\r\n        }\r\n\r\n        let value = this.input.value;\r\n        if (event.type && event.type.toLowerCase() === 'keydown') {\r\n            const keyCode = event.keyCode;\r\n            const keyCodeIsDelete = keyCode === 46;\r\n            const keyCodeIsBackspace = keyCode === 8;\r\n\r\n            // delete or backspace\r\n            if (keyCodeIsDelete || keyCodeIsBackspace) {\r\n                const selection = this.getInputSelection();\r\n                if (selection.length) {\r\n                    value =\r\n                        value.substring(0, selection.start) +\r\n                        value.substring(selection.start + selection.length);\r\n                } else if (keyCodeIsBackspace && selection.start) {\r\n                    value =\r\n                        value.substring(0, selection.start - 1) +\r\n                        value.substring(selection.start + 1);\r\n                } else if (keyCodeIsDelete && selection.start !== undefined) {\r\n                    value =\r\n                        value.substring(0, selection.start) +\r\n                        value.substring(selection.start + 1);\r\n                }\r\n            }\r\n\r\n            // any other width affecting character\r\n            else if (isPrintableKey(keyCode)) {\r\n                let character = String.fromCharCode(keyCode);\r\n                if (event.shiftKey) {\r\n                    character = character.toUpperCase();\r\n                } else {\r\n                    character = character.toLowerCase();\r\n                }\r\n                value += character;\r\n            }\r\n        }\r\n\r\n        let placeholder;\r\n        if (!value && (placeholder = this.input.getAttribute('placeholder'))) {\r\n            value = placeholder;\r\n        }\r\n\r\n        const width = this.measureString(value) + 4;\r\n        if (width !== this.currentWidth) {\r\n            this.currentWidth = width;\r\n            this.input.style.width = `${width}px`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description destroy the autogrow behaviour\r\n     */\r\n    destroy() {\r\n        this.input.removeEventListener('blur', this.eventHandler);\r\n        this.input.removeEventListener('input', this.eventHandler);\r\n        this.input.removeEventListener('keyup', this.eventHandler);\r\n        this.input.removeEventListener('keydown', this.eventHandler);\r\n        this.input = null;\r\n    }\r\n\r\n    /**\r\n     * @description initialise the autogrow behaviour and bind events\r\n     */\r\n    init() {\r\n        this.checkAndSet();\r\n        this.eventHandler = this.checkAndSet.bind(this);\r\n        this.input.addEventListener('blur', this.eventHandler);\r\n        this.input.addEventListener('input', this.eventHandler);\r\n        this.input.addEventListener('keyup', this.eventHandler);\r\n        this.input.addEventListener('keydown', this.eventHandler);\r\n    }\r\n}\r\n","import './closest-polyfill';\r\nimport AutoGrow from './autogrow';\r\nimport {\r\n    CLEANED_LABEL,\r\n    SELECTED_OPTION,\r\n    trimString,\r\n    hasClass,\r\n    addClass,\r\n    removeClass,\r\n    cleanString,\r\n    isPrintableKey,\r\n    mergeObjects,\r\n    dispatchEvent,\r\n    setElementState,\r\n    processSourceArray,\r\n    htmlToElement,\r\n    searchVarPropsFor,\r\n    removeDuplicatesAndLabel\r\n} from './autocomplete-helpers';\r\n\r\nlet appIndex = 0;\r\n\r\nconst DEFAULT_OPTIONS = {\r\n    /**\r\n     * @description Give the autocomplete a name to be included in form submissions\r\n     * (Instead of using this option, I would advise initialising the autocomplete on\r\n     * an existing input that will be submitted, to also use any existing validation;\r\n     * this approach is also compatible with the control in multiple mode)\r\n     */\r\n    name: '',\r\n    /**\r\n     * @type {String | String[] | Object[] | Function}\r\n     * @description Specify source. See examples file for more specific usage.\r\n     * @example ['Afghanistan', 'Albania', 'Algeria', ...more]\r\n     * @example (query, render) => render(arrayToUse)\r\n     */\r\n    source: '',\r\n    /**\r\n     * @description Properties to use for label and value\r\n     * when source is an Array of Objects\r\n     */\r\n    sourceMapping: {},\r\n    /**\r\n     * @type {String[]}\r\n     * @description Additional properties to use when searching for a match.\r\n     * `label` will always be used\r\n     */\r\n    alsoSearchIn: [],\r\n\r\n    /**\r\n     * @description Input delay after typing before running a search\r\n     */\r\n    delay: 100,\r\n    /**\r\n     * @description Minimum number of characters to run a search (includes spaces)\r\n     */\r\n    minLength: 1,\r\n    /**\r\n     * @description Maximum number of results to render. Also used with async endpoint\r\n     */\r\n    maxResults: 9999,\r\n    /**\r\n     * @description Render a control that triggers showing all options.\r\n     * Runs a search with an empty query: '', and maxResults of 9999\r\n     */\r\n    showAllControl: false,\r\n    /**\r\n     * Confirm currently active selection when blurring off of the control. If\r\n     * no active selection, will compare current input value against available labels\r\n     */\r\n    confirmOnBlur: true,\r\n\r\n    /**\r\n     * @description Allow multiple items to be selected\r\n     */\r\n    multiple: false,\r\n    /**\r\n     * @description Adjust input width to match its value.\r\n     * Experimental, and a performance hit\r\n     */\r\n    autoGrow: false,\r\n    /**\r\n     * @description Maximum number of items that can be selected\r\n     */\r\n    maxItems: 9999,\r\n    /**\r\n     * @description If initialised element is an input, and in multiple mode,\r\n     * character that separates the selected values e.g. \"GLP,ZWE\"\r\n     */\r\n    multipleSeparator: ',',\r\n    /**\r\n     * @description If input is empty and in multiple mode,\r\n     * delete last selected item on backspace\r\n     */\r\n    deleteOnBackspace: false,\r\n\r\n    /**\r\n     * @description In async mode, parameter to use when adding the input value\r\n     * to the endpoint String. e.g. https://some-endpoint?q=norway&limit=9999\r\n     */\r\n    asyncQueryParam: 'q',\r\n    /**\r\n     * @description In async mode, parameter to use when adding results limit\r\n     * to the endpoint String. e.g. https://some-endpoint?q=norway&limit=9999\r\n     */\r\n    asyncMaxResultsParam: 'limit',\r\n\r\n    /**\r\n     * @description Placeholder text to show in generated input\r\n     */\r\n    placeholder: '',\r\n    /**\r\n     * @description Text to show (and announce to screen readers) if no results found.\r\n     * If empty, the list of options will remain hidden when there are no results\r\n     */\r\n    noResultsText: 'No results',\r\n    /**\r\n     * @description String to prepend to classes for BEM naming\r\n     * e.g. aria-autocomplete__input\r\n     */\r\n    cssNameSpace: 'aria-autocomplete',\r\n    /**\r\n     * @description Custom class name to add to the options list holder\r\n     */\r\n    listClassName: '',\r\n    /**\r\n     * @description Custom class name to add to the generated input\r\n     */\r\n    inputClassName: '',\r\n    /**\r\n     * @description Custom class name to add to the component wrapper\r\n     */\r\n    wrapperClassName: '',\r\n\r\n    /**\r\n     * @description In multiple mode, screen reader text used for element deletion.\r\n     * Prepended to option label in aria-label attribute e.g. 'delete Canada'\r\n     */\r\n    srDeleteText: 'delete',\r\n    /**\r\n     * @description Screen reader text announced after deletion.\r\n     * Apended to option label e.g. 'Canada deleted'\r\n     */\r\n    srDeletedText: 'deleted',\r\n    /**\r\n     * @description Value for aria-label attribute on the show all control\r\n     */\r\n    srShowAllText: 'Show all',\r\n    /**\r\n     * @description Screen reader text announced after confirming a selection.\r\n     * Appended to option label e.g. 'Canada selected'\r\n     */\r\n    srSelectedText: 'selected',\r\n    /**\r\n     * @description Screen reader explainer added to the list element\r\n     * via aria-label attribute\r\n     */\r\n    srListLabelText: 'Search suggestions',\r\n    /**\r\n     * @description Screen reader description announced when the input receives focus.\r\n     * Only announced when input is empty\r\n     */\r\n    srAssistiveText:\r\n        'When results are available use up and down arrows to review and ' +\r\n        'enter to select. Touch device users, explore by touch or with swipe gestures.',\r\n    /**\r\n     * @description Screen reader announcement after results are rendered\r\n     */\r\n    srResultsText: length =>\r\n        `${length} ${length === 1 ? 'result' : 'results'} available.`,\r\n\r\n    /**\r\n     * @description Callback before a search is performed - receives the input value.\r\n     * Can be used to alter the search value by returning a String\r\n     */\r\n    onSearch: undefined,\r\n    /**\r\n     * @description Callback before async call is made - receives the URL.\r\n     * Can be used to format the endpoint URL by returning a String\r\n     */\r\n    onAsyncPrep: undefined,\r\n    /**\r\n     * @description Callback after async call completes - receives the xhr object.\r\n     * Can be used to format the results by returning an Array\r\n     */\r\n    onAsyncSuccess: undefined,\r\n    /**\r\n     * @description Callback prior to rendering - receives the options that are going\r\n     * to render. Can be used to format the results by returning an Array\r\n     */\r\n    onResponse: undefined,\r\n    /**\r\n     * @description Callback when rendering items in the list.\r\n     * Can be used to format the <li> content by returning a String\r\n     */\r\n    onItemRender: undefined,\r\n    /**\r\n     * @description Callback after selection is made -\r\n     * receives an object with the option details\r\n     */\r\n    onConfirm: undefined,\r\n    /**\r\n     * @description Callback after an autocomplete selection is deleted.\r\n     * Fires in single-select mode when selection is deleted automatically.\r\n     * Fires in multi-select mode when selected is deleted by user action\r\n     */\r\n    onDelete: undefined,\r\n    /**\r\n     * @description Callback when main script processing and initial rendering has finished\r\n     */\r\n    onReady: undefined,\r\n    /**\r\n     * @description Callback when list area closes - receives the list holder element\r\n     */\r\n    onClose: undefined,\r\n    /**\r\n     * @description Callback when list area opens - receives the list holder element\r\n     */\r\n    onOpen: undefined\r\n};\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {Object=} options\r\n */\r\nclass AriaAutocomplete {\r\n    constructor(element, options) {\r\n        // fail silently if no list provided\r\n        if (!element) {\r\n            return;\r\n        }\r\n\r\n        // if instance already exists on the list element, do not re-initialise\r\n        if (element.ariaAutocomplete && element.ariaAutocomplete.open) {\r\n            return { api: element.ariaAutocomplete };\r\n        }\r\n\r\n        // vars defined later - related explicitly to core initialising params\r\n        this.options;\r\n        this.element;\r\n        this.elementIsInput;\r\n        this.elementIsSelect;\r\n\r\n        // vars defined later - elements\r\n        this.list;\r\n        this.input;\r\n        this.wrapper;\r\n        this.showAll;\r\n        this.srAnnouncements;\r\n\r\n        // vars defined later - non elements\r\n        this.ids;\r\n        this.xhr;\r\n        this.term;\r\n        this.async;\r\n        this.source;\r\n        this.menuOpen;\r\n        this.multiple;\r\n        this.selected;\r\n        this.disabled;\r\n        this.autoGrow;\r\n        this.filtering;\r\n        this.cssNameSpace;\r\n        this.forceShowAll;\r\n        this.filteredSource; // filtered source items to render\r\n        this.currentListHtml;\r\n        this.inputPollingValue;\r\n        this.currentSelectedIndex; // for storing index of currently focused option\r\n\r\n        // document click\r\n        this.documentClick;\r\n        this.documentClickBound;\r\n\r\n        // timers\r\n        this.filterTimer;\r\n        this.pollingTimer;\r\n        this.announcementTimer;\r\n        this.componentBlurTimer;\r\n        this.elementChangeEventTimer;\r\n\r\n        // storage for autoGrow class\r\n        this.AutoGrowInput;\r\n\r\n        // get going!\r\n        this.init(element, options);\r\n    }\r\n\r\n    /**\r\n     * trigger callbacks included in component options\r\n     * @param {String} name\r\n     * @param {Array=} args\r\n     * @param {Any=} context\r\n     */\r\n    triggerOptionCallback(name, args, context) {\r\n        context = typeof context === 'undefined' ? this.api : context;\r\n        if (typeof this.options[name] === 'function') {\r\n            return this.options[name].apply(context, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description show element with CSS only - if none provided, set list state to visible\r\n     * @param {Element=} element\r\n     */\r\n    show(element) {\r\n        if (typeof element !== 'undefined') {\r\n            const toRemove = `${this.cssNameSpace}--hide hide hidden`;\r\n            removeClass(element, toRemove);\r\n            return element.removeAttribute('hidden');\r\n        }\r\n\r\n        this.input.setAttribute('aria-expanded', 'true');\r\n        if (this.showAll) {\r\n            const expanded = (!!this.forceShowAll).toString();\r\n            this.showAll.setAttribute('aria-expanded', expanded);\r\n        }\r\n        if (!this.menuOpen) {\r\n            this.show(this.list);\r\n            this.menuOpen = true;\r\n            this.triggerOptionCallback('onOpen', [this.list]);\r\n            if (!this.documentClickBound) {\r\n                this.documentClickBound = true;\r\n                document.addEventListener('click', this.documentClick);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @description hide element with CSS only - if none provided, set list state to hidden\r\n     * @param {Element=} element\r\n     */\r\n    hide(element) {\r\n        if (typeof element !== 'undefined') {\r\n            addClass(element, `${this.cssNameSpace}--hide hide hidden`);\r\n            return element.setAttribute('hidden', 'hidden');\r\n        }\r\n\r\n        this.currentSelectedIndex = -1;\r\n        this.input.setAttribute('aria-expanded', 'false');\r\n        if (this.showAll) {\r\n            this.showAll.setAttribute('aria-expanded', 'false');\r\n        }\r\n        if (this.menuOpen) {\r\n            this.hide(this.list);\r\n            this.menuOpen = false;\r\n            this.triggerOptionCallback('onClose', [this.list]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description enable autocomplete (e.g. when under maxItems selected)\r\n     */\r\n    enable() {\r\n        if (this.disabled) {\r\n            this.disabled = false;\r\n            this.input.disabled = false;\r\n            const n = this.cssNameSpace;\r\n            removeClass(this.input, `${n}__input--disabled disabled`);\r\n            removeClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '0');\r\n                removeClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description disable autocomplete (e.g. when maxItems selected)\r\n     */\r\n    disable() {\r\n        if (!this.disabled) {\r\n            this.disabled = true;\r\n            this.input.disabled = true;\r\n            const n = this.cssNameSpace;\r\n            addClass(this.input, `${n}__input--disabled disabled`);\r\n            addClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '-1');\r\n                addClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description trigger input resizing if autogrow is enabled\r\n     */\r\n    triggerAutoGrow() {\r\n        if (this.autoGrow && this.AutoGrowInput) {\r\n            this.AutoGrowInput.trigger();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set input value to specific string, and related component vars\r\n     * @param {String} value\r\n     * @param {Boolean=} setPollingValue\r\n     */\r\n    setInputValue(value, setPollingValue = false) {\r\n        this.input.value = this.term = value;\r\n        if (setPollingValue) {\r\n            this.inputPollingValue = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description check if current input value is contained in a selection of options\r\n     * @param {Array} options - array of objects with value and label properties\r\n     * @param {String=} query - string to use - checks input value otherwise\r\n     * @param {String=} prop - prop to check against in options array - defaults to 'label'\r\n     * @returns {Number} index of array entry that matches, or -1 if none found\r\n     */\r\n    indexOfQueryIn(options, query = this.input.value, prop) {\r\n        query = trimString(query).toLowerCase();\r\n        if (query) {\r\n            prop = prop || 'label';\r\n            for (let i = 0, l = options.length; i < l; i += 1) {\r\n                if (trimString(options[i][prop]).toLowerCase() === query) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * @description make a screen reader announcement\r\n     * @param {String} text\r\n     * @param {Number=} delay\r\n     */\r\n    announce(text, delay) {\r\n        if (!text || !this.srAnnouncements) {\r\n            return;\r\n        }\r\n        // in immediate case, do not user timer\r\n        if (delay === 0) {\r\n            return (this.srAnnouncements.textContent = text);\r\n        }\r\n        delay = typeof delay === 'number' ? delay : 400;\r\n        if (this.announcementTimer) {\r\n            clearTimeout(this.announcementTimer);\r\n        }\r\n        this.announcementTimer = setTimeout(() => {\r\n            this.srAnnouncements.textContent = text;\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description check if element is a selected element in the DOM\r\n     * @param {Element} element\r\n     * @returns {Boolean}\r\n     */\r\n    isSelectedElem(element) {\r\n        return (\r\n            this.multiple &&\r\n            element[SELECTED_OPTION] &&\r\n            hasClass(element, `${this.cssNameSpace}__selected`)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @description get DOM elements for selected items\r\n     * @returns {Element[]}\r\n     */\r\n    getSelectedElems() {\r\n        const n = this.wrapper.childNodes;\r\n        const a = [];\r\n        for (let i = 0, l = n.length; i < l; i += 1) {\r\n            if (this.isSelectedElem(n[i])) {\r\n                a.push(n[i]);\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @description remove object from selected\r\n     * @param {Object} entry\r\n     */\r\n    removeEntryFromSelected(entry) {\r\n        let index = this.selected.indexOf(entry);\r\n        if (index === -1) {\r\n            // value check, in case explicit object reference did not work\r\n            for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n                if (this.selected[i].value === entry.value) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // set element state, dispatch change event, set selected array,\r\n        // trigger callback, build selected, and do screen reader announcement\r\n        if (index > -1 && this.selected[index]) {\r\n            const option = mergeObjects(this.selected[index]);\r\n            const label = option.label;\r\n            setElementState(option.element, false, this);\r\n            this.selected.splice(index, 1);\r\n            this.triggerOptionCallback('onDelete', [option]);\r\n            this.buildMultiSelected();\r\n            this.announce(`${label} ${this.options.srDeletedText}`, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description re-build the html showing the selected items\r\n     * note: there are a lot of loops here - could affect performance\r\n     */\r\n    buildMultiSelected() {\r\n        // only do anything in multiple mode\r\n        if (!this.multiple) {\r\n            return;\r\n        }\r\n\r\n        // disable or enable as needed\r\n        if (this.multiple && this.selected.length >= this.options.maxItems) {\r\n            this.disable();\r\n        } else {\r\n            this.enable();\r\n        }\r\n\r\n        // no elements, and none selected, do nothing\r\n        const currentSelectedElems = this.getSelectedElems();\r\n        if (!this.selected.length && !currentSelectedElems.length) {\r\n            return;\r\n        }\r\n\r\n        // cycle through existing elements, and remove any not in the selected array\r\n        const current = [];\r\n        let i = currentSelectedElems.length;\r\n        while (i--) {\r\n            let option = currentSelectedElems[i][SELECTED_OPTION];\r\n            let l = this.selected.length;\r\n            let isInSelected = false;\r\n            while (l--) {\r\n                let selected = this.selected[l];\r\n                if (selected === option || selected.value === option.value) {\r\n                    isInSelected = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (isInSelected) {\r\n                current.push(currentSelectedElems[i]);\r\n            } else {\r\n                this.wrapper.removeChild(currentSelectedElems[i]);\r\n            }\r\n        }\r\n\r\n        // cycle through selected array, and add elements for any not represented by one\r\n        const deleteText = this.options.srDeleteText;\r\n        const fragment = document.createDocumentFragment();\r\n        const selectedClass = `${this.cssNameSpace}__selected`;\r\n        for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n            const selected = this.selected[i];\r\n            let l = current.length;\r\n            let isInDom = false;\r\n            while (l--) {\r\n                let option = current[l][SELECTED_OPTION];\r\n                if (option === selected || option.value === selected.value) {\r\n                    isInDom = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!isInDom) {\r\n                const label = selected.label;\r\n                const span = htmlToElement(\r\n                    `<span role=\"button\" class=\"${selectedClass}\" ` +\r\n                        `tabindex=\"0\" aria-label=\"${deleteText} ${label}\">` +\r\n                        `${label}</span>`\r\n                );\r\n                span[SELECTED_OPTION] = selected;\r\n                fragment.appendChild(span);\r\n            }\r\n        }\r\n        if (fragment.childNodes && fragment.childNodes.length) {\r\n            this.wrapper.insertBefore(fragment, this.list);\r\n        }\r\n\r\n        // set ids on elements\r\n        const ids = [];\r\n        // get selected elements again, as some may have been added or removed\r\n        const nowSelectedElems = this.getSelectedElems();\r\n        for (let i = 0, l = nowSelectedElems.length; i < l; i += 1) {\r\n            const id = `${this.ids.OPTION_SELECTED}-${i}`;\r\n            nowSelectedElems[i].setAttribute('id', id);\r\n            ids.push(id);\r\n        }\r\n        ids.push(this.ids.LIST);\r\n\r\n        // set input aria-owns\r\n        this.input.setAttribute('aria-owns', ids.join(' '));\r\n\r\n        // in autogrow mode, hide the placeholder if there are selected items\r\n        if (this.autoGrow && this.options.placeholder) {\r\n            const toSet = this.selected.length ? '' : this.options.placeholder;\r\n            this.input.setAttribute('placeholder', toSet);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set the aria-describedby attribute on the input\r\n     */\r\n    setInputDescription() {\r\n        const exists = this.input.getAttribute('aria-describedby');\r\n        const current = trimString(exists || '');\r\n        let describedBy = current.replace(this.ids.SR_ASSISTANCE, '');\r\n\r\n        if (this.input.value.length === 0) {\r\n            describedBy = describedBy + ' ' + this.ids.SR_ASSISTANCE;\r\n        }\r\n\r\n        // set or remove attribute, but only if necessary\r\n        if ((describedBy = trimString(describedBy))) {\r\n            if (describedBy !== current) {\r\n                this.input.setAttribute('aria-describedby', describedBy);\r\n            }\r\n        } else if (exists) {\r\n            this.input.removeAttribute('aria-describedby');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description reset classes and aria-selected attribute for all visible filtered options\r\n     */\r\n    resetOptionAttributes() {\r\n        const cssName = this.cssNameSpace;\r\n        const nodes = this.list.childNodes;\r\n        let l = nodes.length;\r\n        while (l--) {\r\n            removeClass(nodes[l], `${cssName}__option--focused focused focus`);\r\n            nodes[l].setAttribute('aria-selected', 'false');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description move focus to correct option, or to input (on up and down arrows)\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     */\r\n    setOptionFocus(event, index) {\r\n        // set aria-selected to false and remove focused class\r\n        this.resetOptionAttributes();\r\n\r\n        // if negative index, or no options available, focus on input\r\n        const options = this.list.childNodes;\r\n        if (index < 0 || !options || !options.length) {\r\n            this.currentSelectedIndex = -1;\r\n            // focus on input, only if event was from another element\r\n            if (event && event.target !== this.input) {\r\n                this.input.focus();\r\n            }\r\n            return;\r\n        }\r\n\r\n        // down arrow on/past last option, focus on last item\r\n        if (index >= options.length) {\r\n            this.currentSelectedIndex = options.length - 1;\r\n            this.setOptionFocus(event, this.currentSelectedIndex);\r\n            return;\r\n        }\r\n\r\n        // if option found, focus...\r\n        const toFocus = options[index];\r\n        if (toFocus && typeof toFocus.getAttribute('tabindex') === 'string') {\r\n            this.currentSelectedIndex = index;\r\n            const toAdd = `${this.cssNameSpace}__option--focused focused focus`;\r\n            addClass(toFocus, toAdd);\r\n            toFocus.setAttribute('aria-selected', 'true');\r\n            toFocus.focus();\r\n            return;\r\n        }\r\n\r\n        // reset index just in case\r\n        this.currentSelectedIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * @description set values and dispatch events based on any DOM elements in the selected array\r\n     */\r\n    setSourceElementValues() {\r\n        const valToSet = [];\r\n        for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n            const entry = this.selected[i];\r\n            valToSet.push(entry.value);\r\n            setElementState(entry.element, true, this); // element processing\r\n        }\r\n\r\n        // set original input value\r\n        if (this.elementIsInput) {\r\n            const valToSetString = valToSet.join(\r\n                this.options.multipleSeparator\r\n            );\r\n            if (valToSetString !== this.element.value) {\r\n                this.element.value = valToSetString;\r\n                dispatchEvent(this.element, 'change');\r\n            }\r\n        }\r\n\r\n        // included in case of multi-select mode used with a <select> element as the source\r\n        if (!this.selected.length && this.elementIsSelect) {\r\n            this.element.value = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description select option from the list by index\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     * @param {Boolean=} focusAfterSelection\r\n     */\r\n    handleOptionSelect(event, index, focusAfterSelection = true) {\r\n        // defensive check for proper index, that the filteredSource exists, and not exceed max items option\r\n        if (\r\n            typeof index !== 'number' ||\r\n            index < 0 ||\r\n            (this.multiple && this.selected.length >= this.options.maxItems) ||\r\n            !this.filteredSource.length ||\r\n            !this.filteredSource[index]\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // generate new object from the selected item in case the original source gets altered\r\n        const option = mergeObjects(this.filteredSource[index]);\r\n        // detect if selected option is already in selected array\r\n        let l = this.selected.length;\r\n        let alreadySelected = false;\r\n        while (l--) {\r\n            if (this.selected[l].value === option.value) {\r\n                alreadySelected = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.setInputValue(this.multiple ? '' : option.label, true);\r\n        this.triggerAutoGrow();\r\n\r\n        // reset selected array in single select mode\r\n        if (!alreadySelected && !this.multiple) {\r\n            this.selected = [];\r\n        }\r\n\r\n        // (re)set values of any DOM elements based on selected array\r\n        if (!alreadySelected) {\r\n            this.selected.push(option);\r\n            this.setSourceElementValues();\r\n            this.buildMultiSelected(); // rebuild multi-selected if needed\r\n        }\r\n\r\n        this.triggerOptionCallback('onConfirm', [option]);\r\n        this.announce(`${option.label} ${this.options.srSelectedText}`, 0);\r\n\r\n        // return focus to input\r\n        if (!this.disabled && focusAfterSelection !== false) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // close menu after option selection, and after returning focus to input\r\n        this.hide();\r\n    }\r\n\r\n    /**\r\n     * @description remove selected entries from results if in multiple mode\r\n     * @param {Array} results\r\n     * @returns {Array}\r\n     */\r\n    removeSelectedFromResults(results) {\r\n        if (!this.multiple || !this.selected.length) {\r\n            return results;\r\n        }\r\n        const toReturn = [];\r\n        resultsLoop: for (let i = 0, l = results.length; i < l; i += 1) {\r\n            const selected = this.selected;\r\n            const result = results[i];\r\n            for (let j = 0, k = selected.length; j < k; j += 1) {\r\n                let labelMatch = result.label === selected[j].label;\r\n                if (labelMatch && result.value === selected[j].value) {\r\n                    continue resultsLoop;\r\n                }\r\n            }\r\n            toReturn.push(result);\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * @description final filtering and render for list options, and render\r\n     * @param {Array} results\r\n     */\r\n    setListOptions(results) {\r\n        const toShow = [];\r\n\r\n        // now commit to setting the filtered source\r\n        const mapping = this.options.sourceMapping;\r\n        // if in multiple mode, exclude items already in the selected array\r\n        const updated = this.removeSelectedFromResults(results);\r\n        // allow callback to alter the response before rendering\r\n        const callback = this.triggerOptionCallback('onResponse', updated);\r\n        this.filteredSource = callback\r\n            ? processSourceArray(callback, mapping)\r\n            : updated;\r\n\r\n        // build up the list html\r\n        const optionId = this.ids.OPTION;\r\n        const cssName = this.cssNameSpace;\r\n        const length = this.filteredSource.length;\r\n        const checkCallback = typeof this.options.onItemRender === 'function';\r\n        const maxResults = this.forceShowAll ? 9999 : this.options.maxResults;\r\n        for (let i = 0; i < length && i < maxResults; i += 1) {\r\n            const thisSource = this.filteredSource[i];\r\n            const callbackResponse =\r\n                checkCallback &&\r\n                this.triggerOptionCallback('onItemRender', [thisSource]);\r\n            const itemContent = callbackResponse || thisSource.label;\r\n            toShow.push(\r\n                `<li tabindex=\"-1\" aria-selected=\"false\" role=\"option\" class=\"${cssName}__option\" ` +\r\n                    `id=\"${optionId}--${i}\" aria-posinset=\"${i + 1}\" ` +\r\n                    `aria-setsize=\"${length}\">${itemContent}</li>`\r\n            );\r\n        }\r\n\r\n        // set has-results or no-results class on the list element\r\n        if (toShow.length) {\r\n            addClass(this.list, `${cssName}__list--has-results`);\r\n            removeClass(this.list, `${cssName}__list--no-results`);\r\n        } else {\r\n            removeClass(this.list, `${cssName}__list--has-results`);\r\n            addClass(this.list, `${cssName}__list--no-results`);\r\n        }\r\n\r\n        // no results text handling\r\n        let announce;\r\n        const noText = this.options.noResultsText;\r\n        if (!toShow.length && typeof noText === 'string' && noText.length) {\r\n            announce = noText;\r\n            let optionClass = `${cssName}__option`;\r\n            toShow.push(\r\n                `<li class=\"${optionClass} ${optionClass}--no-results\">${noText}</li>`\r\n            );\r\n        }\r\n\r\n        // remove loading class(es) and reset variables\r\n        this.cancelFilterPrep();\r\n\r\n        // announce to screen reader\r\n        if (!announce) {\r\n            announce = this.triggerOptionCallback('srResultsText', [length]);\r\n        }\r\n        this.announce(announce);\r\n\r\n        // render the list, only if we have to\r\n        // time taken for string comparison is worth it to not have to re-parse and re-render the list\r\n        const newListHtml = toShow.join('');\r\n        if (this.currentListHtml !== newListHtml) {\r\n            this.currentListHtml = newListHtml;\r\n            // innerHTML vs insertAdjacentHtml performance in old IE ?\r\n            this.list.innerHTML = newListHtml;\r\n        } else {\r\n            // if list html matches, and not re-rendered, clear aria-selected and focus classes\r\n            this.resetOptionAttributes();\r\n        }\r\n\r\n        // if toShow array is empty, make sure not to render the menu\r\n        if (!toShow.length) {\r\n            this.hide();\r\n            this.forceShowAll = false;\r\n            return;\r\n        }\r\n\r\n        this.show();\r\n        // reset forceShowAll must be after .show()\r\n        // aria-expanded attribute on showAllControl is controlled in .show() method\r\n        this.forceShowAll = false;\r\n    }\r\n\r\n    /**\r\n     * @description trigger async call for options to render\r\n     * @param {String} value\r\n     * @param {Boolean=} isFirstCall\r\n     */\r\n    handleAsync(value, isFirstCall = false) {\r\n        // abort any current call first\r\n        if (this.xhr) {\r\n            this.xhr.abort();\r\n        }\r\n\r\n        const xhr = new XMLHttpRequest();\r\n        const encode = encodeURIComponent;\r\n        const isShowAll = this.forceShowAll;\r\n        const unlimited = isShowAll || isFirstCall;\r\n        const context = isFirstCall ? null : this.api;\r\n        const baseAmount = this.multiple ? this.selected.length : 0;\r\n        const ampersandOrQuestionMark = /\\?/.test(this.source) ? '&' : '?';\r\n        let url =\r\n            this.source +\r\n            ampersandOrQuestionMark +\r\n            `${encode(this.options.asyncQueryParam)}=${encode(value)}&` +\r\n            `${encode(this.options.asyncMaxResultsParam)}=` +\r\n            `${unlimited ? 9999 : baseAmount + this.options.maxResults}`;\r\n        url = this.triggerOptionCallback('onAsyncPrep', [url], context) || url;\r\n\r\n        xhr.open('GET', url);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === xhr.DONE) {\r\n                if (xhr.status === 200) {\r\n                    // return forceShowAll to previous state before the options render\r\n                    this.forceShowAll = isShowAll;\r\n                    const callbackResponse = this.triggerOptionCallback(\r\n                        'onAsyncSuccess',\r\n                        [value, xhr],\r\n                        context\r\n                    );\r\n                    const mapping = this.options.sourceMapping;\r\n                    const source = callbackResponse || xhr.responseText;\r\n                    const items = processSourceArray(source, mapping, false);\r\n\r\n                    if (isFirstCall) {\r\n                        this.prepSelectedFromArray(items);\r\n                        this.setInputStartingStates(false);\r\n                    } else {\r\n                        this.setListOptions(items);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        // allow the creation of an uncancellable call to use on first load\r\n        if (!isFirstCall) {\r\n            this.xhr = xhr;\r\n        }\r\n\r\n        xhr.send();\r\n    }\r\n\r\n    /**\r\n     * @description trigger filtering using a value\r\n     * @param {String} value\r\n     */\r\n    filter(value) {\r\n        // fail silently if no value is provided\r\n        if (typeof value !== 'string') {\r\n            this.cancelFilterPrep();\r\n            return;\r\n        }\r\n\r\n        // allow onSearch callback to affect the searched value\r\n        // only permitted when not a forceShowAll case\r\n        let forceShowAll = this.forceShowAll;\r\n        let callbackResponse = this.triggerOptionCallback('onSearch', [value]);\r\n        if (!forceShowAll && typeof callbackResponse === 'string') {\r\n            value = callbackResponse;\r\n        }\r\n\r\n        // store search term - used for comparison in filterPrep\r\n        this.term = this.inputPollingValue = value;\r\n\r\n        // async handling\r\n        if (this.async) {\r\n            this.handleAsync(value);\r\n            // set show all to false immediately as may be used in other places\r\n            this.forceShowAll = false;\r\n            return;\r\n        }\r\n\r\n        // handle the source as a function\r\n        if (typeof this.source === 'function') {\r\n            this.source.call(this.api, this.term, response => {\r\n                let mapping = this.options.sourceMapping;\r\n                let result = processSourceArray(response, mapping);\r\n                this.setListOptions(result);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // if empty string, show all\r\n        if (!value) {\r\n            forceShowAll = true;\r\n        }\r\n\r\n        // existing list handling\r\n        const toReturn = [];\r\n        if (this.source && this.source.length) {\r\n            let check = [CLEANED_LABEL];\r\n            if (!forceShowAll) {\r\n                value = cleanString(value, true);\r\n                let searchIn = this.options.alsoSearchIn;\r\n                if (Array.isArray(searchIn) && searchIn.length) {\r\n                    check = removeDuplicatesAndLabel(check.concat(searchIn));\r\n                }\r\n            }\r\n            for (let i = 0, l = this.source.length; i < l; i += 1) {\r\n                const entry = this.source[i];\r\n                if (forceShowAll || searchVarPropsFor(entry, check, value)) {\r\n                    toReturn.push(entry);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setListOptions(toReturn);\r\n    }\r\n\r\n    /**\r\n     * @description cancel filter timer and remove loading classes\r\n     */\r\n    cancelFilterPrep() {\r\n        if (this.filterTimer) {\r\n            clearTimeout(this.filterTimer);\r\n        }\r\n        const nameSpace = this.cssNameSpace;\r\n        removeClass(this.wrapper, `${nameSpace}__wrapper--loading loading`);\r\n        removeClass(this.input, `${nameSpace}__input--loading loading`);\r\n        this.filtering = false;\r\n    }\r\n\r\n    /**\r\n     * @description checks before filtering, and set filter timer\r\n     * @param {Event} e\r\n     * @param {Boolean=} doValueOverrideCheck - whether to check input value against selected item(s)\r\n     * @param {Boolean=} runNow\r\n     */\r\n    filterPrep(e, doValueOverrideCheck = false, runNow = false) {\r\n        const forceShowAll = this.forceShowAll;\r\n        const delay = forceShowAll || runNow ? 0 : this.options.delay;\r\n\r\n        // clear timers\r\n        this.cancelFilterPrep();\r\n        this.filtering = true;\r\n        this.filterTimer = setTimeout(() => {\r\n            let value = this.input.value;\r\n            // treat as empty search if...\r\n            // forceShowAll, or in single mode and selected item label matches current value\r\n            if (\r\n                forceShowAll ||\r\n                value === '' ||\r\n                (doValueOverrideCheck &&\r\n                    !this.multiple &&\r\n                    this.selected.length &&\r\n                    trimString(this.selected[0].label) === trimString(value))\r\n            ) {\r\n                value = '';\r\n            }\r\n\r\n            // handle aria-describedby\r\n            this.setInputDescription();\r\n            this.inputPollingValue = value; // set polling value, even if search criteria not met\r\n\r\n            if (!forceShowAll && value.length < this.options.minLength) {\r\n                this.hide();\r\n                return;\r\n            }\r\n\r\n            // try catch used due to permissions issues in some cases\r\n            let modifier;\r\n            try {\r\n                let keydown = e && e.type === 'keydown';\r\n                modifier = keydown && (e.altKey || e.ctrlKey || e.metaKey); // allow shift key, just in case...\r\n            } catch (e) {}\r\n\r\n            // prevent search being run again with the same value\r\n            const equalVals = value === '' ? false : value === this.term;\r\n            if (!equalVals || (equalVals && !this.menuOpen && !modifier)) {\r\n                let n = this.cssNameSpace;\r\n                addClass(this.wrapper, `${n}__wrapper--loading loading`);\r\n                addClass(this.input, `${n}__input--loading loading`);\r\n                this.currentSelectedIndex = -1;\r\n                this.filter(value);\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description trigger filter prep in showAll mode\r\n     * @param {Event} event\r\n     */\r\n    filterPrepShowAll(event) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        // need to use a timer, as the wrapper focus out will fire after the click event\r\n        if (this.showAllPrepTimer) {\r\n            clearTimeout(this.showAllPrepTimer);\r\n        }\r\n        this.showAllPrepTimer = setTimeout(() => {\r\n            if (this.componentBlurTimer) {\r\n                clearTimeout(this.componentBlurTimer);\r\n            }\r\n            event.preventDefault();\r\n            this.forceShowAll = true;\r\n            this.filterPrep(event, false, true);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description blur behaviour for hiding list and removing focus class(es)\r\n     * @param {Event} event\r\n     * @param {Boolean=} force - fire instantly and force blurring out of the component\r\n     */\r\n    handleComponentBlur(event, force = false) {\r\n        if (this.componentBlurTimer) {\r\n            clearTimeout(this.componentBlurTimer);\r\n        }\r\n        // use a timeout to ensure this blur fires after other focus events\r\n        // and in case the user focuses back in immediately\r\n        const delay = force ? 0 : 100;\r\n        this.componentBlurTimer = setTimeout(() => {\r\n            // do nothing if blurring to an element within the list\r\n            const activeElem = document.activeElement;\r\n            if (\r\n                !force &&\r\n                activeElem &&\r\n                !(this.showAll && this.showAll === activeElem) && // exception for show all button\r\n                !activeElem[SELECTED_OPTION] // exception for selected items\r\n            ) {\r\n                // must base this on the wrapper to allow scrolling the list in IE\r\n                if (this.wrapper.contains(activeElem)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // cancel any running async call\r\n            if (this.xhr) {\r\n                this.xhr.abort();\r\n            }\r\n\r\n            // confirmOnBlur behaviour\r\n            const isQueryIn = this.indexOfQueryIn.bind(this);\r\n            if (!force && this.options.confirmOnBlur && this.menuOpen) {\r\n                // if blurring from an option (currentSelectedIndex > -1), select it\r\n                let toUse = this.currentSelectedIndex;\r\n                if (typeof toUse !== 'number' || toUse === -1) {\r\n                    // otherwise check for exact match between current input value and available items\r\n                    toUse = isQueryIn(this.filteredSource);\r\n                }\r\n                this.handleOptionSelect({}, toUse, false);\r\n            }\r\n\r\n            this.cancelFilterPrep();\r\n            this.hide();\r\n\r\n            // in single select case, if current value and chosen value differ, clear selected and input value\r\n            if (!this.multiple && isQueryIn(this.selected) === -1) {\r\n                const inputOrDdl = this.elementIsInput || this.elementIsSelect;\r\n                if (inputOrDdl && this.element.value !== '') {\r\n                    this.element.value = '';\r\n                    dispatchEvent(this.element, 'change');\r\n                }\r\n                if (this.selected.length) {\r\n                    this.removeEntryFromSelected(this.selected[0]);\r\n                }\r\n                this.setInputValue('', true);\r\n            }\r\n\r\n            if (this.multiple) {\r\n                this.setInputValue('', true);\r\n            }\r\n\r\n            // trigger input resizing\r\n            this.triggerAutoGrow();\r\n\r\n            // unbind document click\r\n            if (this.documentClickBound) {\r\n                this.documentClickBound = false;\r\n                document.removeEventListener('click', this.documentClick);\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description enter keydown for selections\r\n     * @param {Event} event\r\n     */\r\n    handleEnterKey(event) {\r\n        // if in multiple mode, and event target was a selected item, remove it\r\n        if (this.isSelectedElem(event.target)) {\r\n            const option = event.target[SELECTED_OPTION];\r\n            return this.removeEntryFromSelected(option);\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (this.showAll && event.target === this.showAll) {\r\n            this.filterPrepShowAll(event);\r\n            return;\r\n        }\r\n\r\n        if (this.menuOpen) {\r\n            event.preventDefault();\r\n            if (this.currentSelectedIndex > -1) {\r\n                this.handleOptionSelect(event, this.currentSelectedIndex);\r\n            }\r\n        }\r\n\r\n        // if enter keypress was from the filter input, trigger search immediately\r\n        if (event.target === this.input) {\r\n            this.filterPrep(event, false, true);\r\n        }\r\n    }\r\n    /**\r\n     * @description down arrow usage - option focus, or search all\r\n     * @param {Event} event\r\n     */\r\n    handleDownArrowKey(event) {\r\n        event.preventDefault();\r\n        // if closed, and text is long enough, run search\r\n        if (!this.menuOpen) {\r\n            this.forceShowAll = this.options.minLength < 1;\r\n            if (\r\n                this.forceShowAll ||\r\n                this.input.value.length >= this.options.minLength\r\n            ) {\r\n                this.filterPrep(event);\r\n            }\r\n        }\r\n        // move focus to downward option\r\n        if (this.menuOpen && !this.filtering) {\r\n            const current = this.currentSelectedIndex;\r\n            if (typeof current !== 'number' || current < 0) {\r\n                this.setOptionFocus(event, 0);\r\n            } else {\r\n                this.setOptionFocus(event, current + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description up arrow usage - option focus, or return focus to input\r\n     * @param {Event} event\r\n     */\r\n    handleUpArrowKey(event) {\r\n        event.preventDefault();\r\n        const usable = !this.disabled && this.menuOpen;\r\n        if (usable && typeof this.currentSelectedIndex === 'number') {\r\n            this.setOptionFocus(event, this.currentSelectedIndex - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description standard keydown handling (excluding enter, up, down, escape)\r\n     * @param {Event} event\r\n     */\r\n    handleKeyDownDefault(event) {\r\n        const targetIsInput = event.target === this.input;\r\n        // on space, if focus state is on any other item, treat as enter\r\n        if (event.keyCode === 32 && !targetIsInput) {\r\n            event.preventDefault();\r\n            return this.handleEnterKey(event);\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        // on backspace, if using empty input in multiple mode, delete last selected entry\r\n        const selectedLength = this.selected && this.selected.length;\r\n        if (\r\n            this.options.deleteOnBackspace &&\r\n            this.input.value === '' &&\r\n            event.keyCode === 8 &&\r\n            selectedLength &&\r\n            targetIsInput &&\r\n            this.multiple\r\n        ) {\r\n            this.removeEntryFromSelected(this.selected[selectedLength - 1]);\r\n            return;\r\n        }\r\n\r\n        // any printable character not on input, return focus to input\r\n        const printableKey = isPrintableKey(event.keyCode);\r\n        const focusInput = !targetIsInput && printableKey;\r\n        if (focusInput) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // trigger filtering - done here, instead of using input event, due to IE9 issues\r\n        if (focusInput || (targetIsInput && printableKey)) {\r\n            this.filterPrep(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description component keydown handling\r\n     * @param {Event} event\r\n     */\r\n    prepKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 13: // on enter\r\n                this.handleEnterKey(event);\r\n                break;\r\n            case 27: // on escape\r\n                this.handleComponentBlur(event, true);\r\n                break;\r\n            case 38: // on up\r\n                this.handleUpArrowKey(event);\r\n                break;\r\n            case 40: // on down\r\n                this.handleDownArrowKey(event);\r\n                break;\r\n            default:\r\n                this.handleKeyDownDefault(event);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description cancel checking for input value changes from external causes\r\n     */\r\n    cancelPolling() {\r\n        if (this.pollingTimer) {\r\n            clearTimeout(this.pollingTimer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description start checking for input value changes from causes that bypass event detection\r\n     */\r\n    startPolling() {\r\n        // check if input value does not equal last searched term\r\n        if (!this.filtering && this.input.value !== this.inputPollingValue) {\r\n            this.filterPrep({});\r\n        }\r\n        this.pollingTimer = setTimeout(() => {\r\n            this.startPolling();\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * @description bind component events to generated elements\r\n     */\r\n    bindEvents() {\r\n        // when focus is moved outside of the component, close everything\r\n        this.wrapper.addEventListener('focusout', event => {\r\n            this.handleComponentBlur(event, false);\r\n        });\r\n        // reset selected index\r\n        this.wrapper.addEventListener('focusin', event => {\r\n            if (!this.list.contains(event.target)) {\r\n                this.currentSelectedIndex = -1;\r\n            }\r\n        });\r\n        // handle all keydown events inside the component\r\n        this.wrapper.addEventListener('keydown', event => {\r\n            this.prepKeyDown(event);\r\n        });\r\n        // if clicking directly on the wrapper, move focus to the input\r\n        this.wrapper.addEventListener('click', event => {\r\n            if (event.target === this.wrapper) {\r\n                this.input.focus();\r\n                return;\r\n            }\r\n            if (this.isSelectedElem(event.target)) {\r\n                const option = event.target[SELECTED_OPTION];\r\n                this.removeEntryFromSelected(option);\r\n            }\r\n        });\r\n\r\n        const wrapperFocusClasses = `${this.cssNameSpace}__wrapper--focused focused focus`;\r\n        const inputFocusClasses = `${this.cssNameSpace}__input--focused focused focus`;\r\n        // when blurring out of input, remove classes\r\n        this.input.addEventListener('blur', () => {\r\n            removeClass(this.wrapper, wrapperFocusClasses);\r\n            removeClass(this.input, inputFocusClasses);\r\n            this.cancelPolling();\r\n        });\r\n        // trigger filter on input event as well as keydown (covering bases)\r\n        this.input.addEventListener('input', event => {\r\n            this.filterPrep(event);\r\n        });\r\n        // when specifically clicking on input, if menu is closed, and value is long enough, search\r\n        this.input.addEventListener('click', event => {\r\n            const open = this.menuOpen;\r\n            if (!open && this.input.value.length >= this.options.minLength) {\r\n                this.filterPrep(event, true);\r\n            }\r\n        });\r\n        // when focusing on input, reset selected index and trigger search handling\r\n        this.input.addEventListener('focusin', () => {\r\n            addClass(this.wrapper, wrapperFocusClasses);\r\n            addClass(this.input, inputFocusClasses);\r\n            this.startPolling();\r\n            if (!this.disabled && !this.menuOpen) {\r\n                this.filterPrep(event, true);\r\n            }\r\n        });\r\n\r\n        // show all button click\r\n        if (this.showAll) {\r\n            this.showAll.addEventListener('click', event => {\r\n                this.filterPrepShowAll(event);\r\n            });\r\n        }\r\n\r\n        // clear any current focus position when hovering into the list\r\n        this.list.addEventListener('mouseenter', event => {\r\n            this.resetOptionAttributes();\r\n        });\r\n        // trigger options selection\r\n        this.list.addEventListener('click', event => {\r\n            if (event.target !== this.list) {\r\n                const childNodes = this.list.childNodes;\r\n                if (childNodes.length) {\r\n                    const nodeIndex = [].indexOf.call(childNodes, event.target);\r\n                    this.handleOptionSelect(event, nodeIndex);\r\n                }\r\n            }\r\n        });\r\n\r\n        // setup input autogrow behaviour\r\n        if (this.autoGrow) {\r\n            this.AutoGrowInput = new AutoGrow(this.input);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on child checkboxes\r\n     */\r\n    prepListSourceCheckboxes() {\r\n        this.multiple = true; // force multiple in this case\r\n        // reset source and use checkboxes\r\n        this.source = [];\r\n        const elements = this.element.querySelectorAll(\r\n            'input[type=\"checkbox\"]'\r\n        );\r\n        for (let i = 0, l = elements.length; i < l; i += 1) {\r\n            const checkbox = elements[i];\r\n            // must have a value other than empty string\r\n            if (!checkbox.value) {\r\n                continue;\r\n            }\r\n            const toPush = { element: checkbox, value: checkbox.value };\r\n            // label searching\r\n            let label = checkbox.closest('label');\r\n            if (!label && checkbox.id) {\r\n                label = document.querySelector('[for=\"' + checkbox.id + '\"]');\r\n            }\r\n            if (label) {\r\n                toPush.label = label.textContent;\r\n            }\r\n            // if no label so far, re-use value\r\n            if (!toPush.label) {\r\n                toPush.label = toPush.value;\r\n            }\r\n            toPush[CLEANED_LABEL] = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (checkbox.checked) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on <select> options\r\n     */\r\n    prepListSourceDdl() {\r\n        this.multiple = this.element.multiple; // force multiple to match select\r\n        // reset source and use options\r\n        this.source = [];\r\n        const options = this.element.querySelectorAll('option');\r\n        for (let i = 0, l = options.length; i < l; i += 1) {\r\n            const option = options[i];\r\n            // must have a value other than empty string\r\n            if (!option.value) {\r\n                continue;\r\n            }\r\n            const toPush = {\r\n                element: option,\r\n                value: option.value,\r\n                label: option.textContent\r\n            };\r\n            toPush[CLEANED_LABEL] = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (option.selected) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description build up selected array if starting element was an input, and had a value\r\n     * @param {Object[]} source\r\n     */\r\n    prepSelectedFromArray(source) {\r\n        const value = this.elementIsInput && this.element.value;\r\n        if (value && source && source.length) {\r\n            // account for multiple mode\r\n            const multiple = this.options.multiple;\r\n            const separator = this.options.multipleSeparator;\r\n            const valueArr = multiple ? value.split(separator) : [value];\r\n\r\n            for (let i = 0, l = valueArr.length; i < l; i += 1) {\r\n                const val = valueArr[i];\r\n                const isQueryIn = this.indexOfQueryIn;\r\n                // make sure it is not already in the selected array\r\n                const isSelected = isQueryIn(this.selected, val, 'value') > -1;\r\n\r\n                // but is in the source array (check via 'value', not 'label')\r\n                if (!isSelected) {\r\n                    const indexInSource = isQueryIn(source, val, 'value');\r\n                    if (indexInSource > -1) {\r\n                        this.selected.push(source[indexInSource]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust starting source array to format needed, and set selected\r\n     */\r\n    prepListSourceArray() {\r\n        const mapping = this.options.sourceMapping;\r\n        this.source = processSourceArray(this.source, mapping);\r\n        this.prepSelectedFromArray(this.source);\r\n    }\r\n\r\n    /**\r\n     * @description trigger source string endpoint to generate selected array\r\n     */\r\n    prepListSourceAsync() {\r\n        this.async = true;\r\n        if (this.elementIsInput && this.element.value) {\r\n            this.handleAsync(this.element.value, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description process source function to generate selected array\r\n     */\r\n    prepListSourceFunction() {\r\n        if (this.elementIsInput && this.element.value) {\r\n            this.source.call(undefined, this.element.value, response => {\r\n                this.prepSelectedFromArray(\r\n                    processSourceArray(response, this.options.sourceMapping)\r\n                );\r\n                this.setInputStartingStates(false);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust set sources to needed format\r\n     */\r\n    prepListSource() {\r\n        // allow complete control over the source handling via custom function\r\n        if (typeof this.source === 'function') {\r\n            return this.prepListSourceFunction();\r\n        }\r\n\r\n        // string source - treat as async endpoint\r\n        if (typeof this.source === 'string' && this.source.length) {\r\n            return this.prepListSourceAsync();\r\n        }\r\n\r\n        // array source - copy array\r\n        if (Array.isArray(this.source) && this.source.length) {\r\n            return this.prepListSourceArray();\r\n        }\r\n\r\n        // dropdown source\r\n        if (this.elementIsSelect) {\r\n            return this.prepListSourceDdl();\r\n        }\r\n\r\n        // checkboxlist source\r\n        if (this.element.querySelector('input[type=\"checkbox\"]')) {\r\n            this.prepListSourceCheckboxes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set input starting states - aria attributes, disabled state, starting value\r\n     * @param {Boolean=} setAriaAttrs\r\n     */\r\n    setInputStartingStates(setAriaAttrs = true) {\r\n        if (setAriaAttrs) {\r\n            // update corresponding label to now focus on the new input\r\n            if (this.ids.ELEMENT) {\r\n                const label = document.querySelector(\r\n                    '[for=\"' + this.ids.ELEMENT + '\"]'\r\n                );\r\n                if (label) {\r\n                    label.ariaAutocompleteOriginalFor = this.ids.ELEMENT;\r\n                    label.setAttribute('for', this.ids.INPUT);\r\n                }\r\n            }\r\n\r\n            // update aria-describedby and aria-labelledby attributes if present\r\n            const describedBy = this.element.getAttribute('aria-describedby');\r\n            if (describedBy) {\r\n                this.input.setAttribute('aria-describedby', describedBy);\r\n            }\r\n            const labelledBy = this.element.getAttribute('aria-labelledby');\r\n            if (labelledBy) {\r\n                this.input.setAttribute('aria-labelledby', labelledBy);\r\n            }\r\n        }\r\n\r\n        // if selected item(s) already exists\r\n        if (this.selected.length) {\r\n            // for multi select variant, set selected items\r\n            if (this.multiple) {\r\n                this.buildMultiSelected();\r\n            }\r\n            // for single select variant, set value to match\r\n            else {\r\n                this.setInputValue(this.selected[0].label || '', true);\r\n                this.triggerAutoGrow();\r\n            }\r\n        }\r\n\r\n        // setup input description - done here in case value is affected above\r\n        this.setInputDescription();\r\n\r\n        // disable the control if the invoked element was disabled\r\n        if (!!this.element.disabled) {\r\n            this.disable();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description build and insert component html structure\r\n     */\r\n    setHtml() {\r\n        const o = this.options;\r\n        const cssName = this.cssNameSpace;\r\n        const wrapperClass = o.wrapperClassName ? ` ${o.wrapperClassName}` : '';\r\n        const newHtml = [\r\n            `<div id=\"${this.ids.WRAPPER}\" class=\"${cssName}__wrapper${wrapperClass}\">`\r\n        ];\r\n\r\n        // add input\r\n        const name = o.name ? ` ${o.name}` : ``;\r\n        const inputClass = o.inputClassName ? ` ${o.inputClassName}` : '';\r\n        newHtml.push(\r\n            `<input type=\"text\" autocomplete=\"off\" aria-expanded=\"false\" aria-autocomplete=\"list\" ` +\r\n                `role=\"combobox\" id=\"${this.ids.INPUT}\" placeholder=\"${o.placeholder}\" ` +\r\n                `aria-owns=\"${this.ids.LIST}\" aria-placeholder=\"${o.placeholder}\" ` +\r\n                `class=\"${cssName}__input${inputClass}\"${name} />`\r\n        );\r\n\r\n        // button to show all available options\r\n        if (o.showAllControl) {\r\n            newHtml.push(\r\n                `<span role=\"button\" aria-label=\"${o.srShowAllText}\" class=\"${cssName}__show-all\" ` +\r\n                    `tabindex=\"0\" id=\"${this.ids.BUTTON}\" aria-expanded=\"false\"></span>`\r\n            );\r\n        }\r\n        // add the list holder\r\n        const explainerText = o.srListLabelText;\r\n        const listClass = o.listClassName ? ` ${o.listClassName}` : '';\r\n        const explainer = explainerText ? ` aria-label=\"${explainerText}\"` : '';\r\n        newHtml.push(\r\n            `<ul id=\"${this.ids.LIST}\" class=\"${cssName}__list${listClass}\" role=\"listbox\" ` +\r\n                `hidden=\"hidden\"${explainer}></ul>`\r\n        );\r\n        // add the screen reader assistance element\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-assistance\" ` +\r\n                `id=\"${this.ids.SR_ASSISTANCE}\">${o.srAssistiveText}</span>`\r\n        );\r\n        // add element for added screen reader announcements\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-announcements\" ` +\r\n                `id=\"${this.ids.SR_ANNOUNCEMENTS}\" aria-live=\"polite\" aria-atomic=\"true\"></span>`\r\n        );\r\n\r\n        // close all and append\r\n        newHtml.push(`</div>`);\r\n        this.element.insertAdjacentHTML('afterend', newHtml.join(''));\r\n    }\r\n\r\n    /**\r\n     * @description generate api object to expose on the element\r\n     */\r\n    generateApi() {\r\n        this.api = {\r\n            open: () => this.show.call(this),\r\n            close: () => this.hide.call(this),\r\n            filter: val => this.filter.call(val)\r\n        };\r\n\r\n        const a = [\r\n            'options',\r\n            'destroy',\r\n            'enable',\r\n            'disable',\r\n            'input',\r\n            'wrapper',\r\n            'list',\r\n            'selected'\r\n        ];\r\n\r\n        for (let i = 0, l = a.length; i < l; i += 1) {\r\n            this.api[a[i]] =\r\n                typeof this[a[i]] === 'function'\r\n                    ? () => this[a[i]].call(this)\r\n                    : this[a[i]];\r\n        }\r\n\r\n        // store api on original element\r\n        this.element.ariaAutocomplete = this.api;\r\n    }\r\n\r\n    /**\r\n     * @description destroy component\r\n     */\r\n    destroy() {\r\n        // return original label 'for' attribute back to element id\r\n        const label = document.querySelector('[for=\"' + this.ids.INPUT + '\"]');\r\n        if (label && label.ariaAutocompleteOriginalFor) {\r\n            label.setAttribute('for', label.ariaAutocompleteOriginalFor);\r\n            delete label.ariaAutocompleteOriginalFor;\r\n        }\r\n        // remove the document click if still bound\r\n        if (this.documentClickBound) {\r\n            document.removeEventListener('click', this.documentClick);\r\n        }\r\n        // destroy autogrow behaviour and events\r\n        if (this.autoGrow && this.AutoGrowInput) {\r\n            this.AutoGrowInput.destroy();\r\n        }\r\n        // remove the whole wrapper\r\n        this.element.parentNode.removeChild(this.wrapper);\r\n        delete this.element.ariaAutocomplete;\r\n        // re-show original element\r\n        this.show(this.element);\r\n        // set all instance properties to null to clean up DOMNode references\r\n        for (let i in this) {\r\n            if (this.hasOwnProperty(i)) {\r\n                this[i] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description initialise AriaAutocomplete\r\n     * @param {Element} element\r\n     * @param {Object=} options\r\n     */\r\n    init(element, options) {\r\n        // ids used for DOM queries and accessibility attributes e.g. aria-controls\r\n        appIndex += 1;\r\n        this.ids = {};\r\n        this.ids.ELEMENT = element.id;\r\n        this.ids.PREFIX = `${element.id || ''}aria-autocomplete-${appIndex}`;\r\n        this.ids.LIST = `${this.ids.PREFIX}-list`;\r\n        this.ids.INPUT = `${this.ids.PREFIX}-input`;\r\n        this.ids.BUTTON = `${this.ids.PREFIX}-button`;\r\n        this.ids.OPTION = `${this.ids.PREFIX}-option`;\r\n        this.ids.WRAPPER = `${this.ids.PREFIX}-wrapper`;\r\n        this.ids.OPTION_SELECTED = `${this.ids.OPTION}-selected`;\r\n        this.ids.SR_ASSISTANCE = `${this.ids.PREFIX}-sr-assistance`;\r\n        this.ids.SR_ANNOUNCEMENTS = `${this.ids.PREFIX}-sr-announcements`;\r\n\r\n        this.selected = [];\r\n        this.element = element;\r\n        this.elementIsInput = element.nodeName === 'INPUT';\r\n        this.elementIsSelect = element.nodeName === 'SELECT';\r\n        this.options = mergeObjects(DEFAULT_OPTIONS, options);\r\n\r\n        // set these internally so that the component has to be properly destroyed to change them\r\n        this.source = this.options.source;\r\n        this.multiple = this.options.multiple;\r\n        this.autoGrow = this.options.autoGrow;\r\n        this.cssNameSpace = this.options.cssNameSpace;\r\n        this.documentClick = this.handleComponentBlur.bind(this);\r\n\r\n        // create html structure\r\n        this.setHtml();\r\n\r\n        // additional app variables\r\n        this.list = document.getElementById(this.ids.LIST);\r\n        this.input = document.getElementById(this.ids.INPUT);\r\n        this.wrapper = document.getElementById(this.ids.WRAPPER);\r\n        this.showAll = document.getElementById(this.ids.BUTTON);\r\n        this.srAnnouncements = document.getElementById(\r\n            this.ids.SR_ANNOUNCEMENTS\r\n        );\r\n\r\n        // set internal source array, from static elements if necessary\r\n        this.prepListSource();\r\n\r\n        // set any further classes on component wrapper based on options\r\n        let wrapperClass = '';\r\n        if (this.options.showAllControl) {\r\n            wrapperClass += ` ${this.cssNameSpace}__wrapper--show-all`;\r\n        }\r\n        if (this.autoGrow) {\r\n            wrapperClass += ` ${this.cssNameSpace}__wrapper--autogrow`;\r\n        }\r\n        if (this.multiple) {\r\n            wrapperClass += ` ${this.cssNameSpace}__wrapper--multiple`;\r\n        }\r\n        if (wrapperClass) {\r\n            addClass(this.wrapper, wrapperClass);\r\n        }\r\n\r\n        // hide element and list manually\r\n        this.hide(this.list); // pass in the list so that the onClose is not triggered\r\n        this.hide(this.element);\r\n\r\n        // generate api object to expose\r\n        this.generateApi();\r\n\r\n        // set starting states for input - must be after source has been defined\r\n        this.setInputStartingStates();\r\n\r\n        // bind all necessary events\r\n        this.bindEvents();\r\n\r\n        // fire onready callback\r\n        this.triggerOptionCallback('onReady', [this.wrapper]);\r\n    }\r\n}\r\n\r\n/**\r\n * @description expose specific function rather than the AriaAutocomplete class\r\n * @param {Element} elem\r\n * @param {Object} options\r\n * @returns {Object}\r\n */\r\nwindow['AriaAutocomplete'] = (elem, options) => {\r\n    return new AriaAutocomplete(elem, options).api;\r\n};\r\n\r\nexport default (elem, options) => {\r\n    return new AriaAutocomplete(elem, options).api;\r\n};\r\n"]}