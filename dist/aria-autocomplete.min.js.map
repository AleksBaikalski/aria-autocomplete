{"version":3,"sources":["closest-polyfill.js","helpers.js","aria-autocomplete.js"],"names":["Element","prototype","matches","msMatchesSelector","webkitMatchesSelector","closest","s","el","parentElement","parentNode","nodeType","REGEX_TRIM","trimString","theString","replace","addClass","element","classes","currentValue","getAttribute","current","finalValue","i","cs","split","l","length","indexOf","setAttribute","removeClass","REGEX_AMPERSAND","REGEX_DUPE_WHITESPACE","REGEX_MAKE_SAFE","REGEX_TO_IGNORE","cleanString","toLowerCase","isPrintableKey","keyCode","mergeObjects","n","o","a","p","hasOwnProperty","dispatchEvent","event","document","e","createEvent","initEvent","fireEvent","setElementState","selected","instance","nodeName","checked","elementChangeEventTimer","clearTimeout","setTimeout","processSourceArray","sourceArray","setCleanedLabel","toReturn","result","entry","value","label","toString","cleanedLabel","push","appIndex","DEFAULT_OPTIONS","source","delay","minLength","maxResults","showAllButton","confirmOnBlur","multiple","maxItems","multipleSeparator","placeholder","noResultsText","listClassName","inputClassName","wrapperClassName","cssNameSpace","asyncQueryParam","asyncMaxResultsParam","srDeleteText","srDeletedText","srSelectedText","srExplanatoryText","srAssistiveText","srResultsText","onAsyncSuccess","undefined","onResponse","onSearch","onSelect","onReady","onClose","onOpen","AriaAutocomplete","options","ariaAutocomplete","elementIsInput","elementIsSelect","ids","ELEMENT","id","PREFIX","LIST","INPUT","BUTTON","OPTION","WRAPPER","OPTION_SELECTED","SR_ASSISTANCE","SR_ANNOUNCEMENTS","list","input","wrapper","showAll","srAnnouncements","xhr","term","async","menuOpen","disabled","filtering","forceShowAll","filteredSource","currentListHtml","currentSelectedIndex","filterTimer","announcementTimer","componentBlurTimer","init","name","args","apply","toRemove","removeAttribute","expanded","show","triggerOptionCallback","hide","query","prop","text","textContent","exists","describedBy","cssName","nodes","childNodes","index","resetOptionAttributes","target","focus","setOptionFocus","toFocus","toAdd","valToSet","valToSetString","join","disable","enable","focusAfterSelection","option","alreadySelected","setSourceElementValues","buildMultiSelected","announce","results","resultsLoop","j","k","labelMatch","thisResult","toShow","optionId","updated","removeSelectedFromResults","callback","noText","noResults","optionClass","cancelFilterPrep","newListHtml","innerHTML","canCancel","XMLHttpRequest","encode","encodeURIComponent","isShowAll","limit","limitParam","queryParam","params","url","test","abort","open","onload","items","responseText","setListOptions","send","callbackResponse","handleAsync","call","search","staticSourceIndex","nameSpace","doValueOverrideCheck","runNow","setInputDescription","modifier","type","altKey","ctrlKey","metaKey","equalVals","filter","preventDefault","filterPrep","force","forceClose","activeElem","activeElement","contains","isQueryIn","isQueryContainedIn","toUse","handleOptionSelect","filterPrepShowAll","targetIsInput","handleEnterKey","selectedLength","lastSelectedLabel","announcement","pop","focusInput","handleComponentBlur","handleUpArrowKey","handleDownArrowKey","handleKeyDownDefault","addEventListener","prepKeyDown","nodeIndex","elements","querySelectorAll","checkbox","toPush","querySelector","node","separator","valueArr","val","indexInSource","Array","isArray","prepListSourceArray","prepListSourceDdl","prepListSourceCheckboxes","ariaAutocompleteOriginalFor","labelledBy","explainerText","listClass","inputClass","wrapperClass","explainer","newHtml","insertAdjacentHTML","destroy","removeChild","setHtml","getElementById","prepListSource","setInputStartingStates","bindEvents","elem","autocomplete","api"],"mappings":"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","file":"aria-autocomplete.min.js","sourceRoot":"../src","sourcesContent":["if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\nif (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n        var el = this;\n        do { \n            if (el.matches(s)) { \n                return el; \n            } \n            el = el.parentElement || el.parentNode; \n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}","const REGEX_TRIM = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n/**\n * trim string helper\n * @param {string} theString\n */\nexport function trimString(theString) {\n    return theString == null ? '' : (theString + '').replace(REGEX_TRIM, '');\n}\n\n/**\n * add class(es) to element\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to add\n */\nexport function addClass(element, classes) {\n    let currentValue = trimString(element.getAttribute && element.getAttribute('class'));\n    let current = ' ' + currentValue + ' ';\n    let finalValue = '';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        if (cs[i] !== '' && current.indexOf(' ' + cs[i] + ' ') === -1) {\n            finalValue += ' ' + cs[i];\n        }\n    }\n    if (currentValue !== (finalValue = currentValue + finalValue)) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n/**\n * remove class(es) from element\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to remove\n */\nexport function removeClass(element, classes) {\n    let currentValue = trimString(element.getAttribute && element.getAttribute('class'));\n    let finalValue = ' ' + currentValue + ' ';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        finalValue = finalValue.replace(' ' + cs[i] + ' ', ' ');\n    }\n    if (currentValue !== (finalValue = trimString(finalValue))) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n// regex constants used for string cleaning\nconst REGEX_AMPERSAND = /&/g;\nconst REGEX_DUPE_WHITESPACE = /\\s\\s+/g;\nconst REGEX_MAKE_SAFE = /[.*+?^${}()|[\\]\\\\]/g;\nconst REGEX_TO_IGNORE = /[\\u2018\\u2019',:\\u2013-]/g;\n/**\n * @description clean string of some characters, and make safe for regex searching\n * @param {String} theString\n * @returns {String}\n */\nexport function cleanString(theString) {\n    theString = theString.replace(REGEX_TO_IGNORE, ''); // ignore quotes, commas, colons, and hyphens\n    theString = theString.replace(REGEX_AMPERSAND, 'and'); // treat & and 'and' as the same\n    theString = theString.replace(REGEX_MAKE_SAFE, '\\\\$&'); // make safe for regex searching\n    theString = theString.replace(REGEX_DUPE_WHITESPACE, ' '); // ignore duplicate whitespace \n    return trimString(theString.toLowerCase()); // case insensitive\n}\n\n/**\n * @description check if keycode is for a printable/width-affecting character\n * @param {Number} keyCode \n * @returns {Boolean}\n */\nexport function isPrintableKey(keyCode) {\n    return (\n        (keyCode >= 48 && keyCode <= 57) || // 0-9\n        (keyCode >= 65 && keyCode <= 90) || // a-z\n        (keyCode >= 96 && keyCode <= 111) || // numpad 0-9, numeric operators\n        (keyCode >= 186 && keyCode <= 222) || // semicolon, equal, comma, dash, etc.\n        keyCode === 32 || keyCode === 8 || keyCode === 46 // space, backspace, or delete\n    );\n}\n\n/**\n * @description merge objects together to generate a new one\n * @param {Object} args - objects to merge together\n * @returns {Object}\n */\nexport function mergeObjects(...args) {\n    let n = {};\n    for (let i = 0, l = args.length; i < l; i += 1) {\n        let o = a[i];\n        for (let p in o) {\n            if (o.hasOwnProperty(p) && typeof o[p] !== 'undefined') {\n                n[p] = o[p];\n            }\n        }\n    }\n    return n;\n}\n\n/**\n * @description dispatch event helper\n * @param {Element} element\n * @param {String} event\n */\nexport function dispatchEvent(element, event) {\n    if ('createEvent' in document) {\n        let e = document.createEvent('HTMLEvents');\n        e.initEvent(event, true, true);\n        element.dispatchEvent(e);\n    } else {\n        element.fireEvent('on' + event);\n    }\n}\n\n/**\n * @description set element option or checkbox to specified state and trigger change event\n * @param {Element} element\n * @param {Boolean} selected\n * @param {(AriaAutocomplete|Object)} instance\n */\nexport function setElementState(element, selected, instance) {\n    selected = !!selected;\n    if (element) {\n        // handle checkbox\n        if (element.nodeName === 'INPUT' && typeof element.checked === 'boolean' && element.checked !== selected) {\n            element.checked = selected;\n            dispatchEvent(element, 'change');\n        }\n\n        // handle dropdown option\n        if (element.nodeName === 'OPTION' && element.selected !== selected) {\n            element.selected = selected;\n            // ensure change event only fires once for dropdown\n            if (instance.elementChangeEventTimer) {\n                clearTimeout(instance.elementChangeEventTimer);\n            }\n            instance.elementChangeEventTimer = setTimeout(function () {\n                dispatchEvent(element.closest('select'), 'change');\n            }, 1);\n        }\n    }\n}\n\n/**\n * @description process an array of strings or objects to ensure needed props exist\n * @param {(String|Object)[]} sourceArray\n * @param {Boolean=} setCleanedLabel - defaults to true\n * @returns {Array}\n */\nexport function processSourceArray(sourceArray, setCleanedLabel) {\n    let toReturn = [];\n    for (let i = 0, l = sourceArray.length; i < l; i += 1) {\n        let result = {};\n        let entry = sourceArray[i];\n        // handle array of strings\n        if (typeof entry === 'string') {\n            result.value = entry;\n            result.label = entry;\n        }\n        // handle array of objects - ensure value and label exist, and maintain any other properties\n        else {\n            result = entry;\n            result.value = (result.value || result.label || '').toString();\n            result.label = (result.label || result.value || '').toString();\n        }\n        // whether to set a cleaned label for static source filtering (in filter method)\n        if (setCleanedLabel !== false) {\n            result.cleanedLabel = cleanString(result.label);\n        }\n        toReturn.push(result);\n    }\n    return toReturn;\n}","import './closest-polyfill';\r\nimport {\r\n    trimString,\r\n    addClass,\r\n    removeClass,\r\n    cleanString,\r\n    isPrintableKey,\r\n    mergeObjects,\r\n    dispatchEvent,\r\n    setElementState,\r\n    processSourceArray\r\n} from './helpers';\r\n\r\nlet appIndex = 0;\r\n\r\nconst DEFAULT_OPTIONS = {\r\n    /**\r\n     * @description string for async endpoint, array of strings, array of objects with value and label, or function\r\n     * @type {String|String[]|Object[]|Function}\r\n     */\r\n    source: '',\r\n\r\n    /** @description input delay before running a search */\r\n    delay: 300,\r\n    /** @description min number of characters to run a search (includes spaces) */\r\n    minLength: 0,\r\n    /** @description max number of results to render */\r\n    maxResults: 9999,\r\n    /** @description whether to render a button that triggers showing all options */\r\n    showAllButton: true,\r\n    /** @description confirm selection when blurring off of the control */\r\n    confirmOnBlur: true,\r\n\r\n    /** @description whether to allow multiple items to be selected */\r\n    multiple: false,\r\n    /** @description max number of items that can be selected */\r\n    maxItems: 9999,\r\n    /** @description if element is an input, and in multiple mode, character that separates the values */\r\n    multipleSeparator: ',',\r\n\r\n    /** @description placeholder text to show in generated input */\r\n    placeholder: 'Type to search...',\r\n    /** @description text to show (and announce) if no results found */\r\n    noResultsText: 'No results',\r\n\r\n    /** @description class name to add to list */\r\n    listClassName: '',\r\n    /** @description class name to add to input */\r\n    inputClassName: '',\r\n    /** @description class name to add to component wrapper */\r\n    wrapperClassName: 'form-control',\r\n    /** @description string to use in front of main classes that are used */\r\n    cssNameSpace: 'aria-autocomplete',\r\n\r\n    /** @description when source is a string, param to use when adding input value */\r\n    asyncQueryParam: 'q',\r\n    /** @description when source is a string, param to use when adding results limit */\r\n    asyncMaxResultsParam: 'limit',\r\n\r\n    /** @description in multi mode, screen reader text used for element deletion - prepended to label */\r\n    srDeleteText: 'delete',\r\n    /** @description in multi mode, screen reader text announced after deletion - appended to label */\r\n    srDeletedText: 'deleted',\r\n    /** @description screen reader text announced after selection - appended to label */\r\n    srSelectedText: 'selected',\r\n    /** @description screen reader explainer added to the list element via aria-label attribute */\r\n    srExplanatoryText: 'Search suggestions',\r\n    /** @description screen reader description used for main input when empty */\r\n    srAssistiveText:\r\n        'When autocomplete results are available use up and down arrows to review and enter to select. ' +\r\n        'Touch device users, explore by touch or with swipe gestures.',\r\n    /** @description screen reader announcement after results are rendered */\r\n    srResultsText: length =>\r\n        `${length} ${length === 1 ? 'result' : 'results'} available.`,\r\n\r\n    /** @description callback after async call completes - can be used to format the results */\r\n    onAsyncSuccess: undefined, //  to needed format (onResponse can also be used for this)\r\n    /** @description callback prior to rendering - can be used to format the results */\r\n    onResponse: undefined, // before response is processed and rendered - can be used to modify results\r\n    /** @description callback before search is performed - can be used to affect search value */\r\n    onSearch: undefined,\r\n    /** @description callback after selection is made */\r\n    onSelect: undefined,\r\n    /** @description callback when main script processing and initial rendering has finished */\r\n    onReady: undefined,\r\n    /** @description callback when list area closes */\r\n    onClose: undefined,\r\n    /** @description callback when list area opens */\r\n    onOpen: undefined\r\n};\r\n\r\nclass AriaAutocomplete {\r\n    /**\r\n     * @param {Element} element\r\n     * @param {Object=} options\r\n     */\r\n    constructor(element, options) {\r\n        // fail silently if no list provided\r\n        if (!element) {\r\n            return;\r\n        }\r\n\r\n        // if instance already exists on the list element, do not re-initialise\r\n        if (element.ariaAutocomplete) {\r\n            return element.ariaAutocomplete;\r\n        }\r\n\r\n        appIndex += 1;\r\n        this.element = element;\r\n        this.elementIsInput = element.nodeName === 'INPUT';\r\n        this.elementIsSelect = element.nodeName === 'SELECT';\r\n\r\n        // ids used for DOM queries and accessibility attributes e.g. aria-controls\r\n        this.ids = {};\r\n        this.ids.ELEMENT = element.id;\r\n        this.ids.PREFIX = `${element.id || ''}aria-autocomplete-${appIndex}`;\r\n        this.ids.LIST = `${this.ids.PREFIX}-list`;\r\n        this.ids.INPUT = `${this.ids.PREFIX}-input`;\r\n        this.ids.BUTTON = `${this.ids.PREFIX}-button`;\r\n        this.ids.OPTION = `${this.ids.PREFIX}-option`;\r\n        this.ids.WRAPPER = `${this.ids.PREFIX}-wrapper`;\r\n        this.ids.OPTION_SELECTED = `${this.ids.OPTION}-selected`;\r\n        this.ids.OPTION_SELECTED = `${this.ids.OPTION}-selected`;\r\n        this.ids.SR_ASSISTANCE = `${this.ids.PREFIX}-sr-assistance`;\r\n        this.ids.SR_ANNOUNCEMENTS = `${this.ids.PREFIX}-sr-announcements`;\r\n\r\n        // always have an id on the original element for caching state\r\n        if (!this.ids.ELEMENT) {\r\n            this.ids.ELEMENT = `${this.ids.PREFIX}-element`;\r\n            this.element.setAttribute('id', this.ids.ELEMENT);\r\n        }\r\n\r\n        // vars defined later - elements\r\n        this.list;\r\n        this.input;\r\n        this.wrapper;\r\n        this.showAll;\r\n        this.srAnnouncements;\r\n\r\n        // vars defined later - non elements\r\n        this.xhr;\r\n        this.term;\r\n        this.async;\r\n        this.source;\r\n        this.menuOpen;\r\n        this.multiple;\r\n        this.selected;\r\n        this.disabled;\r\n        this.filtering;\r\n        this.cssNameSpace;\r\n        this.forceShowAll;\r\n        this.filteredSource; // filtered source items to render\r\n        this.currentListHtml;\r\n        this.currentSelectedIndex; // for storing index of currently focused option\r\n\r\n        // timers\r\n        this.filterTimer;\r\n        this.announcementTimer;\r\n        this.componentBlurTimer;\r\n        this.elementChangeEventTimer;\r\n\r\n        this.options = mergeObjects(DEFAULT_OPTIONS, options);\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * trigger callbacks included in component options\r\n     * @param {String} name\r\n     * @param {Array=} args\r\n     */\r\n    triggerOptionCallback(name, args) {\r\n        if (typeof this.options[name] === 'function') {\r\n            return this.options[name].apply(this.wrapper, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description show element with CSS only - if none provided, set list state to visible\r\n     * @param {Element=} element\r\n     */\r\n    show(element) {\r\n        if (typeof element !== 'undefined') {\r\n            let toRemove = `${this.cssNameSpace}--hide hide hidden`;\r\n            removeClass(element, toRemove);\r\n            return element.removeAttribute('hidden');\r\n        }\r\n\r\n        this.input.setAttribute('aria-expanded', 'true');\r\n        if (this.showAll) {\r\n            let expanded = (!!this.forceShowAll).toString();\r\n            this.showAll.setAttribute('aria-expanded', expanded);\r\n        }\r\n        if (!this.menuOpen) {\r\n            this.show(this.list);\r\n            this.menuOpen = true;\r\n            this.triggerOptionCallback('onOpen', [this.list]);\r\n        }\r\n    }\r\n    /**\r\n     * @description hide element with CSS only - if none provided, set list state to hidden\r\n     * @param {Element=} element\r\n     */\r\n    hide(element) {\r\n        if (typeof element !== 'undefined') {\r\n            addClass(element, `${this.cssNameSpace}--hide hide hidden`);\r\n            return element.setAttribute('hidden', 'hidden');\r\n        }\r\n\r\n        this.currentSelectedIndex = -1;\r\n        this.input.setAttribute('aria-expanded', 'false');\r\n        if (this.showAll) {\r\n            this.showAll.setAttribute('aria-expanded', 'false');\r\n        }\r\n        if (this.menuOpen) {\r\n            this.hide(this.list);\r\n            this.menuOpen = false;\r\n            this.triggerOptionCallback('onClose', [this.list]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description enable autocomplete (e.g. when under maxItems selected)\r\n     */\r\n    enable() {\r\n        if (this.disabled) {\r\n            this.disabled = false;\r\n            this.input.disabled = false;\r\n            let n = this.cssNameSpace;\r\n            removeClass(this.input, `${n}__input--disabled disabled`);\r\n            removeClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '0');\r\n                removeClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description disable autocomplete (e.g. when maxItems selected)\r\n     */\r\n    disable() {\r\n        if (!this.disabled) {\r\n            this.disabled = true;\r\n            this.input.disabled = true;\r\n            let n = this.cssNameSpace;\r\n            addClass(this.input, `${n}__input--disabled disabled`);\r\n            addClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '-1');\r\n                addClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description check if current input value is contained in a selection of options\r\n     * @param {String} query - string to use - checks input value otherwise\r\n     * @param {Array} options - array of objects with value and label properties\r\n     * @param {String=} prop - prop to check against in options array - defaults to 'label'\r\n     * @returns {Number} index of array entry that matches, or -1 if none found\r\n     */\r\n    isQueryContainedIn(query, options, prop) {\r\n        query = trimString(query || this.input.value).toLowerCase();\r\n        if (query) {\r\n            prop = prop || 'label';\r\n            for (let i = 0, l = options.length; i < l; i += 1) {\r\n                if (trimString(options[i][prop]).toLowerCase() === query) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * @description make a screen reader announcement\r\n     * @param {String} text\r\n     * @param {Number=} delay\r\n     */\r\n    announce(text, delay) {\r\n        if (!text || !this.srAnnouncements) {\r\n            return;\r\n        }\r\n        // in immediate case, do not user timer\r\n        if (delay === 0) {\r\n            return (this.srAnnouncements.textContent = text);\r\n        }\r\n        delay = typeof delay === 'number' ? delay : 400;\r\n        if (this.announcementTimer) {\r\n            clearTimeout(this.announcementTimer);\r\n        }\r\n        this.announcementTimer = setTimeout(() => {\r\n            this.srAnnouncements.textContent = text;\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @todo: implement this!\r\n     */\r\n    buildMultiSelected() {}\r\n\r\n    /**\r\n     * @description set the aria-describedby attribute on the input\r\n     */\r\n    setInputDescription() {\r\n        let exists = this.input.getAttribute('aria-describedby');\r\n        let current = trimString(exists || '');\r\n        let describedBy = current.replace(this.ids.SR_ASSISTANCE, '');\r\n\r\n        if (this.input.value.length === 0) {\r\n            describedBy = describedBy + ' ' + this.ids.SR_ASSISTANCE;\r\n        }\r\n\r\n        // set or remove attribute, but only if necessary\r\n        if ((describedBy = trimString(describedBy))) {\r\n            if (describedBy !== current) {\r\n                this.input.setAttribute('aria-describedby', describedBy);\r\n            }\r\n        } else if (exists) {\r\n            this.input.removeAttribute('aria-describedby');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description reset classes and aria-selected attribute for all visible filtered options\r\n     */\r\n    resetOptionAttributes() {\r\n        let cssName = this.cssNameSpace;\r\n        let nodes = this.list.childNodes;\r\n        let l = nodes.length;\r\n\r\n        while (l--) {\r\n            removeClass(nodes[l], `${cssName}__option--focused focused focus`);\r\n            nodes[l].setAttribute('aria-selected', 'false');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description move focus to correct option, or to input (on up and down arrows)\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     */\r\n    setOptionFocus(event, index) {\r\n        // set aria-selected to false and remove focused class\r\n        this.resetOptionAttributes();\r\n\r\n        // if negative index, or no options available, focus on input\r\n        let options = this.list.childNodes;\r\n        if (index < 0 || !options || !options.length) {\r\n            this.currentSelectedIndex = -1;\r\n            // focus on input, only if event was from another element\r\n            if (event && event.target !== this.input) {\r\n                this.input.focus();\r\n            }\r\n            return;\r\n        }\r\n\r\n        // down arrow on/past last option, focus on last item\r\n        if (index >= options.length) {\r\n            this.currentSelectedIndex = options.length - 1;\r\n            this.setOptionFocus(event, this.currentSelectedIndex);\r\n            return;\r\n        }\r\n\r\n        // if option found, focus...\r\n        let toFocus = options[index];\r\n        if (toFocus && typeof toFocus.getAttribute('tabindex') === 'string') {\r\n            this.currentSelectedIndex = index;\r\n            let toAdd = `${this.cssNameSpace}__option--focused focused focus`;\r\n            addClass(toFocus, toAdd);\r\n            toFocus.setAttribute('aria-selected', 'true');\r\n            toFocus.focus();\r\n            return;\r\n        }\r\n\r\n        // reset index just in case\r\n        this.currentSelectedIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * @description set values and dispatch events based on any DOM elements in the selected array\r\n     */\r\n    setSourceElementValues() {\r\n        let valToSet = [];\r\n        for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n            let entry = this.selected[i];\r\n            valToSet.push(entry.value);\r\n            setElementState(entry.element, true, this); // element processing\r\n        }\r\n\r\n        // set original input value\r\n        if (this.elementIsInput) {\r\n            let valToSetString = valToSet.join(this.options.multipleSeparator);\r\n            if (valToSetString !== this.element.value) {\r\n                this.element.value = valToSetString;\r\n                dispatchEvent(this.element, 'change');\r\n            }\r\n        }\r\n\r\n        // included in case of multi-select mode used with a <select> element as the source\r\n        if (!this.selected.length && this.elementIsSelect) {\r\n            this.element.value = '';\r\n        }\r\n\r\n        // set disabled state as needed\r\n        if (this.multiple && this.selected.length >= this.options.maxItems) {\r\n            return this.disable();\r\n        }\r\n        this.enable();\r\n    }\r\n\r\n    /**\r\n     * @description select option from the list by index\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     * @param {Boolean} focusAfterSelection\r\n     */\r\n    handleOptionSelect(event, index, focusAfterSelection) {\r\n        // defensive check for proper index, that the filteredSource exists, and not exceed max items option\r\n        if (\r\n            typeof index !== 'number' ||\r\n            index < 0 ||\r\n            (this.multiple && this.selected.length >= this.options.maxItems) ||\r\n            !this.filteredSource.length ||\r\n            !this.filteredSource[index]\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // generate new object from the selected item in case of varying original source\r\n        /** @todo: confirm if a new object actually needs to be generated */\r\n        let option = mergeObjects(this.filteredSource[index]);\r\n\r\n        // detect if selected option is already in selected array\r\n        let l = this.selected.length;\r\n        let alreadySelected = false;\r\n        while (l--) {\r\n            if (this.selected[l].value === option.value) {\r\n                alreadySelected = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.input.value = this.multiple ? '' : option.label;\r\n\r\n        // reset selected array in single select mode\r\n        if (!alreadySelected && !this.multiple) {\r\n            this.selected = [];\r\n        }\r\n\r\n        // (re)set values of any DOM elements based on selected array\r\n        if (!alreadySelected) {\r\n            this.selected.push(option);\r\n            this.setSourceElementValues();\r\n            this.buildMultiSelected(option); // rebuild multi-selected if needed\r\n        }\r\n\r\n        this.triggerOptionCallback('onSelect', [option]);\r\n        this.announce(`${option.label} ${this.options.srSelectedText}`, 0);\r\n\r\n        // return focus to input\r\n        if (!this.disabled && focusAfterSelection !== false) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // close menu after option selection, and after returning focus to input\r\n        this.hide();\r\n    }\r\n\r\n    /**\r\n     * @description remove selected entries from results if in multiple mode\r\n     * @param {Array} results\r\n     * @returns {Array}\r\n     */\r\n    removeSelectedFromResults(results) {\r\n        if (!this.multiple || !this.selected.length) {\r\n            return results;\r\n        }\r\n        let toReturn = [];\r\n        resultsLoop: for (let i = 0, l = results.length; i < l; i += 1) {\r\n            let selected = this.selected;\r\n            let result = results[i];\r\n            for (let j = 0, k = selected.length; j < k; j += 1) {\r\n                let labelMatch = result.label === selected[j].label;\r\n                if (labelMatch && result.value === selected[j].value) {\r\n                    continue resultsLoop;\r\n                }\r\n            }\r\n            toReturn.push(thisResult);\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * @description final filtering and render for list options, and render\r\n     * @param {Array} results\r\n     */\r\n    setListOptions(results) {\r\n        let toShow = [];\r\n        let optionId = this.ids.OPTION;\r\n        let cssName = this.cssNameSpace;\r\n        // if in multiple mode, exclude items already in the selected array\r\n        let updated = this.removeSelectedFromResults(results);\r\n        // allow callback to alter the response before rendering\r\n        let callback = this.triggerOptionCallback('onResponse', updated);\r\n\r\n        // now commit to setting the filtered source\r\n        this.filteredSource = callback ? processSourceArray(callback) : updated;\r\n        let length = this.filteredSource.length;\r\n\r\n        // build up the list html\r\n        let maxResults = this.options.maxResults;\r\n        for (let i = 0; i < length && i < maxResults; i += 1) {\r\n            toShow.push(\r\n                `<li tabindex=\"-1\" aria-selected=\"false\" role=\"option\" class=\"${cssName}__option\" id=\"${optionId}--${i}\" aria-posinset=\"${i +\r\n                    1}\" aria-setsize=\"${length}\">${\r\n                    this.filteredSource[i].label\r\n                }</li>`\r\n            );\r\n        }\r\n\r\n        // set has-results or no-results class on the list element\r\n        if (toShow.length) {\r\n            addClass(this.list, `${cssName}__list--has-results`);\r\n            removeClass(this.list, `${cssName}__list--no-results`);\r\n        } else {\r\n            removeClass(this.list, `${cssName}__list--has-results`);\r\n            addClass(this.list, `${cssName}__list--no-results`);\r\n        }\r\n\r\n        // no results text handling\r\n        let announce;\r\n        let noText = this.options.noResultsText;\r\n        if (!toShow.length && typeof noText === 'string' && noText.length) {\r\n            announce = noResults;\r\n            let optionClass = `${cssName}__option`;\r\n            toShow.push(\r\n                `<li class=\"${optionClass} ${optionClass}--no-results\">${noText}</li>`\r\n            );\r\n        }\r\n\r\n        // remove loading class(es) and reset variables\r\n        this.cancelFilterPrep();\r\n\r\n        // announce to screen reader\r\n        if (!announce) {\r\n            announce = this.triggerOptionCallback('srResultsText', [length]);\r\n        }\r\n        this.announce(announce);\r\n\r\n        // render the list, only if we have to\r\n        // time taken for string comparison is worth it to not have to re-parse and re-render the list\r\n        let newListHtml = toShow.join('');\r\n        if (this.currentListHtml !== newListHtml) {\r\n            this.currentListHtml = newListHtml;\r\n            /** @todo: test innerHTML vs insertAdjacentHtml performance in old IE */\r\n            this.list.innerHTML = newListHtml;\r\n        } else {\r\n            // if list html matches, and not re-rendered, clear aria-selected and focus classes\r\n            this.resetOptionAttributes();\r\n        }\r\n\r\n        // if toShow array is empty, make sure not to render the menu\r\n        if (!toShow.length) {\r\n            this.hide();\r\n            return;\r\n        }\r\n\r\n        this.show();\r\n        // reset forceShowAll must be after .show()\r\n        // aria-expanded attribute on showAllButton is controlled in .show() method\r\n        this.forceShowAll = false;\r\n    }\r\n\r\n    /**\r\n     * @description trigger async call for options to render\r\n     * @param {String} value\r\n     * @param {Boolean=} canCancel\r\n     */\r\n    handleAsync(value, canCancel = true) {\r\n        let options = this.options;\r\n        let xhr = new XMLHttpRequest();\r\n        let encode = encodeURIComponent;\r\n        let isShowAll = this.forceShowAll;\r\n        let limit = this.selected.length + options.maxResults;\r\n        let limitParam = `${encode(options.asyncMaxResultsParam)}=${limit}`;\r\n        let queryParam = `${encode(options.asyncQueryParam)}=${encode(value)}`;\r\n        let params = `${queryParam}&${limitParam}`;\r\n        let url = this.source + (/\\?/.test(this.source) ? '&' : '?') + params;\r\n\r\n        // abort any current call first\r\n        if (this.xhr) {\r\n            this.xhr.abort();\r\n        }\r\n\r\n        xhr.open('GET', url);\r\n        xhr.onload = () => {\r\n            this.forceShowAll = isShowAll; // return forceShowAll to previous state before the options render\r\n            let callback = this.triggerOptionCallback('onAsyncSuccess', [xhr]);\r\n            let items = processSourceArray(callback || xhr.responseText, false);\r\n            this.setListOptions(items);\r\n        };\r\n        xhr.send();\r\n\r\n        // allow the creation of an uncancellable call to use on first load\r\n        if (canCancel !== false) {\r\n            this.xhr = xhr;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description trigger filtering using a value\r\n     * @param {String} value\r\n     */\r\n    filter(value) {\r\n        // fail silently if no value is provided\r\n        if (typeof value === 'undefined') {\r\n            this.cancelFilterPrep();\r\n            return;\r\n        }\r\n\r\n        let forceShowAll = this.forceShowAll;\r\n        let callbackResponse = this.triggerOptionCallback('onSearch', [value]);\r\n        let toReturn = [];\r\n\r\n        // allow onSearch callback to affect the searched value\r\n        // only permitted when not a forceShowAll case\r\n        if (!forceShowAll && typeof callbackResponse === 'string') {\r\n            value = callbackResponse;\r\n        }\r\n\r\n        // store search term - used for comparison in filterPrep\r\n        this.term = value;\r\n\r\n        // async handling\r\n        if (this.async) {\r\n            this.handleAsync(value);\r\n            // set show all to false immediately as may be used in other places\r\n            this.forceShowAll = false;\r\n            return;\r\n        }\r\n\r\n        // handle the source as a function\r\n        if (typeof this.source === 'function') {\r\n            toReturn = this.source.call(this.wrapper, this.term);\r\n            this.setListOptions(toReturn);\r\n            return;\r\n        }\r\n\r\n        // if empty string, show all\r\n        if (!value) {\r\n            forceShowAll = true;\r\n        }\r\n\r\n        // existing list handling\r\n        if (this.source && this.source.length) {\r\n            if (!forceShowAll) {\r\n                value = cleanString(value);\r\n            }\r\n            for (let i = 0, l = this.source.length; i < l; i += 1) {\r\n                let entry = this.source[i];\r\n                if (forceShowAll || entry.cleanedLabel.search(value) !== -1) {\r\n                    toReturn.push({\r\n                        element: entry.element,\r\n                        staticSourceIndex: i,\r\n                        label: entry.label,\r\n                        value: entry.value\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setListOptions(toReturn);\r\n    }\r\n\r\n    /**\r\n     * @description cancel filter timer and remove loading classes\r\n     */\r\n    cancelFilterPrep() {\r\n        if (this.filterTimer) {\r\n            clearTimeout(this.filterTimer);\r\n        }\r\n        let nameSpace = this.cssNameSpace;\r\n        removeClass(this.wrapper, `${nameSpace}__wrapper--loading loading`);\r\n        removeClass(this.input, `${nameSpace}__input--loading loading`);\r\n        this.filtering = false;\r\n    }\r\n\r\n    /**\r\n     * @description checks before filtering, and set filter timer\r\n     * @param {Event} e\r\n     * @param {Boolean=} doValueOverrideCheck - whether to check input value against selected item(s)\r\n     * @param {Boolean=} runNow\r\n     */\r\n    filterPrep(e, doValueOverrideCheck = false, runNow = false) {\r\n        let forceShowAll = this.forceShowAll;\r\n        let delay = forceShowAll || runNow ? 0 : this.options.delay;\r\n\r\n        // clear timers\r\n        this.filtering = true;\r\n        this.cancelFilterPrep();\r\n        this.filterTimer = setTimeout(() => {\r\n            let value = this.input.value;\r\n            // treat as empty search if...\r\n            // forceShowAll, or in single mode and selected item label matches current value\r\n            if (\r\n                forceShowAll ||\r\n                value === '' ||\r\n                (doValueOverrideCheck &&\r\n                    !this.multiple &&\r\n                    this.selected.length &&\r\n                    trimString(this.selected[0].label) === trimString(value))\r\n            ) {\r\n                value = '';\r\n            }\r\n\r\n            // handle aria-describedby\r\n            this.setInputDescription();\r\n\r\n            if (!forceShowAll && value.length < this.options.minLength) {\r\n                this.hide();\r\n                return;\r\n            }\r\n\r\n            // try catch used due to permissions issues in some cases\r\n            let modifier;\r\n            try {\r\n                let keydown = e && e.type === 'keydown';\r\n                modifier = keydown && (e.altKey || e.ctrlKey || e.metaKey); // allow shift key, just in case...\r\n            } catch (e) {}\r\n\r\n            // if value to use matches last used search term, do nothing\r\n            let equalVals = value === this.term;\r\n\r\n            // prevent search being run again with the same value\r\n            if (!equalVals || (equalVals && !this.menuOpen && !modifier)) {\r\n                let n = this.cssNameSpace;\r\n                addClass(this.wrapper, `${n}__wrapper--loading loading`);\r\n                addClass(this.input, `${n}__input--loading loading`);\r\n                this.currentSelectedIndex = -1;\r\n                this.filter(value);\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description trigger filter prep in showAll mode\r\n     * @param {Event} event\r\n     */\r\n    filterPrepShowAll(event) {\r\n        event.preventDefault();\r\n        this.forceShowAll = true;\r\n        this.filterPrep(event, false, true);\r\n    }\r\n\r\n    /**\r\n     * @description blur behaviour for hiding list and removing focus class(es)\r\n     * @param {Event} event\r\n     * @param {Boolean} force - fire instantly and force blurring out of the component\r\n     */\r\n    handleComponentBlur(event, force) {\r\n        let delay = forceClose ? 0 : 100;\r\n        if (this.componentBlurTimer) {\r\n            clearTimeout(this.componentBlurTimer);\r\n        }\r\n        // use a timeout to ensure this blur fires after other focus events\r\n        // and in case the user focuses back in immediately\r\n        this.componentBlurTimer = setTimeout(() => {\r\n            // do nothing if blurring to an element within the list\r\n            let activeElem = document.activeElement;\r\n            // exception for show all button\r\n            /** @todo: exception for selected items */\r\n            if (!force && !(this.showAll && this.showAll === activeElem)) {\r\n                // must base this on the wrapper to allow scrolling the list in IE\r\n                if (this.wrapper.contains(activeElem)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            let isQueryIn = this.isQueryContainedIn;\r\n\r\n            // cancel any running async call\r\n            if (this.xhr) {\r\n                this.xhr.abort();\r\n            }\r\n\r\n            // confirmOnBlur behaviour\r\n            if (!force && this.options.confirmOnBlur && this.menuOpen) {\r\n                // if blurring from an option (currentSelectedIndex > -1), select it\r\n                let toUse = this.currentSelectedIndex;\r\n                if (typeof toUse !== 'number' || toUse === -1) {\r\n                    // otherwise check for exact match between current input value and available items\r\n                    toUse = isQueryIn('', this.filteredSource);\r\n                }\r\n                this.handleOptionSelect({}, toUse, false);\r\n            }\r\n\r\n            let n = this.cssNameSpace;\r\n            removeClass(this.wrapper, `${n}__wrapper--focused focused focus`);\r\n            removeClass(this.input, `${n}__input--focused focused focus`);\r\n            this.cancelFilterPrep();\r\n            this.hide();\r\n\r\n            // in single select case, if current value and chosen value differ, clear selected and input value\r\n            if (!this.multiple && isQueryIn('', this.selected) === -1) {\r\n                let isInputOrDdl = this.elementIsInput || this.elementIsSelect;\r\n                if (isInputOrDdl && this.element.value !== '') {\r\n                    this.element.value = '';\r\n                    dispatchEvent(this.element, 'change');\r\n                }\r\n                this.input.value = '';\r\n                this.selected = [];\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description enter keydown for selections\r\n     * @param {Event} event\r\n     */\r\n    handleEnterKey(event) {\r\n        /** @todo: if in multiple mode, and event target was a selected item, remove it */\r\n        if (this.multiple) {\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (this.showAll && event.target === this.showAll) {\r\n            this.filterPrepShowAll(event);\r\n            return;\r\n        }\r\n\r\n        if (this.menuOpen) {\r\n            event.preventDefault();\r\n            if (this.currentSelectedIndex > -1) {\r\n                this.handleOptionSelect(event, this.currentSelectedIndex);\r\n            }\r\n        }\r\n\r\n        // if enter keypress was from the filter input, trigger search immediately\r\n        if (event.target === this.input) {\r\n            this.filterPrep(event, false, true);\r\n        }\r\n    }\r\n    /**\r\n     * @description down arrow usage - option focus, or search all\r\n     * @param {Event} event\r\n     */\r\n    handleDownArrowKey(event) {\r\n        event.preventDefault();\r\n        // if closed, and text is long enough, run search\r\n        if (!this.menuOpen) {\r\n            this.forceShowAll = this.options.minLength < 1;\r\n            if (\r\n                this.forceShowAll ||\r\n                this.input.value.length >= this.options.minLength\r\n            ) {\r\n                this.filterPrep(event);\r\n            }\r\n        }\r\n        // move focus to downward option\r\n        if (this.menuOpen && !this.filtering) {\r\n            let current = this.currentSelectedIndex;\r\n            if (typeof current !== 'number' || current < 0) {\r\n                this.setOptionFocus(event, 0);\r\n            } else {\r\n                this.setOptionFocus(event, current + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description up arrow usage - option focus, or return focus to input\r\n     * @param {Event} event\r\n     */\r\n    handleUpArrowKey(event) {\r\n        event.preventDefault();\r\n        let usable = !this.disabled && this.menuOpen;\r\n        if (usable && typeof this.currentSelectedIndex === 'number') {\r\n            this.setOptionFocus(event, this.currentSelectedIndex - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description standard keydown handling (excluding enter, up, down, escape)\r\n     * @param {Event} event\r\n     */\r\n    handleKeyDownDefault(event) {\r\n        const targetIsInput = event.target === this.input;\r\n        // on space, if focus state is on any other item, treat as enter\r\n        if (event.keyCode === 32 && !targetIsInput) {\r\n            this.handleEnterKey(event);\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        // on backspace, if using empty input in multiple mode, delete last selected entry\r\n        let selectedLength = this.selected && this.selected.length;\r\n        if (\r\n            targetIsInput &&\r\n            this.multiple &&\r\n            selectedLength &&\r\n            event.keyCode === 8 &&\r\n            this.input.value === ''\r\n        ) {\r\n            let lastSelectedLabel = this.selected[selectedLength - 1].label;\r\n            let announcement = `${lastSelectedLabel} ${this.options.srDeletedText}`;\r\n            this.announce(announcement, 0);\r\n            this.selected.pop();\r\n            this.buildMultiSelected();\r\n            return;\r\n        }\r\n\r\n        // any printable character not on input, return focus to input\r\n        let focusInput = !targetIsInput && isPrintableKey(event.keyCode);\r\n        if (focusInput) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // trigger filtering - done here, instead of using input event, due to IE9 issues\r\n        if (focusInput || targetIsInput) {\r\n            this.filterPrep(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description component keydown handling\r\n     * @param {Event} event\r\n     */\r\n    prepKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 13: // on enter\r\n                this.handleEnterKey(event);\r\n                break;\r\n            case 27: // on escape\r\n                this.handleComponentBlur(event, true);\r\n                break;\r\n            case 38: // on up\r\n                this.handleUpArrowKey(event);\r\n                break;\r\n            case 40: // on down\r\n                this.handleDownArrowKey(event);\r\n                break;\r\n            default:\r\n                this.handleKeyDownDefault(event);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description bind component events to generated elements\r\n     */\r\n    bindEvents() {\r\n        // when focus is moved outside of the component, close everything\r\n        this.wrapper.addEventListener('focusout', event => {\r\n            this.handleComponentBlur(event, false);\r\n        });\r\n        // set wrapper focus state\r\n        this.wrapper.addEventListener('focusin', event => {\r\n            let toAdd = `${this.cssNameSpace}__wrapper--focused focused focus`;\r\n            addClass(this.wrapper, toAdd);\r\n            if (!this.list.contains(event.target)) {\r\n                this.currentSelectedIndex = -1;\r\n            }\r\n        });\r\n        // handle all keydown events inside the component\r\n        this.wrapper.addEventListener('keydown', event => {\r\n            this.prepKeyDown(event);\r\n        });\r\n        // if clicking directly on the wrapper, move focus to the input\r\n        this.wrapper.addEventListener('click', event => {\r\n            if (event.target === this.wrapper) {\r\n                this.input.focus();\r\n            }\r\n        });\r\n\r\n        // when blurring out of input, check current value against selected one and clear if needed\r\n        this.input.addEventListener('blur', () => {\r\n            let toRemove = `${this.cssNameSpace}__input--focused focused focus`;\r\n            removeClass(this.input, toRemove);\r\n        });\r\n        // trigger filter on input event as well as keydown (covering bases)\r\n        this.input.addEventListener('input', event => {\r\n            this.filterPrep(event);\r\n        });\r\n        // when specifically clicking on input, if menu is closed, and value is long enough, search\r\n        this.input.addEventListener('click', event => {\r\n            let open = this.menuOpen;\r\n            if (!open && this.input.value.length >= this.options.minLength) {\r\n                this.filterPrep(event, true);\r\n            }\r\n        });\r\n        // when focusing on input, reset selected index and trigger search handling\r\n        this.input.addEventListener('focusin', () => {\r\n            let toAdd = `${this.cssNameSpace}__input--focused focused focus`;\r\n            addClass(instance.input, toAdd);\r\n            if (!this.disabled && !this.menuOpen) {\r\n                instance.filterPrep(event, true);\r\n            }\r\n        });\r\n\r\n        // show all button click\r\n        if (this.showAll) {\r\n            this.showAll.addEventListener('click', event => {\r\n                this.filterPrepShowAll(event);\r\n            });\r\n        }\r\n\r\n        // clear any current focus position when hovering into the list\r\n        this.list.addEventListener('mouseenter', event => {\r\n            this.resetOptionAttributes();\r\n        });\r\n        // trigger options selection\r\n        this.list.addEventListener('click', event => {\r\n            if (event.target !== this.list) {\r\n                let childNodes = this.list.childNodes;\r\n                if (childNodes.length) {\r\n                    let nodeIndex = [].indexOf.call(childNodes, event.target);\r\n                    this.handleOptionSelect(event, nodeIndex);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on child checkboxes\r\n     */\r\n    prepListSourceCheckboxes() {\r\n        this.multiple = true; // force multiple in this case\r\n        // reset source and use checkboxes\r\n        this.source = [];\r\n        let elements = this.element.querySelectorAll('input[type=\"checkbox\"]');\r\n        for (let i = 0, l = elements.length; i < l; i += 1) {\r\n            let checkbox = elements[i];\r\n            // must have a value other than empty string\r\n            if (!checkbox.value) {\r\n                continue;\r\n            }\r\n            let toPush = { element: checkbox, value: checkbox.value };\r\n            // label searching\r\n            let label = checkbox.closest('label');\r\n            if (!label && checkbox.id) {\r\n                label = document.querySelector('[for=\"' + node.id + '\"]');\r\n            }\r\n            if (label) {\r\n                toPush.label = label.textContent;\r\n            }\r\n            // if no label so far, re-use value\r\n            if (!toPush.label) {\r\n                toPush.label = toPush.value;\r\n            }\r\n            toPush.cleanedLabel = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (node.checked) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on <select> options\r\n     */\r\n    prepListSourceDdl() {\r\n        this.multiple = this.element.multiple; // force multiple to match select\r\n        // reset source and use options\r\n        this.source = [];\r\n        let options = this.element.querySelectorAll('option');\r\n        for (let i = 0, l = options.length; i < l; i += 1) {\r\n            let option = options[i];\r\n            // must have a value other than empty string\r\n            if (!option.value) {\r\n                continue;\r\n            }\r\n            let toPush = {\r\n                element: option,\r\n                value: option.value,\r\n                label: option.textContent\r\n            };\r\n            toPush.cleanedLabel = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (node.selected) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust starting source array to format needed, and set selected\r\n     */\r\n    prepListSourceArray() {\r\n        this.source = processSourceArray(this.source);\r\n\r\n        // build up selected array if starting element was an input, and had a value\r\n        if (this.elementIsInput && this.element.value) {\r\n            let value = this.element.value;\r\n\r\n            // account for multiple mode\r\n            let multiple = this.options.multiple;\r\n            let separator = this.options.multipleSeparator;\r\n            let valueArr = multiple ? value.split(separator) : [value];\r\n\r\n            for (let i = 0, l = valueArr.length; i < l; i += 1) {\r\n                let val = valueArr[i];\r\n                let isQueryIn = this.isQueryContainedIn;\r\n                // make sure it is not already in the selected array\r\n                let isInSelected = isQueryIn(val, this.selected, 'value') > -1;\r\n\r\n                // but is in the source array (check via 'value', not 'label')\r\n                if (!isInSelected) {\r\n                    let indexInSource = isQueryIn(val, this.source, 'value');\r\n                    if (indexInSource > -1) {\r\n                        this.selected.push(this.source[indexInSource]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust set sources to needed format\r\n     */\r\n    prepListSource() {\r\n        this.async = false;\r\n\r\n        // allow complete control over the source handling via custom function\r\n        if (typeof this.source === 'function') {\r\n            return;\r\n        }\r\n\r\n        // string source - treat as async endpoint\r\n        if (typeof this.source === 'string' && this.source.length) {\r\n            return (this.async = true);\r\n        }\r\n\r\n        // array source - copy array\r\n        if (Array.isArray(this.source) && this.source.length) {\r\n            return this.prepListSourceArray();\r\n        }\r\n\r\n        // dropdown source\r\n        if (this.elementIsSelect) {\r\n            return this.prepListSourceDdl();\r\n        }\r\n\r\n        // checkboxlist source\r\n        if (this.element.querySelector('input[type=\"checkbox\"]')) {\r\n            this.prepListSourceCheckboxes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set input starting states - aria attributes, disabled state, starting value\r\n     */\r\n    setInputStartingStates() {\r\n        // update corresponding label to now focus on the new input\r\n        let label = document.querySelector('[for=\"' + this.ids.ELEMENT + '\"]');\r\n        if (label) {\r\n            label.ariaAutocompleteOriginalFor = this.ids.ELEMENT;\r\n            label.setAttribute('for', this.ids.INPUT);\r\n        }\r\n\r\n        // update aria-describedby and aria-labelledby attributes if present\r\n        let describedBy = this.element.getAttribute('aria-describedby');\r\n        if (describedBy) {\r\n            this.input.setAttribute('aria-describedby', describedBy);\r\n        }\r\n        let labelledBy = this.element.getAttribute('aria-labelledby');\r\n        if (labelledBy) {\r\n            this.input.setAttribute('aria-labelledby', labelledBy);\r\n        }\r\n\r\n        // if selected item(s) already exists\r\n        if (this.selected.length) {\r\n            // for multi select variant, set selected items\r\n            if (this.multiple) {\r\n                this.buildMultiSelected();\r\n            }\r\n            // for single select variant, set value to match\r\n            else {\r\n                this.input.value = this.selected[0].label || '';\r\n            }\r\n        }\r\n\r\n        // setup input description - done here in case value is affected above\r\n        this.setInputDescription();\r\n\r\n        // disable the control if the invoked element was disabled\r\n        if (!!this.element.disabled) {\r\n            this.disable();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description build and insert component html structure\r\n     */\r\n    setHtml() {\r\n        let o = this.options;\r\n        let cssName = this.cssNameSpace;\r\n        let explainerText = o.srExplanatoryText;\r\n        let listClass = o.listClassName ? ` ${o.listClassName}` : '';\r\n        let inputClass = o.inputClassName ? ` ${o.inputClassName}` : '';\r\n        let wrapperClass = o.wrapperClassName ? ` ${o.wrapperClassName}` : '';\r\n        let explainer = explainerText ? ` aria-label=\"${explainerText}\"` : '';\r\n\r\n        let newHtml = [\r\n            `<div id=\"${this.ids.WRAPPER}\" class=\"${cssName}__wrapper${wrapperClass}\">`\r\n        ];\r\n\r\n        // add input\r\n        newHtml.push(\r\n            `<input type=\"text\" autocomplete=\"off\" aria-expanded=\"false\" aria-autocomplete=\"list\" role=\"combobox\" id=\"${this.ids.INPUT}\" placeholder=\"${this.options.placeholder} aria-owns=\"${this.ids.LIST}\" aria-placeholder=\"${this.options.placeholder} class=\"${cssName}__input${inputClass}\" />`\r\n        );\r\n\r\n        // button to show all available options\r\n        if (this.options.showAll) {\r\n            newHtml.push(\r\n                `<span role=\"button\" aria-label=\"Show all\" class=\"${cssName}__show-all\" tabindex=\"0\" id=\"${this.ids.BUTTON}\" aria-expanded=\"false\"></span>`\r\n            );\r\n        }\r\n        // add the list holder\r\n        newHtml.push(\r\n            `<ul id=\"${this.ids.LIST}\" class=\"${cssName}__list${listClass}\" role=\"listbox\" hidden=\"hidden\"${explainer}></ul>`\r\n        );\r\n        // add the screen reader assistance element\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-assistance\" id=\"${this.ids.SR_ASSISTANCE}\">${this.options.srAssistiveText}</span>`\r\n        );\r\n        // add element for added screen reader announcements\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-announcements\" id=\"${this.ids.SR_ANNOUNCEMENTS}\" aria-live=\"polite\" aria-atomic=\"true\"></span>`\r\n        );\r\n\r\n        // close all and append\r\n        newHtml.push(`</div>`);\r\n        this.element.insertAdjacentHTML('afterend', newHtml.join(''));\r\n    }\r\n\r\n    /**\r\n     * @todo: refresh method for use after changing options, source, etc.\r\n     */\r\n    refresh() {\r\n        let options = mergeObjects(this.options); // store new object from existing options\r\n        /** @todo: soft destroy in this case */\r\n        this.destroy();\r\n        this.options = options;\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * @description destroy component\r\n     */\r\n    destroy() {\r\n        // return original label 'for' attribute back to element id\r\n        let label = document.querySelector('[for=\"' + this.ids.INPUT + '\"]');\r\n        if (label && label.ariaAutocompleteOriginalFor) {\r\n            label.setAttribute('for', label.ariaAutocompleteOriginalFor);\r\n            delete label.ariaAutocompleteOriginalFor;\r\n        }\r\n        // remove the whole wrapper and set all instance properties to null to clean up DOMNode references\r\n        this.element.parentNode.removeChild(this.wrapper);\r\n        for (let i in this) {\r\n            if (this.hasOwnProperty(i)) {\r\n                this[i] = null;\r\n            }\r\n        }\r\n        delete this.element.ariaAutocomplete;\r\n        // re-show original element\r\n        this.show(this.element);\r\n    }\r\n\r\n    /**\r\n     * @description do it!!\r\n     */\r\n    init() {\r\n        this.selected = [];\r\n\r\n        // set these internally so that the component has to be properly refreshed to change them\r\n        this.source = this.options.source;\r\n        this.multiple = this.options.multiple;\r\n        this.cssNameSpace = this.options.cssNameSpace;\r\n\r\n        // create html structure\r\n        this.setHtml();\r\n\r\n        // additional app variables\r\n        this.list = document.getElementById(this.ids.LIST);\r\n        this.input = document.getElementById(this.ids.INPUT);\r\n        this.wrapper = document.getElementById(this.ids.WRAPPER);\r\n        this.showAll = document.getElementById(this.ids.BUTTON);\r\n        this.srAnnouncements = document.getElementById(\r\n            this.ids.SR_ANNOUNCEMENTS\r\n        );\r\n\r\n        // hide element and list manually\r\n        this.hide(this.list); // pass in the list so that the onClose is not triggered\r\n        this.hide(this.element);\r\n\r\n        // set internal source array, from static elements if necessary\r\n        this.prepListSource();\r\n\r\n        // set starting states for input - must be after source has been defined\r\n        this.setInputStartingStates();\r\n\r\n        // bind all necessary events\r\n        this.bindEvents();\r\n\r\n        /** @todo: handling of initial value in async case - other cases handled in setInputStartingStates */\r\n\r\n        /** @todo: store api on original element */\r\n        this.element.ariaAutocomplete = {};\r\n\r\n        // fire onready callback\r\n        this.triggerOptionCallback('onReady');\r\n    }\r\n}\r\n\r\n/**\r\n * @description expose specific function rather than the AriaAutocomplete class\r\n * @param {Element} elem\r\n * @param {Object} options\r\n * @returns {Object}\r\n */\r\nexport default function(elem, options) {\r\n    let autocomplete = new AriaAutocomplete(elem, options);\r\n    return autocomplete.api;\r\n}\r\n"]}