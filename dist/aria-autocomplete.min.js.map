{"version":3,"sources":["closest-polyfill.js","helpers.js","autogrow.js","aria-autocomplete.js"],"names":["Element","prototype","matches","msMatchesSelector","webkitMatchesSelector","closest","s","el","parentElement","parentNode","nodeType","trimString","theString","trim","hasClass","element","className","e","cur","getAttribute","indexOf","addClass","classes","currentValue","current","finalValue","i","cs","split","l","length","setAttribute","removeClass","replace","REGEX_AMPERSAND","REGEX_DUPE_WHITESPACE","REGEX_TO_IGNORE","REGEX_MAKE_SAFE","cleanString","makeSafeForRegex","toLowerCase","isPrintableKey","keyCode","mergeObjects","n","o","p","hasOwnProperty","dispatchEvent","event","document","createEvent","initEvent","fireEvent","setElementState","selected","instance","nodeName","checked","elementChangeEventTimer","clearTimeout","setTimeout","processSourceArray","sourceArray","mapping","setCleanedLabel","toReturn","mapValue","mapLabel","result","entry","value","label","toString","cleanedLabel","push","DIV","createElement","htmlToElement","html","innerHTML","firstChild","setCss","style","transferStyles","from","to","properties","fromStyles","getComputedStyle","styles","testSpan","AutoGrow","input","currentString","eventHandler","currentWidth","init","checkAndSet","call","start","selectionStart","selectionEnd","selection","focus","createRange","selectionLength","text","moveStart","str","position","top","left","width","padding","whiteSpace","body","appendChild","textContent","offsetWidth","clientWidth","metaKey","altKey","placeholder","type","keyCodeIsDelete","keyCodeIsBackspace","getInputSelection","substring","undefined","shift","shiftKey","character","String","fromCharCode","toUpperCase","measureString","removeEventListener","bind","addEventListener","appIndex","DEFAULT_OPTIONS","name","source","sourceMapping","delay","minLength","maxResults","showAllControl","confirmOnBlur","multiple","autoGrow","maxItems","multipleSeparator","deleteOnBackspace","asyncQueryParam","asyncMaxResultsParam","noResultsText","cssNameSpace","listClassName","inputClassName","wrapperClassName","srDeleteText","srDeletedText","srShowAllText","srSelectedText","srListLabelText","srAssistiveText","srResultsText","onAsyncPrep","onAsyncSuccess","onResponse","onSearch","onConfirm","onDelete","onReady","onClose","onOpen","AriaAutocomplete","options","ariaAutocomplete","elementIsInput","elementIsSelect","list","wrapper","showAll","srAnnouncements","ids","xhr","term","async","menuOpen","disabled","filtering","forceShowAll","filteredSource","currentListHtml","inputPollingValue","currentSelectedIndex","documentClick","documentClickBound","filterTimer","pollingTimer","announcementTimer","componentBlurTimer","AutoGrowInput","args","context","api","apply","toRemove","removeAttribute","expanded","show","triggerOptionCallback","hide","trigger","setPollingValue","query","prop","ariaAutocompleteSelectedOption","childNodes","a","isSelectedElem","index","option","splice","buildMultiSelected","announce","disable","enable","currentSelectedElems","getSelectedElems","isInSelected","removeChild","deleteText","fragment","createDocumentFragment","selectedClass","isInDom","span","LIST","id","OPTION_SELECTED","join","toSet","exists","describedBy","SR_ASSISTANCE","cssName","nodes","resetOptionAttributes","target","setOptionFocus","toFocus","toAdd","valToSet","valToSetString","focusAfterSelection","alreadySelected","setInputValue","triggerAutoGrow","setSourceElementValues","results","resultsLoop","j","k","labelMatch","toShow","optionId","OPTION","updated","removeSelectedFromResults","callback","noText","optionClass","cancelFilterPrep","newListHtml","isFirstCall","XMLHttpRequest","encode","encodeURIComponent","isShowAll","unlimited","baseAmount","ampersandOrQuestionMark","test","url","abort","open","onload","readyState","DONE","status","callbackResponse","responseText","items","prepSelectedFromArray","setInputStartingStates","setListOptions","send","handleAsync","search","staticSourceIndex","response","nameSpace","doValueOverrideCheck","runNow","setInputDescription","modifier","ctrlKey","equalVals","filter","showAllPrepTimer","preventDefault","filterPrep","force","activeElem","activeElement","contains","isQueryIn","isQueryContainedIn","toUse","handleOptionSelect","removeEntryFromSelected","filterPrepShowAll","targetIsInput","handleEnterKey","selectedLength","printableKey","focusInput","handleComponentBlur","handleUpArrowKey","handleDownArrowKey","handleKeyDownDefault","startPolling","prepKeyDown","wrapperFocusClasses","inputFocusClasses","cancelPolling","nodeIndex","elements","querySelectorAll","checkbox","toPush","querySelector","separator","valueArr","val","indexInSource","prepListSourceFunction","prepListSourceAsync","Array","isArray","prepListSourceArray","prepListSourceDdl","prepListSourceCheckboxes","setAriaAttrs","ELEMENT","ariaAutocompleteOriginalFor","INPUT","labelledBy","explainerText","listClass","inputClass","wrapperClass","explainer","newHtml","WRAPPER","BUTTON","SR_ANNOUNCEMENTS","insertAdjacentHTML","close","destroy","PREFIX","setHtml","getElementById","prepListSource","generateApi","bindEvents","window","elem"],"mappings":"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","file":"aria-autocomplete.min.js","sourceRoot":"../src","sourcesContent":["if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\nif (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n        var el = this;\n        do { \n            if (el.matches(s)) { \n                return el; \n            } \n            el = el.parentElement || el.parentNode; \n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}","/**\n * @description trim string helper\n * @param {string} theString\n */\nexport function trimString(theString) {\n    return theString == null ? '' : (theString + '').trim();\n}\n\n/**\n * @description check if element has class\n * @param {Element} element - element to check class on\n * @param {String} className\n * @returns {Boolean}\n */\nexport function hasClass(element, className) {\n    let e = element;\n    let cur = trimString(e.getAttribute && e.getAttribute('class'));\n    return ` ${cur} `.indexOf(` ${className} `) > -1;\n}\n\n/**\n * @description add class(es) to element\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to add\n */\nexport function addClass(element, classes) {\n    let currentValue = trimString(\n        element.getAttribute && element.getAttribute('class')\n    );\n    let current = ' ' + currentValue + ' ';\n    let finalValue = '';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        if (cs[i] !== '' && current.indexOf(' ' + cs[i] + ' ') === -1) {\n            finalValue += ' ' + cs[i];\n        }\n    }\n    if (currentValue !== (finalValue = trimString(currentValue + finalValue))) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n/**\n * @description remove class(es) from element\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to remove\n */\nexport function removeClass(element, classes) {\n    let currentValue = trimString(\n        element.getAttribute && element.getAttribute('class')\n    );\n    let finalValue = ' ' + currentValue + ' ';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        finalValue = finalValue.replace(' ' + cs[i] + ' ', ' ');\n    }\n    if (currentValue !== (finalValue = trimString(finalValue))) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n// regex constants used for string cleaning\nconst REGEX_AMPERSAND = /&/g;\nconst REGEX_DUPE_WHITESPACE = /\\s\\s+/g;\nconst REGEX_TO_IGNORE = /[\\u2018\\u2019',:\\u2013-]/g;\nconst REGEX_MAKE_SAFE = /[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g;\n/**\n * @description clean string of some characters, and make safe for regex searching\n * @param {String} theString\n * @param {Boolean=} makeSafeForRegex\n * @returns {String}\n */\nexport function cleanString(theString, makeSafeForRegex = false) {\n    theString = trimString(theString).toLowerCase(); // case insensitive\n    theString = theString.replace(REGEX_TO_IGNORE, ''); // ignore quotes, commas, colons, and hyphens\n    theString = theString.replace(REGEX_AMPERSAND, 'and'); // treat & and 'and' as the same\n    theString = theString.replace(REGEX_DUPE_WHITESPACE, ' '); // ignore duplicate whitespace\n    // make safe for regex searching\n    if (makeSafeForRegex) {\n        theString = theString.replace(REGEX_MAKE_SAFE, '\\\\$&');\n    }\n    return theString;\n}\n\n/**\n * @description check if keycode is for a printable/width-affecting character\n * @param {Number} keyCode\n * @returns {Boolean}\n */\nexport function isPrintableKey(keyCode) {\n    return (\n        (keyCode >= 48 && keyCode <= 57) || // 0-9\n        (keyCode >= 65 && keyCode <= 90) || // a-z\n        (keyCode >= 96 && keyCode <= 111) || // numpad 0-9, numeric operators\n        (keyCode >= 186 && keyCode <= 222) || // semicolon, equal, comma, dash, etc.\n        keyCode === 32 || // space\n        keyCode === 8 || // backspace\n        keyCode === 46 // delete\n    );\n}\n\n/**\n * @description merge objects together to generate a new one\n * @param {Object} args - objects to merge together\n * @returns {Object}\n */\nexport function mergeObjects(...args) {\n    let n = {};\n    for (let i = 0, l = args.length; i < l; i += 1) {\n        let o = args[i];\n        for (let p in o) {\n            if (o.hasOwnProperty(p) && typeof o[p] !== 'undefined') {\n                n[p] = o[p];\n            }\n        }\n    }\n    return n;\n}\n\n/**\n * @description dispatch event helper\n * @param {Element} element\n * @param {String} event\n */\nexport function dispatchEvent(element, event) {\n    if ('createEvent' in document) {\n        let e = document.createEvent('HTMLEvents');\n        e.initEvent(event, true, true);\n        element.dispatchEvent(e);\n    } else {\n        element.fireEvent('on' + event);\n    }\n}\n\n/**\n * @description set element option or checkbox to specified state and trigger change event\n * @param {Element} element\n * @param {Boolean} selected\n * @param {(AriaAutocomplete|Object)} instance\n */\nexport function setElementState(element, selected, instance) {\n    selected = !!selected;\n    if (element) {\n        // handle checkbox\n        if (\n            element.nodeName === 'INPUT' &&\n            typeof element.checked === 'boolean' &&\n            element.checked !== selected\n        ) {\n            element.checked = selected;\n            dispatchEvent(element, 'change');\n        }\n\n        // handle dropdown option\n        if (element.nodeName === 'OPTION' && element.selected !== selected) {\n            element.selected = selected;\n            // ensure change event only fires once for dropdown\n            if (instance.elementChangeEventTimer) {\n                clearTimeout(instance.elementChangeEventTimer);\n            }\n            instance.elementChangeEventTimer = setTimeout(function() {\n                dispatchEvent(element.closest('select'), 'change');\n            }, 1);\n        }\n    }\n}\n\n/**\n * @description process an array of strings or objects to ensure needed props exist\n * @param {(String|Object)[]} sourceArray\n * @param {Object=} mapping - value and label mapping used in object cases\n * @param {Boolean=} setCleanedLabel - defaults to true\n * @returns {Array}\n */\nexport function processSourceArray(sourceArray, mapping = {}, setCleanedLabel) {\n    let toReturn = [];\n    let mapValue = mapping['value'];\n    let mapLabel = mapping['label'];\n    for (let i = 0, l = sourceArray.length; i < l; i += 1) {\n        let result = {};\n        let entry = sourceArray[i];\n        // handle array of strings\n        if (typeof entry === 'string') {\n            result.value = result.label = entry;\n        }\n        // handle array of objects - ensure value and label exist, and maintain any other properties\n        else {\n            result = entry;\n            let value = result[mapValue] || result.value || result.label;\n            let label = result[mapLabel] || result.label || result.value;\n            result.value = (value || '').toString();\n            result.label = (label || '').toString();\n        }\n        // whether to set a cleaned label for static source filtering (in filter method)\n        if (setCleanedLabel !== false) {\n            result.cleanedLabel = cleanString(result.label);\n        }\n        toReturn.push(result);\n    }\n    return toReturn;\n}\n\nconst DIV = document.createElement('div');\n/**\n * @description convert HTML string into an element\n * @param {String} html\n * @returns {Element}\n */\nexport function htmlToElement(html) {\n    DIV.innerHTML = trimString(html);\n    return DIV.firstChild;\n}\n\n/**\n * @description set styles on an element\n * @param {Element} element\n * @param {Object} s\n */\nexport function setCss(element, s) {\n    if (!element) {\n        return;\n    }\n    for (let i in s) {\n        let style = typeof s[i] === 'number' ? s[i] + 'px' : s[i];\n        element.style[i] = style + ''; // force to be a string\n    }\n}\n\n/**\n * @description transfer styles from one Element to another\n * @param {Element} from\n * @param {Element} to\n * @param {Array=} properties\n */\nexport function transferStyles(from, to, properties) {\n    if (!from || !to) {\n        return;\n    }\n    let fromStyles = getComputedStyle(from);\n    let styles = {};\n\n    if (properties && properties.length) {\n        for (let i = 0, l = properties.length; i < l; i += 1) {\n            styles[properties[i]] = fromStyles[properties[i]];\n        }\n    } else {\n        styles = fromStyles;\n    }\n\n    setCss(to, styles);\n}\n","import { isPrintableKey, setCss, transferStyles } from './helpers';\r\n\r\n/**\r\n * @description storage for element used to detect value width\r\n */\r\nlet testSpan;\r\n\r\n/**\r\n * @description set an input element to autogrow based on its value\r\n * @param {Element} input\r\n */\r\nexport default class AutoGrow {\r\n    constructor(input) {\r\n        this.input = input;\r\n        this.currentString;\r\n        this.eventHandler;\r\n        this.currentWidth;\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * @description trigger an autogrow check\r\n     */\r\n    trigger() {\r\n        this.checkAndSet.call(this);\r\n    }\r\n\r\n    /**\r\n     * @description get current user selection from within the input\r\n     */\r\n    getInputSelection() {\r\n        let result = {};\r\n        if ('selectionStart' in this.input) {\r\n            result.start = this.input.selectionStart;\r\n            result.length = this.input.selectionEnd - result.start;\r\n        } else if (document.selection) {\r\n            this.input.focus();\r\n            let selection = document.selection.createRange();\r\n            let selectionLength = selection.text.length;\r\n            selection.moveStart('character', -this.input.value.length);\r\n            result.start = selection.text.length - selectionLength;\r\n            result.length = selectionLength;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @description measure the pixel width of a string in an input\r\n     * @param {String} str\r\n     * @returns {Number}\r\n     */\r\n    measureString(str) {\r\n        if (!str) {\r\n            this.currentString = str;\r\n            return 0;\r\n        }\r\n\r\n        // check for matching string\r\n        // risky, as styles could change between checks, but better for performance\r\n        if (str === this.currentString) {\r\n            return this.currentWidth;\r\n        }\r\n\r\n        if (!testSpan) {\r\n            testSpan = document.createElement('span');\r\n            setCss(testSpan, {\r\n                position: 'absolute',\r\n                top: -99999,\r\n                left: -99999,\r\n                width: 'auto',\r\n                padding: 0,\r\n                whiteSpace: 'pre'\r\n            });\r\n            document.body.appendChild(testSpan);\r\n        }\r\n\r\n        testSpan.textContent = str;\r\n        this.currentString = str;\r\n\r\n        transferStyles(this.input, testSpan, [\r\n            'letterSpacing',\r\n            'fontSize',\r\n            'fontFamily',\r\n            'fontWeight',\r\n            'textTransform'\r\n        ]);\r\n\r\n        return testSpan.offsetWidth || testSpan.clientWidth;\r\n    }\r\n\r\n    /**\r\n     * @description check the current input value and set width\r\n     * @param {Event} event\r\n     */\r\n    checkAndSet(event = {}) {\r\n        if (event.metaKey || event.altKey) {\r\n            return;\r\n        }\r\n\r\n        let value = this.input.value;\r\n        if (event.type && event.type.toLowerCase() === 'keydown') {\r\n            let keyCode = event.keyCode;\r\n            let keyCodeIsDelete = keyCode === 46;\r\n            let keyCodeIsBackspace = keyCode === 8;\r\n\r\n            // delete or backspace\r\n            if (keyCodeIsDelete || keyCodeIsBackspace) {\r\n                let selection = this.getInputSelection();\r\n                if (selection.length) {\r\n                    value =\r\n                        value.substring(0, selection.start) +\r\n                        value.substring(selection.start + selection.length);\r\n                } else if (keyCodeIsBackspace && selection.start) {\r\n                    value =\r\n                        value.substring(0, selection.start - 1) +\r\n                        value.substring(selection.start + 1);\r\n                } else if (keyCodeIsDelete && selection.start !== undefined) {\r\n                    value =\r\n                        value.substring(0, selection.start) +\r\n                        value.substring(selection.start + 1);\r\n                }\r\n            }\r\n\r\n            // any other width affecting character\r\n            else if (isPrintableKey(keyCode)) {\r\n                let shift = event.shiftKey;\r\n                let character = String.fromCharCode(keyCode);\r\n                if (shift) {\r\n                    character = character.toUpperCase();\r\n                } else {\r\n                    character = character.toLowerCase();\r\n                }\r\n                value += character;\r\n            }\r\n        }\r\n\r\n        let placeholder;\r\n        if (!value && (placeholder = this.input.getAttribute('placeholder'))) {\r\n            value = placeholder;\r\n        }\r\n\r\n        let width = this.measureString(value) + 4;\r\n        if (width !== this.currentWidth) {\r\n            this.currentWidth = width;\r\n            this.input.style.width = `${width}px`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description destroy the autogrow behaviour\r\n     */\r\n    destroy() {\r\n        this.input.removeEventListener('blur', this.eventHandler);\r\n        this.input.removeEventListener('input', this.eventHandler);\r\n        this.input.removeEventListener('keyup', this.eventHandler);\r\n        this.input.removeEventListener('keydown', this.eventHandler);\r\n        this.input = null;\r\n    }\r\n\r\n    /**\r\n     * @description initialise the autogrow behaviour and bind events\r\n     */\r\n    init() {\r\n        this.checkAndSet();\r\n        this.eventHandler = this.checkAndSet.bind(this);\r\n        this.input.addEventListener('blur', this.eventHandler);\r\n        this.input.addEventListener('input', this.eventHandler);\r\n        this.input.addEventListener('keyup', this.eventHandler);\r\n        this.input.addEventListener('keydown', this.eventHandler);\r\n    }\r\n}\r\n","import './closest-polyfill';\r\nimport AutoGrow from './autogrow';\r\nimport {\r\n    trimString,\r\n    hasClass,\r\n    addClass,\r\n    removeClass,\r\n    cleanString,\r\n    isPrintableKey,\r\n    mergeObjects,\r\n    dispatchEvent,\r\n    setElementState,\r\n    processSourceArray,\r\n    htmlToElement\r\n} from './helpers';\r\n\r\nlet appIndex = 0;\r\n\r\nconst DEFAULT_OPTIONS = {\r\n    /**\r\n     * @description Give the autocomplete a name to be included in form submissions\r\n     * (Instead of using this option, I would advise initialising the autocomplete\r\n     * on an existing input that will be submitted; this approach is compatible\r\n     * with the control in multiple mode)\r\n     */\r\n    name: '',\r\n    /**\r\n     * @type {String | String[] | Object[] | Function}\r\n     * @description Specify source. See examples file for more specific usage.\r\n     * @example ['Afghanistan', 'Albania', 'Algeria', ...more]\r\n     * @example (query, render) => render(arrayToUse)\r\n     */\r\n    source: '',\r\n    /**\r\n     * @description Properties to use for label and value\r\n     * when source is an Array of Objects\r\n     */\r\n    sourceMapping: {},\r\n\r\n    /**\r\n     * @description Input delay after typing before running a search\r\n     */\r\n    delay: 100,\r\n    /**\r\n     * @description Minimum number of characters to run a search (includes spaces)\r\n     */\r\n    minLength: 1,\r\n    /**\r\n     * @description Maximum number of results to render. Also used with async endpoint\r\n     */\r\n    maxResults: 9999,\r\n    /**\r\n     * @description Render a control that triggers showing all options.\r\n     * Runs a search with an empty query: '', and maxResults of 9999\r\n     */\r\n    showAllControl: false,\r\n    /**\r\n     * Confirm currently active selection when blurring off of the control. If\r\n     * no active selection, will compare current input value against available labels\r\n     */\r\n    confirmOnBlur: true,\r\n\r\n    /**\r\n     * @description Allow multiple items to be selected\r\n     */\r\n    multiple: false,\r\n    /**\r\n     * @description Adjust input width to match its value.\r\n     * Experimental, and a performance hit\r\n     */\r\n    autoGrow: false,\r\n    /**\r\n     * @description Maximum number of items that can be selected\r\n     */\r\n    maxItems: 9999,\r\n    /**\r\n     * @description If initialised element is an input, and in multiple mode,\r\n     * character that separates the selected values e.g. \"GLP,ZWE\"\r\n     */\r\n    multipleSeparator: ',',\r\n    /**\r\n     * @description If input is empty and in multiple mode,\r\n     * delete last selected item on backspace\r\n     */\r\n    deleteOnBackspace: false,\r\n\r\n    /**\r\n     * @description In async mode, parameter to use when adding the input value\r\n     * to the endpoint String. e.g. https://some-endpoint?q=norway&limit=9999\r\n     */\r\n    asyncQueryParam: 'q',\r\n    /**\r\n     * @description In async mode, parameter to use when adding results limit\r\n     * to the endpoint String. e.g. https://some-endpoint?q=norway&limit=9999\r\n     */\r\n    asyncMaxResultsParam: 'limit',\r\n\r\n    /**\r\n     * @description Placeholder text to show in generated input\r\n     */\r\n    placeholder: '',\r\n    /**\r\n     * @description Text to show (and announce to screen readers) if no results found.\r\n     * If empty, the list of options will remain hidden when there are no results\r\n     */\r\n    noResultsText: 'No results',\r\n    /**\r\n     * @description String to prepend to classes for BEM naming\r\n     * e.g. aria-autocomplete__input\r\n     */\r\n    cssNameSpace: 'aria-autocomplete',\r\n    /**\r\n     * @description Custom class name to add to the options list holder\r\n     */\r\n    listClassName: '',\r\n    /**\r\n     * @description Custom class name to add to the generated input\r\n     */\r\n    inputClassName: '',\r\n    /**\r\n     * @description Custom class name to add to the component wrapper\r\n     */\r\n    wrapperClassName: '',\r\n\r\n    /**\r\n     * @description In multiple mode, screen reader text used for element deletion.\r\n     * Prepended to option label in aria-label attribute e.g. 'delete Canada'\r\n     */\r\n    srDeleteText: 'delete',\r\n    /**\r\n     * @description Screen reader text announced after deletion.\r\n     * Apended to option label e.g. 'Canada deleted'\r\n     */\r\n    srDeletedText: 'deleted',\r\n    /**\r\n     * @description Value for aria-label attribute on the show all control\r\n     */\r\n    srShowAllText: 'Show all',\r\n    /**\r\n     * @description Screen reader text announced after confirming a selection.\r\n     * Appended to option label e.g. 'Canada selected'\r\n     */\r\n    srSelectedText: 'selected',\r\n    /**\r\n     * @description Screen reader explainer added to the list element\r\n     * via aria-label attribute\r\n     */\r\n    srListLabelText: 'Search suggestions',\r\n    /**\r\n     * @description Screen reader description announced when the input receives focus.\r\n     * Only announced when input is empty\r\n     */\r\n    srAssistiveText:\r\n        'When results are available use up and down arrows to review and ' +\r\n        'enter to select. Touch device users, explore by touch or with swipe gestures.',\r\n    /**\r\n     * @description Screen reader announcement after results are rendered\r\n     */\r\n    srResultsText: length =>\r\n        `${length} ${length === 1 ? 'result' : 'results'} available.`,\r\n\r\n    /**\r\n     * @description Callback before async call is made - receives the URL.\r\n     * Can be used to format the endpoint URL by returning a String\r\n     */\r\n    onAsyncPrep: undefined,\r\n    /**\r\n     * @description Callback after async call completes - receives the xhr object.\r\n     * Can be used to format the results by returning an Array\r\n     */\r\n    onAsyncSuccess: undefined,\r\n    /**\r\n     * @description Callback prior to rendering - receives the options that are going\r\n     * to render. Can be used to format the results by returning an Array\r\n     */\r\n    onResponse: undefined,\r\n    /**\r\n     * @description Callback before a search is performed - receives the input value.\r\n     * Can be used to alter the search value by returning a String\r\n     */\r\n    onSearch: undefined,\r\n    /**\r\n     * @description Callback after selection is made -\r\n     * receives an object with the option details\r\n     */\r\n    onConfirm: undefined,\r\n    /**\r\n     * @description Callback after an autocomplete selection is deleted.\r\n     * Fires in single-select mode when selection is deleted automatically.\r\n     * Fires in multi-select mode when selected is deleted by user action\r\n     */\r\n    onDelete: undefined,\r\n    /**\r\n     * @description Callback when main script processing and initial rendering has finished\r\n     */\r\n    onReady: undefined,\r\n    /**\r\n     * @description Callback when list area closes - receives the list holder element\r\n     */\r\n    onClose: undefined,\r\n    /**\r\n     * @description Callback when list area opens - receives the list holder element\r\n     */\r\n    onOpen: undefined\r\n};\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {Object=} options\r\n */\r\nclass AriaAutocomplete {\r\n    constructor(element, options) {\r\n        // fail silently if no list provided\r\n        if (!element) {\r\n            return;\r\n        }\r\n\r\n        // if instance already exists on the list element, do not re-initialise\r\n        if (element.ariaAutocomplete) {\r\n            return element.ariaAutocomplete;\r\n        }\r\n\r\n        // vars defined later - related explicitly to core initialising params\r\n        this.options;\r\n        this.element;\r\n        this.elementIsInput;\r\n        this.elementIsSelect;\r\n\r\n        // vars defined later - elements\r\n        this.list;\r\n        this.input;\r\n        this.wrapper;\r\n        this.showAll;\r\n        this.srAnnouncements;\r\n\r\n        // vars defined later - non elements\r\n        this.ids;\r\n        this.xhr;\r\n        this.term;\r\n        this.async;\r\n        this.source;\r\n        this.menuOpen;\r\n        this.multiple;\r\n        this.selected;\r\n        this.disabled;\r\n        this.autoGrow;\r\n        this.filtering;\r\n        this.cssNameSpace;\r\n        this.forceShowAll;\r\n        this.filteredSource; // filtered source items to render\r\n        this.currentListHtml;\r\n        this.inputPollingValue;\r\n        this.currentSelectedIndex; // for storing index of currently focused option\r\n\r\n        // document click\r\n        this.documentClick;\r\n        this.documentClickBound;\r\n\r\n        // timers\r\n        this.filterTimer;\r\n        this.pollingTimer;\r\n        this.announcementTimer;\r\n        this.componentBlurTimer;\r\n        this.elementChangeEventTimer;\r\n\r\n        // storage for autoGrow class\r\n        this.AutoGrowInput;\r\n\r\n        // get going!\r\n        this.init(element, options);\r\n    }\r\n\r\n    /**\r\n     * trigger callbacks included in component options\r\n     * @param {String} name\r\n     * @param {Array=} args\r\n     * @param {Any=} args\r\n     */\r\n    triggerOptionCallback(name, args, context) {\r\n        context = typeof context === 'undefined' ? this.api : context;\r\n        if (typeof this.options[name] === 'function') {\r\n            return this.options[name].apply(context, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description show element with CSS only - if none provided, set list state to visible\r\n     * @param {Element=} element\r\n     */\r\n    show(element) {\r\n        if (typeof element !== 'undefined') {\r\n            let toRemove = `${this.cssNameSpace}--hide hide hidden`;\r\n            removeClass(element, toRemove);\r\n            return element.removeAttribute('hidden');\r\n        }\r\n\r\n        this.input.setAttribute('aria-expanded', 'true');\r\n        if (this.showAll) {\r\n            let expanded = (!!this.forceShowAll).toString();\r\n            this.showAll.setAttribute('aria-expanded', expanded);\r\n        }\r\n        if (!this.menuOpen) {\r\n            this.show(this.list);\r\n            this.menuOpen = true;\r\n            this.triggerOptionCallback('onOpen', [this.list]);\r\n            if (!this.documentClickBound) {\r\n                this.documentClickBound = true;\r\n                document.addEventListener('click', this.documentClick);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @description hide element with CSS only - if none provided, set list state to hidden\r\n     * @param {Element=} element\r\n     */\r\n    hide(element) {\r\n        if (typeof element !== 'undefined') {\r\n            addClass(element, `${this.cssNameSpace}--hide hide hidden`);\r\n            return element.setAttribute('hidden', 'hidden');\r\n        }\r\n\r\n        this.currentSelectedIndex = -1;\r\n        this.input.setAttribute('aria-expanded', 'false');\r\n        if (this.showAll) {\r\n            this.showAll.setAttribute('aria-expanded', 'false');\r\n        }\r\n        if (this.menuOpen) {\r\n            this.hide(this.list);\r\n            this.menuOpen = false;\r\n            this.triggerOptionCallback('onClose', [this.list]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description enable autocomplete (e.g. when under maxItems selected)\r\n     */\r\n    enable() {\r\n        if (this.disabled) {\r\n            this.disabled = false;\r\n            this.input.disabled = false;\r\n            let n = this.cssNameSpace;\r\n            removeClass(this.input, `${n}__input--disabled disabled`);\r\n            removeClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '0');\r\n                removeClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description disable autocomplete (e.g. when maxItems selected)\r\n     */\r\n    disable() {\r\n        if (!this.disabled) {\r\n            this.disabled = true;\r\n            this.input.disabled = true;\r\n            let n = this.cssNameSpace;\r\n            addClass(this.input, `${n}__input--disabled disabled`);\r\n            addClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '-1');\r\n                addClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description trigger input resizing if autogrow is enabled\r\n     */\r\n    triggerAutoGrow() {\r\n        if (this.autoGrow && this.AutoGrowInput) {\r\n            this.AutoGrowInput.trigger();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set input value to specific string, and related component vars\r\n     * @param {String} value\r\n     * @param {Boolean=} setPollingValue\r\n     */\r\n    setInputValue(value, setPollingValue = false) {\r\n        this.input.value = this.term = value;\r\n        if (setPollingValue) {\r\n            this.inputPollingValue = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description check if current input value is contained in a selection of options\r\n     * @param {String} query - string to use - checks input value otherwise\r\n     * @param {Array} options - array of objects with value and label properties\r\n     * @param {String=} prop - prop to check against in options array - defaults to 'label'\r\n     * @returns {Number} index of array entry that matches, or -1 if none found\r\n     */\r\n    isQueryContainedIn(query, options, prop) {\r\n        query = trimString(query || this.input.value).toLowerCase();\r\n        if (query) {\r\n            prop = prop || 'label';\r\n            for (let i = 0, l = options.length; i < l; i += 1) {\r\n                if (trimString(options[i][prop]).toLowerCase() === query) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * @description make a screen reader announcement\r\n     * @param {String} text\r\n     * @param {Number=} delay\r\n     */\r\n    announce(text, delay) {\r\n        if (!text || !this.srAnnouncements) {\r\n            return;\r\n        }\r\n        // in immediate case, do not user timer\r\n        if (delay === 0) {\r\n            return (this.srAnnouncements.textContent = text);\r\n        }\r\n        delay = typeof delay === 'number' ? delay : 400;\r\n        if (this.announcementTimer) {\r\n            clearTimeout(this.announcementTimer);\r\n        }\r\n        this.announcementTimer = setTimeout(() => {\r\n            this.srAnnouncements.textContent = text;\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description check if element is a selected element in the DOM\r\n     * @param {Element} element\r\n     * @returns {Boolean}\r\n     */\r\n    isSelectedElem(element) {\r\n        return (\r\n            this.multiple &&\r\n            element.ariaAutocompleteSelectedOption &&\r\n            hasClass(element, `${this.cssNameSpace}__selected`)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @description get DOM elements for selected items\r\n     * @returns {Element[]}\r\n     */\r\n    getSelectedElems() {\r\n        let n = this.wrapper.childNodes;\r\n        let a = [];\r\n        for (let i = 0, l = n.length; i < l; i += 1) {\r\n            if (this.isSelectedElem(n[i])) {\r\n                a.push(n[i]);\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @description remove object from selected\r\n     * @param {Object} entry\r\n     */\r\n    removeEntryFromSelected(entry) {\r\n        let index = this.selected.indexOf(entry);\r\n        if (index === -1) {\r\n            // value check, in case explicit object reference did not work\r\n            for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n                if (this.selected[i].value === entry.value) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // set element state, dispatch change event, set selected array,\r\n        // trigger callback, build selected, and do screen reader announcement\r\n        if (index > -1 && this.selected[index]) {\r\n            let option = mergeObjects(this.selected[index]);\r\n            let label = option.label;\r\n            setElementState(this.selected.element, false, this);\r\n            this.selected.splice(index, 1);\r\n            this.triggerOptionCallback('onDelete', [option]);\r\n            this.buildMultiSelected();\r\n            this.announce(`${label} ${this.options.srDeletedText}`, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description re-build the html showing the selected items\r\n     * note: there are a lot of loops here - could affect performance\r\n     */\r\n    buildMultiSelected() {\r\n        // only do anything in multiple mode\r\n        if (!this.multiple) {\r\n            return;\r\n        }\r\n\r\n        // disable or enable as needed\r\n        if (this.multiple && this.selected.length >= this.options.maxItems) {\r\n            this.disable();\r\n        } else {\r\n            this.enable();\r\n        }\r\n\r\n        // no elements, and none selected, do nothing\r\n        let currentSelectedElems = this.getSelectedElems();\r\n        if (!this.selected.length && !currentSelectedElems.length) {\r\n            return;\r\n        }\r\n\r\n        // cycle through existing elements, and remove any not in the selected array\r\n        let current = [];\r\n        let i = currentSelectedElems.length;\r\n        while (i--) {\r\n            let option = currentSelectedElems[i].ariaAutocompleteSelectedOption;\r\n            let l = this.selected.length;\r\n            let isInSelected = false;\r\n            while (l--) {\r\n                let selected = this.selected[l];\r\n                if (selected === option || selected.value === option.value) {\r\n                    isInSelected = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (isInSelected) {\r\n                current.push(currentSelectedElems[i]);\r\n            } else {\r\n                this.wrapper.removeChild(currentSelectedElems[i]);\r\n            }\r\n        }\r\n\r\n        // cycle through selected array, and add elements for any not represented by one\r\n        let deleteText = this.options.srDeleteText;\r\n        let fragment = document.createDocumentFragment();\r\n        let selectedClass = `${this.cssNameSpace}__selected`;\r\n        for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n            let selected = this.selected[i];\r\n            let l = current.length;\r\n            let isInDom = false;\r\n            while (l--) {\r\n                let option = current[l].ariaAutocompleteSelectedOption;\r\n                if (option === selected || option.value === selected.value) {\r\n                    isInDom = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!isInDom) {\r\n                let label = selected.label;\r\n                let span = htmlToElement(\r\n                    `<span role=\"button\" class=\"${selectedClass}\" ` +\r\n                        `tabindex=\"0\" aria-label=\"${deleteText} ${label}\">` +\r\n                        `${label}</span>`\r\n                );\r\n                span.ariaAutocompleteSelectedOption = selected;\r\n                fragment.appendChild(span);\r\n            }\r\n        }\r\n        if (fragment.childNodes && fragment.childNodes.length) {\r\n            this.wrapper.appendChild(fragment);\r\n        }\r\n\r\n        // set ids on elements\r\n        let ids = [this.ids.LIST];\r\n        // get selected elements again, as some may have been added or removed\r\n        current = this.getSelectedElems();\r\n        for (let i = 0, l = current.length; i < l; i += 1) {\r\n            let id = `${this.ids.OPTION_SELECTED}-${i}`;\r\n            current[i].setAttribute('id', id);\r\n            ids.push(id);\r\n        }\r\n\r\n        // set input aria-owns\r\n        this.input.setAttribute('aria-owns', ids.join(' '));\r\n\r\n        // in autogrow mode, hide the placeholder if there are selected items\r\n        if (this.autoGrow && this.options.placeholder) {\r\n            let toSet = this.selected.length ? '' : this.options.placeholder;\r\n            this.input.setAttribute('placeholder', toSet);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set the aria-describedby attribute on the input\r\n     */\r\n    setInputDescription() {\r\n        let exists = this.input.getAttribute('aria-describedby');\r\n        let current = trimString(exists || '');\r\n        let describedBy = current.replace(this.ids.SR_ASSISTANCE, '');\r\n\r\n        if (this.input.value.length === 0) {\r\n            describedBy = describedBy + ' ' + this.ids.SR_ASSISTANCE;\r\n        }\r\n\r\n        // set or remove attribute, but only if necessary\r\n        if ((describedBy = trimString(describedBy))) {\r\n            if (describedBy !== current) {\r\n                this.input.setAttribute('aria-describedby', describedBy);\r\n            }\r\n        } else if (exists) {\r\n            this.input.removeAttribute('aria-describedby');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description reset classes and aria-selected attribute for all visible filtered options\r\n     */\r\n    resetOptionAttributes() {\r\n        let cssName = this.cssNameSpace;\r\n        let nodes = this.list.childNodes;\r\n        let l = nodes.length;\r\n\r\n        while (l--) {\r\n            removeClass(nodes[l], `${cssName}__option--focused focused focus`);\r\n            nodes[l].setAttribute('aria-selected', 'false');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description move focus to correct option, or to input (on up and down arrows)\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     */\r\n    setOptionFocus(event, index) {\r\n        // set aria-selected to false and remove focused class\r\n        this.resetOptionAttributes();\r\n\r\n        // if negative index, or no options available, focus on input\r\n        let options = this.list.childNodes;\r\n        if (index < 0 || !options || !options.length) {\r\n            this.currentSelectedIndex = -1;\r\n            // focus on input, only if event was from another element\r\n            if (event && event.target !== this.input) {\r\n                this.input.focus();\r\n            }\r\n            return;\r\n        }\r\n\r\n        // down arrow on/past last option, focus on last item\r\n        if (index >= options.length) {\r\n            this.currentSelectedIndex = options.length - 1;\r\n            this.setOptionFocus(event, this.currentSelectedIndex);\r\n            return;\r\n        }\r\n\r\n        // if option found, focus...\r\n        let toFocus = options[index];\r\n        if (toFocus && typeof toFocus.getAttribute('tabindex') === 'string') {\r\n            this.currentSelectedIndex = index;\r\n            let toAdd = `${this.cssNameSpace}__option--focused focused focus`;\r\n            addClass(toFocus, toAdd);\r\n            toFocus.setAttribute('aria-selected', 'true');\r\n            toFocus.focus();\r\n            return;\r\n        }\r\n\r\n        // reset index just in case\r\n        this.currentSelectedIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * @description set values and dispatch events based on any DOM elements in the selected array\r\n     */\r\n    setSourceElementValues() {\r\n        let valToSet = [];\r\n        for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n            let entry = this.selected[i];\r\n            valToSet.push(entry.value);\r\n            setElementState(entry.element, true, this); // element processing\r\n        }\r\n\r\n        // set original input value\r\n        if (this.elementIsInput) {\r\n            let valToSetString = valToSet.join(this.options.multipleSeparator);\r\n            if (valToSetString !== this.element.value) {\r\n                this.element.value = valToSetString;\r\n                dispatchEvent(this.element, 'change');\r\n            }\r\n        }\r\n\r\n        // included in case of multi-select mode used with a <select> element as the source\r\n        if (!this.selected.length && this.elementIsSelect) {\r\n            this.element.value = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description select option from the list by index\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     * @param {Boolean=} focusAfterSelection\r\n     */\r\n    handleOptionSelect(event, index, focusAfterSelection = true) {\r\n        // defensive check for proper index, that the filteredSource exists, and not exceed max items option\r\n        if (\r\n            typeof index !== 'number' ||\r\n            index < 0 ||\r\n            (this.multiple && this.selected.length >= this.options.maxItems) ||\r\n            !this.filteredSource.length ||\r\n            !this.filteredSource[index]\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // generate new object from the selected item in case the original source gets altered\r\n        let option = mergeObjects(this.filteredSource[index]);\r\n\r\n        // detect if selected option is already in selected array\r\n        let l = this.selected.length;\r\n        let alreadySelected = false;\r\n        while (l--) {\r\n            if (this.selected[l].value === option.value) {\r\n                alreadySelected = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.setInputValue(this.multiple ? '' : option.label, true);\r\n        this.triggerAutoGrow();\r\n\r\n        // reset selected array in single select mode\r\n        if (!alreadySelected && !this.multiple) {\r\n            this.selected = [];\r\n        }\r\n\r\n        // (re)set values of any DOM elements based on selected array\r\n        if (!alreadySelected) {\r\n            this.selected.push(option);\r\n            this.setSourceElementValues();\r\n            this.buildMultiSelected(); // rebuild multi-selected if needed\r\n        }\r\n\r\n        this.triggerOptionCallback('onConfirm', [option]);\r\n        this.announce(`${option.label} ${this.options.srSelectedText}`, 0);\r\n\r\n        // return focus to input\r\n        if (!this.disabled && focusAfterSelection !== false) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // close menu after option selection, and after returning focus to input\r\n        this.hide();\r\n    }\r\n\r\n    /**\r\n     * @description remove selected entries from results if in multiple mode\r\n     * @param {Array} results\r\n     * @returns {Array}\r\n     */\r\n    removeSelectedFromResults(results) {\r\n        if (!this.multiple || !this.selected.length) {\r\n            return results;\r\n        }\r\n        let toReturn = [];\r\n        resultsLoop: for (let i = 0, l = results.length; i < l; i += 1) {\r\n            let selected = this.selected;\r\n            let result = results[i];\r\n            for (let j = 0, k = selected.length; j < k; j += 1) {\r\n                let labelMatch = result.label === selected[j].label;\r\n                if (labelMatch && result.value === selected[j].value) {\r\n                    continue resultsLoop;\r\n                }\r\n            }\r\n            toReturn.push(result);\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * @description final filtering and render for list options, and render\r\n     * @param {Array} results\r\n     */\r\n    setListOptions(results) {\r\n        let toShow = [];\r\n        let optionId = this.ids.OPTION;\r\n        let cssName = this.cssNameSpace;\r\n        let mapping = this.options.sourceMapping;\r\n        // if in multiple mode, exclude items already in the selected array\r\n        let updated = this.removeSelectedFromResults(results);\r\n        // allow callback to alter the response before rendering\r\n        let callback = this.triggerOptionCallback('onResponse', updated);\r\n\r\n        // now commit to setting the filtered source\r\n        this.filteredSource = callback\r\n            ? processSourceArray(callback, mapping)\r\n            : updated;\r\n        let length = this.filteredSource.length;\r\n\r\n        // build up the list html\r\n        let maxResults = this.forceShowAll ? 9999 : this.options.maxResults;\r\n        for (let i = 0; i < length && i < maxResults; i += 1) {\r\n            toShow.push(\r\n                `<li tabindex=\"-1\" aria-selected=\"false\" role=\"option\" class=\"${cssName}__option\" ` +\r\n                    `id=\"${optionId}--${i}\" aria-posinset=\"${i + 1}\" ` +\r\n                    `aria-setsize=\"${length}\">${this.filteredSource[i].label}</li>`\r\n            );\r\n        }\r\n\r\n        // set has-results or no-results class on the list element\r\n        if (toShow.length) {\r\n            addClass(this.list, `${cssName}__list--has-results`);\r\n            removeClass(this.list, `${cssName}__list--no-results`);\r\n        } else {\r\n            removeClass(this.list, `${cssName}__list--has-results`);\r\n            addClass(this.list, `${cssName}__list--no-results`);\r\n        }\r\n\r\n        // no results text handling\r\n        let announce;\r\n        let noText = this.options.noResultsText;\r\n        if (!toShow.length && typeof noText === 'string' && noText.length) {\r\n            announce = noText;\r\n            let optionClass = `${cssName}__option`;\r\n            toShow.push(\r\n                `<li class=\"${optionClass} ${optionClass}--no-results\">${noText}</li>`\r\n            );\r\n        }\r\n\r\n        // remove loading class(es) and reset variables\r\n        this.cancelFilterPrep();\r\n\r\n        // announce to screen reader\r\n        if (!announce) {\r\n            announce = this.triggerOptionCallback('srResultsText', [length]);\r\n        }\r\n        this.announce(announce);\r\n\r\n        // render the list, only if we have to\r\n        // time taken for string comparison is worth it to not have to re-parse and re-render the list\r\n        let newListHtml = toShow.join('');\r\n        if (this.currentListHtml !== newListHtml) {\r\n            this.currentListHtml = newListHtml;\r\n            // innerHTML vs insertAdjacentHtml performance in old IE ?\r\n            this.list.innerHTML = newListHtml;\r\n        } else {\r\n            // if list html matches, and not re-rendered, clear aria-selected and focus classes\r\n            this.resetOptionAttributes();\r\n        }\r\n\r\n        // if toShow array is empty, make sure not to render the menu\r\n        if (!toShow.length) {\r\n            this.hide();\r\n            this.forceShowAll = false;\r\n            return;\r\n        }\r\n\r\n        this.show();\r\n        // reset forceShowAll must be after .show()\r\n        // aria-expanded attribute on showAllControl is controlled in .show() method\r\n        this.forceShowAll = false;\r\n    }\r\n\r\n    /**\r\n     * @description trigger async call for options to render\r\n     * @param {String} value\r\n     * @param {Boolean=} isFirstCall\r\n     */\r\n    handleAsync(value, isFirstCall = false) {\r\n        let xhr = new XMLHttpRequest();\r\n        let encode = encodeURIComponent;\r\n        let isShowAll = this.forceShowAll;\r\n        let unlimited = isShowAll || isFirstCall;\r\n        let baseAmount = this.multiple ? this.selected.length : 0;\r\n        let ampersandOrQuestionMark = /\\?/.test(this.source) ? '&' : '?';\r\n        let url =\r\n            this.source +\r\n            ampersandOrQuestionMark +\r\n            `${encode(this.options.asyncQueryParam)}=${encode(value)}&` +\r\n            `${encode(this.options.asyncMaxResultsParam)}=` +\r\n            `${unlimited ? 9999 : baseAmount + this.options.maxResults}`;\r\n\r\n        // abort any current call first\r\n        if (this.xhr) {\r\n            this.xhr.abort();\r\n        }\r\n\r\n        let context = isFirstCall ? null : this.api;\r\n        url = this.triggerOptionCallback('onAsyncPrep', [url], context) || url;\r\n\r\n        xhr.open('GET', url);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === xhr.DONE) {\r\n                if (xhr.status === 200) {\r\n                    this.forceShowAll = isShowAll; // return forceShowAll to previous state before the options render\r\n                    let context = isFirstCall ? null : this.api;\r\n                    let callbackResponse = this.triggerOptionCallback(\r\n                        'onAsyncSuccess',\r\n                        [value, xhr],\r\n                        context\r\n                    );\r\n                    let mapping = this.options.sourceMapping;\r\n                    let source = callbackResponse || xhr.responseText;\r\n                    let items = processSourceArray(source, mapping, false);\r\n\r\n                    if (isFirstCall) {\r\n                        this.prepSelectedFromArray(items);\r\n                        this.setInputStartingStates(false);\r\n                    } else {\r\n                        this.setListOptions(items);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        // allow the creation of an uncancellable call to use on first load\r\n        if (!isFirstCall) {\r\n            this.xhr = xhr;\r\n        }\r\n\r\n        xhr.send();\r\n    }\r\n\r\n    /**\r\n     * @description trigger filtering using a value\r\n     * @param {String} value\r\n     */\r\n    filter(value) {\r\n        // fail silently if no value is provided\r\n        if (typeof value !== 'string') {\r\n            this.cancelFilterPrep();\r\n            return;\r\n        }\r\n\r\n        let forceShowAll = this.forceShowAll;\r\n        let callbackResponse = this.triggerOptionCallback('onSearch', [value]);\r\n        let toReturn = [];\r\n\r\n        // allow onSearch callback to affect the searched value\r\n        // only permitted when not a forceShowAll case\r\n        if (!forceShowAll && typeof callbackResponse === 'string') {\r\n            value = callbackResponse;\r\n        }\r\n\r\n        // store search term - used for comparison in filterPrep\r\n        this.term = this.inputPollingValue = value;\r\n\r\n        // async handling\r\n        if (this.async) {\r\n            this.handleAsync(value);\r\n            // set show all to false immediately as may be used in other places\r\n            this.forceShowAll = false;\r\n            return;\r\n        }\r\n\r\n        // handle the source as a function\r\n        if (typeof this.source === 'function') {\r\n            this.source.call(this.api, this.term, response => {\r\n                let mapping = this.options.mapping;\r\n                let result = processSourceArray(response, mapping);\r\n                this.setListOptions(result);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // if empty string, show all\r\n        if (!value) {\r\n            forceShowAll = true;\r\n        }\r\n\r\n        // existing list handling\r\n        if (this.source && this.source.length) {\r\n            if (!forceShowAll) {\r\n                value = cleanString(value, true);\r\n            }\r\n            for (let i = 0, l = this.source.length; i < l; i += 1) {\r\n                let entry = this.source[i];\r\n                if (forceShowAll || entry.cleanedLabel.search(value) !== -1) {\r\n                    toReturn.push({\r\n                        element: entry.element,\r\n                        staticSourceIndex: i,\r\n                        label: entry.label,\r\n                        value: entry.value\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setListOptions(toReturn);\r\n    }\r\n\r\n    /**\r\n     * @description cancel filter timer and remove loading classes\r\n     */\r\n    cancelFilterPrep() {\r\n        if (this.filterTimer) {\r\n            clearTimeout(this.filterTimer);\r\n        }\r\n        let nameSpace = this.cssNameSpace;\r\n        removeClass(this.wrapper, `${nameSpace}__wrapper--loading loading`);\r\n        removeClass(this.input, `${nameSpace}__input--loading loading`);\r\n        this.filtering = false;\r\n    }\r\n\r\n    /**\r\n     * @description checks before filtering, and set filter timer\r\n     * @param {Event} e\r\n     * @param {Boolean=} doValueOverrideCheck - whether to check input value against selected item(s)\r\n     * @param {Boolean=} runNow\r\n     */\r\n    filterPrep(e, doValueOverrideCheck = false, runNow = false) {\r\n        let forceShowAll = this.forceShowAll;\r\n        let delay = forceShowAll || runNow ? 0 : this.options.delay;\r\n\r\n        // clear timers\r\n        this.cancelFilterPrep();\r\n        this.filtering = true;\r\n        this.filterTimer = setTimeout(() => {\r\n            let value = this.input.value;\r\n            // treat as empty search if...\r\n            // forceShowAll, or in single mode and selected item label matches current value\r\n            if (\r\n                forceShowAll ||\r\n                value === '' ||\r\n                (doValueOverrideCheck &&\r\n                    !this.multiple &&\r\n                    this.selected.length &&\r\n                    trimString(this.selected[0].label) === trimString(value))\r\n            ) {\r\n                value = '';\r\n            }\r\n\r\n            // handle aria-describedby\r\n            this.setInputDescription();\r\n            this.inputPollingValue = value; // set polling value, even if search criteria not met\r\n\r\n            if (!forceShowAll && value.length < this.options.minLength) {\r\n                this.hide();\r\n                return;\r\n            }\r\n\r\n            // try catch used due to permissions issues in some cases\r\n            let modifier;\r\n            try {\r\n                let keydown = e && e.type === 'keydown';\r\n                modifier = keydown && (e.altKey || e.ctrlKey || e.metaKey); // allow shift key, just in case...\r\n            } catch (e) {}\r\n\r\n            // if value to use matches last used search term, do nothing\r\n            let equalVals = value === '' ? false : value === this.term;\r\n\r\n            // prevent search being run again with the same value\r\n            if (!equalVals || (equalVals && !this.menuOpen && !modifier)) {\r\n                let n = this.cssNameSpace;\r\n                addClass(this.wrapper, `${n}__wrapper--loading loading`);\r\n                addClass(this.input, `${n}__input--loading loading`);\r\n                this.currentSelectedIndex = -1;\r\n                this.filter(value);\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description trigger filter prep in showAll mode\r\n     * @param {Event} event\r\n     */\r\n    filterPrepShowAll(event) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        // need to use a timer, as the wrapper focus out will fire after the click event\r\n        if (this.showAllPrepTimer) {\r\n            clearTimeout(this.showAllPrepTimer);\r\n        }\r\n        this.showAllPrepTimer = setTimeout(() => {\r\n            if (this.componentBlurTimer) {\r\n                clearTimeout(this.componentBlurTimer);\r\n            }\r\n            event.preventDefault();\r\n            this.forceShowAll = true;\r\n            this.filterPrep(event, false, true);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description blur behaviour for hiding list and removing focus class(es)\r\n     * @param {Event} event\r\n     * @param {Boolean=} force - fire instantly and force blurring out of the component\r\n     */\r\n    handleComponentBlur(event, force = false) {\r\n        let delay = force ? 0 : 100;\r\n        if (this.componentBlurTimer) {\r\n            clearTimeout(this.componentBlurTimer);\r\n        }\r\n        // use a timeout to ensure this blur fires after other focus events\r\n        // and in case the user focuses back in immediately\r\n        this.componentBlurTimer = setTimeout(() => {\r\n            // do nothing if blurring to an element within the list\r\n            let activeElem = document.activeElement;\r\n            if (\r\n                !force &&\r\n                activeElem &&\r\n                !(this.showAll && this.showAll === activeElem) && // exception for show all button\r\n                !activeElem.ariaAutocompleteSelectedOption // exception for selected items\r\n            ) {\r\n                // must base this on the wrapper to allow scrolling the list in IE\r\n                if (this.wrapper.contains(activeElem)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // cancel any running async call\r\n            if (this.xhr) {\r\n                this.xhr.abort();\r\n            }\r\n\r\n            // confirmOnBlur behaviour\r\n            let isQueryIn = this.isQueryContainedIn.bind(this);\r\n            if (!force && this.options.confirmOnBlur && this.menuOpen) {\r\n                // if blurring from an option (currentSelectedIndex > -1), select it\r\n                let toUse = this.currentSelectedIndex;\r\n                if (typeof toUse !== 'number' || toUse === -1) {\r\n                    // otherwise check for exact match between current input value and available items\r\n                    toUse = isQueryIn('', this.filteredSource);\r\n                }\r\n                this.handleOptionSelect({}, toUse, false);\r\n            }\r\n\r\n            this.cancelFilterPrep();\r\n            this.hide();\r\n\r\n            // in single select case, if current value and chosen value differ, clear selected and input value\r\n            if (!this.multiple && isQueryIn('', this.selected) === -1) {\r\n                let isInputOrDdl = this.elementIsInput || this.elementIsSelect;\r\n                if (isInputOrDdl && this.element.value !== '') {\r\n                    this.element.value = '';\r\n                    dispatchEvent(this.element, 'change');\r\n                }\r\n                if (this.selected.length) {\r\n                    this.removeEntryFromSelected(this.selected[0]);\r\n                }\r\n                this.setInputValue('', true);\r\n            }\r\n\r\n            if (this.multiple) {\r\n                this.setInputValue('', true);\r\n            }\r\n\r\n            // trigger input resizing\r\n            this.triggerAutoGrow();\r\n\r\n            // unbind document click\r\n            if (this.documentClickBound) {\r\n                this.documentClickBound = false;\r\n                document.removeEventListener('click', this.documentClick);\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description enter keydown for selections\r\n     * @param {Event} event\r\n     */\r\n    handleEnterKey(event) {\r\n        // if in multiple mode, and event target was a selected item, remove it\r\n        if (this.isSelectedElem(event.target)) {\r\n            let option = event.target.ariaAutocompleteSelectedOption;\r\n            return this.removeEntryFromSelected(option);\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (this.showAll && event.target === this.showAll) {\r\n            this.filterPrepShowAll(event);\r\n            return;\r\n        }\r\n\r\n        if (this.menuOpen) {\r\n            event.preventDefault();\r\n            if (this.currentSelectedIndex > -1) {\r\n                this.handleOptionSelect(event, this.currentSelectedIndex);\r\n            }\r\n        }\r\n\r\n        // if enter keypress was from the filter input, trigger search immediately\r\n        if (event.target === this.input) {\r\n            this.filterPrep(event, false, true);\r\n        }\r\n    }\r\n    /**\r\n     * @description down arrow usage - option focus, or search all\r\n     * @param {Event} event\r\n     */\r\n    handleDownArrowKey(event) {\r\n        event.preventDefault();\r\n        // if closed, and text is long enough, run search\r\n        if (!this.menuOpen) {\r\n            this.forceShowAll = this.options.minLength < 1;\r\n            if (\r\n                this.forceShowAll ||\r\n                this.input.value.length >= this.options.minLength\r\n            ) {\r\n                this.filterPrep(event);\r\n            }\r\n        }\r\n        // move focus to downward option\r\n        if (this.menuOpen && !this.filtering) {\r\n            let current = this.currentSelectedIndex;\r\n            if (typeof current !== 'number' || current < 0) {\r\n                this.setOptionFocus(event, 0);\r\n            } else {\r\n                this.setOptionFocus(event, current + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description up arrow usage - option focus, or return focus to input\r\n     * @param {Event} event\r\n     */\r\n    handleUpArrowKey(event) {\r\n        event.preventDefault();\r\n        let usable = !this.disabled && this.menuOpen;\r\n        if (usable && typeof this.currentSelectedIndex === 'number') {\r\n            this.setOptionFocus(event, this.currentSelectedIndex - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description standard keydown handling (excluding enter, up, down, escape)\r\n     * @param {Event} event\r\n     */\r\n    handleKeyDownDefault(event) {\r\n        const targetIsInput = event.target === this.input;\r\n        // on space, if focus state is on any other item, treat as enter\r\n        if (event.keyCode === 32 && !targetIsInput) {\r\n            event.preventDefault();\r\n            return this.handleEnterKey(event);\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        // on backspace, if using empty input in multiple mode, delete last selected entry\r\n        let selectedLength = this.selected && this.selected.length;\r\n        if (\r\n            this.options.deleteOnBackspace &&\r\n            this.input.value === '' &&\r\n            event.keyCode === 8 &&\r\n            selectedLength &&\r\n            targetIsInput &&\r\n            this.multiple\r\n        ) {\r\n            this.removeEntryFromSelected(this.selected[selectedLength - 1]);\r\n            return;\r\n        }\r\n\r\n        // any printable character not on input, return focus to input\r\n        let printableKey = isPrintableKey(event.keyCode);\r\n        let focusInput = !targetIsInput && printableKey;\r\n        if (focusInput) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // trigger filtering - done here, instead of using input event, due to IE9 issues\r\n        if (focusInput || (targetIsInput && printableKey)) {\r\n            this.filterPrep(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description component keydown handling\r\n     * @param {Event} event\r\n     */\r\n    prepKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 13: // on enter\r\n                this.handleEnterKey(event);\r\n                break;\r\n            case 27: // on escape\r\n                this.handleComponentBlur(event, true);\r\n                break;\r\n            case 38: // on up\r\n                this.handleUpArrowKey(event);\r\n                break;\r\n            case 40: // on down\r\n                this.handleDownArrowKey(event);\r\n                break;\r\n            default:\r\n                this.handleKeyDownDefault(event);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description cancel checking for input value changes from external causes\r\n     */\r\n    cancelPolling() {\r\n        if (this.pollingTimer) {\r\n            clearTimeout(this.pollingTimer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description start checking for input value changes from causes that bypass event detection\r\n     */\r\n    startPolling() {\r\n        // check if input value does not equal last searched term\r\n        if (!this.filtering && this.input.value !== this.inputPollingValue) {\r\n            this.filterPrep({});\r\n        }\r\n        this.pollingTimer = setTimeout(() => {\r\n            this.startPolling();\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * @description bind component events to generated elements\r\n     */\r\n    bindEvents() {\r\n        // when focus is moved outside of the component, close everything\r\n        this.wrapper.addEventListener('focusout', event => {\r\n            this.handleComponentBlur(event, false);\r\n        });\r\n        // reset selected index\r\n        this.wrapper.addEventListener('focusin', event => {\r\n            if (!this.list.contains(event.target)) {\r\n                this.currentSelectedIndex = -1;\r\n            }\r\n        });\r\n        // handle all keydown events inside the component\r\n        this.wrapper.addEventListener('keydown', event => {\r\n            this.prepKeyDown(event);\r\n        });\r\n        // if clicking directly on the wrapper, move focus to the input\r\n        this.wrapper.addEventListener('click', event => {\r\n            if (event.target === this.wrapper) {\r\n                this.input.focus();\r\n                return;\r\n            }\r\n            if (this.isSelectedElem(event.target)) {\r\n                let option = event.target.ariaAutocompleteSelectedOption;\r\n                this.removeEntryFromSelected(option);\r\n            }\r\n        });\r\n\r\n        let wrapperFocusClasses = `${this.cssNameSpace}__wrapper--focused focused focus`;\r\n        let inputFocusClasses = `${this.cssNameSpace}__input--focused focused focus`;\r\n        // when blurring out of input, remove classes\r\n        this.input.addEventListener('blur', () => {\r\n            removeClass(this.wrapper, wrapperFocusClasses);\r\n            removeClass(this.input, inputFocusClasses);\r\n            this.cancelPolling();\r\n        });\r\n        // trigger filter on input event as well as keydown (covering bases)\r\n        this.input.addEventListener('input', event => {\r\n            this.filterPrep(event);\r\n        });\r\n        // when specifically clicking on input, if menu is closed, and value is long enough, search\r\n        this.input.addEventListener('click', event => {\r\n            let open = this.menuOpen;\r\n            if (!open && this.input.value.length >= this.options.minLength) {\r\n                this.filterPrep(event, true);\r\n            }\r\n        });\r\n        // when focusing on input, reset selected index and trigger search handling\r\n        this.input.addEventListener('focusin', () => {\r\n            addClass(this.wrapper, wrapperFocusClasses);\r\n            addClass(this.input, inputFocusClasses);\r\n            this.startPolling();\r\n            if (!this.disabled && !this.menuOpen) {\r\n                this.filterPrep(event, true);\r\n            }\r\n        });\r\n\r\n        // show all button click\r\n        if (this.showAll) {\r\n            this.showAll.addEventListener('click', event => {\r\n                this.filterPrepShowAll(event);\r\n            });\r\n        }\r\n\r\n        // clear any current focus position when hovering into the list\r\n        this.list.addEventListener('mouseenter', event => {\r\n            this.resetOptionAttributes();\r\n        });\r\n        // trigger options selection\r\n        this.list.addEventListener('click', event => {\r\n            if (event.target !== this.list) {\r\n                let childNodes = this.list.childNodes;\r\n                if (childNodes.length) {\r\n                    let nodeIndex = [].indexOf.call(childNodes, event.target);\r\n                    this.handleOptionSelect(event, nodeIndex);\r\n                }\r\n            }\r\n        });\r\n\r\n        // setup input autogrow behaviour\r\n        if (this.autoGrow) {\r\n            this.AutoGrowInput = new AutoGrow(this.input);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on child checkboxes\r\n     */\r\n    prepListSourceCheckboxes() {\r\n        this.multiple = true; // force multiple in this case\r\n        // reset source and use checkboxes\r\n        this.source = [];\r\n        let elements = this.element.querySelectorAll('input[type=\"checkbox\"]');\r\n        for (let i = 0, l = elements.length; i < l; i += 1) {\r\n            let checkbox = elements[i];\r\n            // must have a value other than empty string\r\n            if (!checkbox.value) {\r\n                continue;\r\n            }\r\n            let toPush = { element: checkbox, value: checkbox.value };\r\n            // label searching\r\n            let label = checkbox.closest('label');\r\n            if (!label && checkbox.id) {\r\n                label = document.querySelector('[for=\"' + checkbox.id + '\"]');\r\n            }\r\n            if (label) {\r\n                toPush.label = label.textContent;\r\n            }\r\n            // if no label so far, re-use value\r\n            if (!toPush.label) {\r\n                toPush.label = toPush.value;\r\n            }\r\n            toPush.cleanedLabel = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (checkbox.checked) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on <select> options\r\n     */\r\n    prepListSourceDdl() {\r\n        this.multiple = this.element.multiple; // force multiple to match select\r\n        // reset source and use options\r\n        this.source = [];\r\n        let options = this.element.querySelectorAll('option');\r\n        for (let i = 0, l = options.length; i < l; i += 1) {\r\n            let option = options[i];\r\n            // must have a value other than empty string\r\n            if (!option.value) {\r\n                continue;\r\n            }\r\n            let toPush = {\r\n                element: option,\r\n                value: option.value,\r\n                label: option.textContent\r\n            };\r\n            toPush.cleanedLabel = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (option.selected) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description build up selected array if starting element was an input, and had a value\r\n     * @param {Object[]} source\r\n     */\r\n    prepSelectedFromArray(source) {\r\n        let value = this.elementIsInput && this.element.value;\r\n        if (value && source && source.length) {\r\n            // account for multiple mode\r\n            let multiple = this.options.multiple;\r\n            let separator = this.options.multipleSeparator;\r\n            let valueArr = multiple ? value.split(separator) : [value];\r\n\r\n            for (let i = 0, l = valueArr.length; i < l; i += 1) {\r\n                let val = valueArr[i];\r\n                let isQueryIn = this.isQueryContainedIn;\r\n                // make sure it is not already in the selected array\r\n                let isInSelected = isQueryIn(val, this.selected, 'value') > -1;\r\n\r\n                // but is in the source array (check via 'value', not 'label')\r\n                if (!isInSelected) {\r\n                    let indexInSource = isQueryIn(val, source, 'value');\r\n                    if (indexInSource > -1) {\r\n                        this.selected.push(source[indexInSource]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust starting source array to format needed, and set selected\r\n     */\r\n    prepListSourceArray() {\r\n        let mapping = this.options.sourceMapping;\r\n        this.source = processSourceArray(this.source, mapping);\r\n        this.prepSelectedFromArray(this.source);\r\n    }\r\n\r\n    /**\r\n     * @description trigger source string endpoint to generate selected array\r\n     */\r\n    prepListSourceAsync() {\r\n        this.async = true;\r\n        if (this.elementIsInput && this.element.value) {\r\n            this.handleAsync(this.element.value, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description process source function to generate selected array\r\n     */\r\n    prepListSourceFunction() {\r\n        if (this.elementIsInput && this.element.value) {\r\n            this.source.call(undefined, this.element.value, response => {\r\n                this.prepSelectedFromArray(processSourceArray(response));\r\n                this.setInputStartingStates(false);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust set sources to needed format\r\n     */\r\n    prepListSource() {\r\n        // allow complete control over the source handling via custom function\r\n        if (typeof this.source === 'function') {\r\n            return this.prepListSourceFunction();\r\n        }\r\n\r\n        // string source - treat as async endpoint\r\n        if (typeof this.source === 'string' && this.source.length) {\r\n            return this.prepListSourceAsync();\r\n        }\r\n\r\n        // array source - copy array\r\n        if (Array.isArray(this.source) && this.source.length) {\r\n            return this.prepListSourceArray();\r\n        }\r\n\r\n        // dropdown source\r\n        if (this.elementIsSelect) {\r\n            return this.prepListSourceDdl();\r\n        }\r\n\r\n        // checkboxlist source\r\n        if (this.element.querySelector('input[type=\"checkbox\"]')) {\r\n            this.prepListSourceCheckboxes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set input starting states - aria attributes, disabled state, starting value\r\n     * @param {Boolean=} setAriaAttrs\r\n     */\r\n    setInputStartingStates(setAriaAttrs = true) {\r\n        if (setAriaAttrs) {\r\n            // update corresponding label to now focus on the new input\r\n            if (this.ids.ELEMENT) {\r\n                let label = document.querySelector(\r\n                    '[for=\"' + this.ids.ELEMENT + '\"]'\r\n                );\r\n                if (label) {\r\n                    label.ariaAutocompleteOriginalFor = this.ids.ELEMENT;\r\n                    label.setAttribute('for', this.ids.INPUT);\r\n                }\r\n            }\r\n\r\n            // update aria-describedby and aria-labelledby attributes if present\r\n            let describedBy = this.element.getAttribute('aria-describedby');\r\n            if (describedBy) {\r\n                this.input.setAttribute('aria-describedby', describedBy);\r\n            }\r\n            let labelledBy = this.element.getAttribute('aria-labelledby');\r\n            if (labelledBy) {\r\n                this.input.setAttribute('aria-labelledby', labelledBy);\r\n            }\r\n        }\r\n\r\n        // if selected item(s) already exists\r\n        if (this.selected.length) {\r\n            // for multi select variant, set selected items\r\n            if (this.multiple) {\r\n                this.buildMultiSelected();\r\n            }\r\n            // for single select variant, set value to match\r\n            else {\r\n                this.setInputValue(this.selected[0].label || '', true);\r\n                this.triggerAutoGrow();\r\n            }\r\n        }\r\n\r\n        // setup input description - done here in case value is affected above\r\n        this.setInputDescription();\r\n\r\n        // disable the control if the invoked element was disabled\r\n        if (!!this.element.disabled) {\r\n            this.disable();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description build and insert component html structure\r\n     */\r\n    setHtml() {\r\n        let o = this.options;\r\n        let cssName = this.cssNameSpace;\r\n        let explainerText = o.srListLabelText;\r\n        let name = o.name ? ` ${o.name}` : ``;\r\n        let listClass = o.listClassName ? ` ${o.listClassName}` : '';\r\n        let inputClass = o.inputClassName ? ` ${o.inputClassName}` : '';\r\n        let wrapperClass = o.wrapperClassName ? ` ${o.wrapperClassName}` : '';\r\n        let explainer = explainerText ? ` aria-label=\"${explainerText}\"` : '';\r\n\r\n        let newHtml = [\r\n            `<div id=\"${this.ids.WRAPPER}\" class=\"${cssName}__wrapper${wrapperClass}\">`\r\n        ];\r\n\r\n        // add input\r\n        newHtml.push(\r\n            `<input type=\"text\" autocomplete=\"off\" aria-expanded=\"false\" aria-autocomplete=\"list\" ` +\r\n                `role=\"combobox\" id=\"${this.ids.INPUT}\" placeholder=\"${o.placeholder}\" ` +\r\n                `aria-owns=\"${this.ids.LIST}\" aria-placeholder=\"${o.placeholder}\" ` +\r\n                `class=\"${cssName}__input${inputClass}\"${name} />`\r\n        );\r\n\r\n        // button to show all available options\r\n        if (o.showAllControl) {\r\n            newHtml.push(\r\n                `<span role=\"button\" aria-label=\"${o.srShowAllText}\" class=\"${cssName}__show-all\" ` +\r\n                    `tabindex=\"0\" id=\"${this.ids.BUTTON}\" aria-expanded=\"false\"></span>`\r\n            );\r\n        }\r\n        // add the list holder\r\n        newHtml.push(\r\n            `<ul id=\"${this.ids.LIST}\" class=\"${cssName}__list${listClass}\" role=\"listbox\" ` +\r\n                `hidden=\"hidden\"${explainer}></ul>`\r\n        );\r\n        // add the screen reader assistance element\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-assistance\" ` +\r\n                `id=\"${this.ids.SR_ASSISTANCE}\">${o.srAssistiveText}</span>`\r\n        );\r\n        // add element for added screen reader announcements\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-announcements\" ` +\r\n                `id=\"${this.ids.SR_ANNOUNCEMENTS}\" aria-live=\"polite\" aria-atomic=\"true\"></span>`\r\n        );\r\n\r\n        // close all and append\r\n        newHtml.push(`</div>`);\r\n        this.element.insertAdjacentHTML('afterend', newHtml.join(''));\r\n    }\r\n\r\n    /**\r\n     * @description generate api object to expose on the element\r\n     */\r\n    generateApi() {\r\n        this.api = {\r\n            open: () => this.show.call(this),\r\n            close: () => this.hide.call(this)\r\n        };\r\n\r\n        let a = [\r\n            'options',\r\n            'refresh',\r\n            'destroy',\r\n            'filter',\r\n            'input',\r\n            'wrapper',\r\n            'list',\r\n            'selected'\r\n        ];\r\n\r\n        for (let i = 0, l = a.length; i < l; i += 1) {\r\n            this.api[a[i]] =\r\n                typeof this[a[i]] === 'function'\r\n                    ? (...args) => this[a[i]].apply(this, args)\r\n                    : this[a[i]];\r\n        }\r\n\r\n        // store api on original element\r\n        this.element.ariaAutocomplete = this.api;\r\n    }\r\n\r\n    /**\r\n     * @description refresh method for use after changing options, source, etc.\r\n     */\r\n    refresh() {\r\n        // store element, as this is wiped in destroy method\r\n        let element = this.element;\r\n        let options = mergeObjects(this.options);\r\n        // do not do a hard destroy\r\n        this.destroy();\r\n        this.init(element, options);\r\n    }\r\n\r\n    /**\r\n     * @description destroy component\r\n     */\r\n    destroy() {\r\n        // return original label 'for' attribute back to element id\r\n        let label = document.querySelector('[for=\"' + this.ids.INPUT + '\"]');\r\n        if (label && label.ariaAutocompleteOriginalFor) {\r\n            label.setAttribute('for', label.ariaAutocompleteOriginalFor);\r\n            delete label.ariaAutocompleteOriginalFor;\r\n        }\r\n        // remove the document click if still bound\r\n        if (this.documentClickBound) {\r\n            document.removeEventListener('click', this.documentClick);\r\n        }\r\n        // destroy autogrow behaviour and events\r\n        if (this.autoGrow && this.AutoGrowInput) {\r\n            this.AutoGrowInput.destroy();\r\n        }\r\n        // remove the whole wrapper\r\n        this.element.parentNode.removeChild(this.wrapper);\r\n        delete this.element.ariaAutocomplete;\r\n        // re-show original element\r\n        this.show(this.element);\r\n        // set all instance properties to null to clean up DOMNode references\r\n        for (let i in this) {\r\n            if (this.hasOwnProperty(i)) {\r\n                this[i] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description initialise AriaAutocomplete\r\n     * @param {Element} element\r\n     * @param {Object=} options\r\n     */\r\n    init(element, options) {\r\n        // ids used for DOM queries and accessibility attributes e.g. aria-controls\r\n        appIndex += 1;\r\n        this.ids = {};\r\n        this.ids.ELEMENT = element.id;\r\n        this.ids.PREFIX = `${element.id || ''}aria-autocomplete-${appIndex}`;\r\n        this.ids.LIST = `${this.ids.PREFIX}-list`;\r\n        this.ids.INPUT = `${this.ids.PREFIX}-input`;\r\n        this.ids.BUTTON = `${this.ids.PREFIX}-button`;\r\n        this.ids.OPTION = `${this.ids.PREFIX}-option`;\r\n        this.ids.WRAPPER = `${this.ids.PREFIX}-wrapper`;\r\n        this.ids.OPTION_SELECTED = `${this.ids.OPTION}-selected`;\r\n        this.ids.SR_ASSISTANCE = `${this.ids.PREFIX}-sr-assistance`;\r\n        this.ids.SR_ANNOUNCEMENTS = `${this.ids.PREFIX}-sr-announcements`;\r\n\r\n        this.selected = [];\r\n        this.element = element;\r\n        this.elementIsInput = element.nodeName === 'INPUT';\r\n        this.elementIsSelect = element.nodeName === 'SELECT';\r\n        this.options = mergeObjects(DEFAULT_OPTIONS, options);\r\n\r\n        // set these internally so that the component has to be properly refreshed to change them\r\n        this.source = this.options.source;\r\n        this.multiple = this.options.multiple;\r\n        this.autoGrow = this.options.autoGrow;\r\n        this.cssNameSpace = this.options.cssNameSpace;\r\n        this.documentClick = this.handleComponentBlur.bind(this);\r\n\r\n        // create html structure\r\n        this.setHtml();\r\n\r\n        // additional app variables\r\n        this.list = document.getElementById(this.ids.LIST);\r\n        this.input = document.getElementById(this.ids.INPUT);\r\n        this.wrapper = document.getElementById(this.ids.WRAPPER);\r\n        this.showAll = document.getElementById(this.ids.BUTTON);\r\n        this.srAnnouncements = document.getElementById(\r\n            this.ids.SR_ANNOUNCEMENTS\r\n        );\r\n\r\n        // set internal source array, from static elements if necessary\r\n        this.prepListSource();\r\n\r\n        // set any further classes on component wrapper based on options\r\n        let wrapperClass = '';\r\n        if (this.options.showAllControl) {\r\n            wrapperClass += ` ${this.cssNameSpace}__wrapper--show-all`;\r\n        }\r\n        if (this.options.autoGrow) {\r\n            wrapperClass += ` ${this.cssNameSpace}__wrapper--autogrow`;\r\n        }\r\n        if (this.multiple) {\r\n            wrapperClass += ` ${this.cssNameSpace}__wrapper--multiple`;\r\n        }\r\n        if (wrapperClass) {\r\n            addClass(this.wrapper, wrapperClass);\r\n        }\r\n\r\n        // hide element and list manually\r\n        this.hide(this.list); // pass in the list so that the onClose is not triggered\r\n        this.hide(this.element);\r\n\r\n        // generate api object to expose\r\n        this.generateApi();\r\n\r\n        // set starting states for input - must be after source has been defined\r\n        this.setInputStartingStates();\r\n\r\n        // bind all necessary events\r\n        this.bindEvents();\r\n\r\n        // fire onready callback\r\n        this.triggerOptionCallback('onReady', [this.wrapper]);\r\n    }\r\n}\r\n\r\n/**\r\n * @description expose specific function rather than the AriaAutocomplete class\r\n * @param {Element} elem\r\n * @param {Object} options\r\n * @returns {Object}\r\n */\r\nwindow['AriaAutocomplete'] = (elem, options) => {\r\n    return new AriaAutocomplete(elem, options).api;\r\n};\r\n\r\nexport default (elem, options) => {\r\n    return new AriaAutocomplete(elem, options).api;\r\n};\r\n"]}