{"version":3,"sources":["closest-polyfill.js","autocomplete-helpers.js","autogrow.js","aria-autocomplete.js"],"names":["Element","prototype","matches","msMatchesSelector","webkitMatchesSelector","closest","s","el","parentElement","parentNode","nodeType","trimString","theString","trim","hasClass","element","className","e","cur","getAttribute","indexOf","addClass","classes","currentValue","current","finalValue","i","cs","split","l","length","setAttribute","removeClass","replace","REGEX_AMPERSAND","REGEX_DUPE_WHITESPACE","REGEX_TO_IGNORE","REGEX_MAKE_SAFE","cleanString","makeSafeForRegex","toLowerCase","isPrintableKey","keyCode","mergeObjects","n","o","p","hasOwnProperty","dispatchEvent","event","document","createEvent","initEvent","fireEvent","setElementState","selected","instance","nodeName","checked","elementChangeEventTimer","clearTimeout","setTimeout","processSourceArray","sourceArray","mapping","setCleanedLabel","toReturn","mapValue","mapLabel","result","entry","value","label","toString","ariaAutocompleteCleanedLabel","push","DIV","createElement","htmlToElement","html","innerHTML","firstChild","setCss","style","transferStyles","from","to","properties","fromStyles","getComputedStyle","styles","searchPropFor","prop","regexSafeQuery","name","search","Array","isArray","searchVarPropsFor","obj","props","query","makeSafe","proceed","removeDuplicatesAndLabel","arr","str","j","testSpan","AutoGrow","input","currentString","eventHandler","currentWidth","init","checkAndSet","call","start","selectionStart","selectionEnd","selection","focus","createRange","selectionLength","text","moveStart","position","top","left","width","padding","whiteSpace","body","appendChild","textContent","offsetWidth","clientWidth","metaKey","altKey","placeholder","type","keyCodeIsDelete","keyCodeIsBackspace","getInputSelection","substring","undefined","shift","shiftKey","character","String","fromCharCode","toUpperCase","measureString","removeEventListener","bind","addEventListener","appIndex","DEFAULT_OPTIONS","source","sourceMapping","alsoSearchIn","delay","minLength","maxResults","showAllControl","confirmOnBlur","multiple","autoGrow","maxItems","multipleSeparator","deleteOnBackspace","asyncQueryParam","asyncMaxResultsParam","noResultsText","cssNameSpace","listClassName","inputClassName","wrapperClassName","srDeleteText","srDeletedText","srShowAllText","srSelectedText","srListLabelText","srAssistiveText","srResultsText","onAsyncPrep","onAsyncSuccess","onResponse","onSearch","onConfirm","onDelete","onReady","onClose","onOpen","AriaAutocomplete","options","ariaAutocomplete","open","api","elementIsInput","elementIsSelect","list","wrapper","showAll","srAnnouncements","ids","xhr","term","async","menuOpen","disabled","filtering","forceShowAll","filteredSource","currentListHtml","inputPollingValue","currentSelectedIndex","documentClick","documentClickBound","filterTimer","pollingTimer","announcementTimer","componentBlurTimer","AutoGrowInput","args","context","apply","toRemove","removeAttribute","expanded","show","triggerOptionCallback","hide","trigger","setPollingValue","ariaAutocompleteSelectedOption","childNodes","a","isSelectedElem","index","option","splice","buildMultiSelected","announce","disable","enable","currentSelectedElems","getSelectedElems","isInSelected","removeChild","deleteText","fragment","createDocumentFragment","selectedClass","isInDom","span","insertBefore","id","OPTION_SELECTED","LIST","join","toSet","exists","describedBy","SR_ASSISTANCE","cssName","nodes","resetOptionAttributes","target","setOptionFocus","toFocus","toAdd","valToSet","valToSetString","focusAfterSelection","alreadySelected","setInputValue","triggerAutoGrow","setSourceElementValues","results","resultsLoop","k","labelMatch","toShow","optionId","OPTION","updated","removeSelectedFromResults","callback","noText","optionClass","cancelFilterPrep","newListHtml","isFirstCall","XMLHttpRequest","encode","encodeURIComponent","isShowAll","unlimited","baseAmount","ampersandOrQuestionMark","test","url","abort","onload","readyState","DONE","status","callbackResponse","responseText","items","prepSelectedFromArray","setInputStartingStates","setListOptions","send","handleAsync","check","searchIn","concat","staticSourceIndex","response","nameSpace","doValueOverrideCheck","runNow","setInputDescription","modifier","ctrlKey","equalVals","filter","showAllPrepTimer","preventDefault","filterPrep","force","activeElem","activeElement","contains","isQueryIn","indexOfQueryIn","toUse","handleOptionSelect","removeEntryFromSelected","filterPrepShowAll","targetIsInput","handleEnterKey","selectedLength","printableKey","focusInput","handleComponentBlur","handleUpArrowKey","handleDownArrowKey","handleKeyDownDefault","startPolling","prepKeyDown","wrapperFocusClasses","inputFocusClasses","cancelPolling","nodeIndex","elements","querySelectorAll","checkbox","toPush","querySelector","separator","valueArr","val","indexInSource","prepListSourceFunction","prepListSourceAsync","prepListSourceArray","prepListSourceDdl","prepListSourceCheckboxes","setAriaAttrs","ELEMENT","ariaAutocompleteOriginalFor","INPUT","labelledBy","explainerText","listClass","inputClass","wrapperClass","explainer","newHtml","WRAPPER","BUTTON","SR_ANNOUNCEMENTS","insertAdjacentHTML","close","destroy","PREFIX","setHtml","getElementById","prepListSource","generateApi","bindEvents","window","elem"],"mappings":";AAAKA,QAAQC,UAAUC,UACnBF,QAAQC,UAAUC,QAAUF,QAAQC,UAAUE,mBAAqBH,QAAQC,UAAUG,uBAEpFJ,QAAQC,UAAUI,UACnBL,QAAQC,UAAUI,QAAU,SAAUC,GAC9BC,IAAAA,EAAK,KACN,EAAA,CACKA,GAAAA,EAAGL,QAAQI,GACJC,OAAAA,EAEXA,EAAKA,EAAGC,eAAiBD,EAAGE,iBAChB,OAAPF,GAA+B,IAAhBA,EAAGG,UACpB,OAAA;;ACoUd,aA5UM,SAASC,EAAWC,GAChBA,OAAa,MAAbA,EAAoB,IAAMA,EAAY,IAAIC,OAS9C,SAASC,EAASC,EAASC,GAC1BC,IAAAA,EAAIF,EACJG,EAAMP,EAAWM,EAAEE,cAAgBF,EAAEE,aAAa,UAC/C,MAAA,IAAID,OAAAA,EAAOE,KAAAA,QAAYJ,IAAAA,OAAAA,EAAgB,OAAC,EAQ5C,SAASK,EAASN,EAASO,GAOzB,IANDC,IAAAA,EAAeZ,EACfI,EAAQI,cAAgBJ,EAAQI,aAAa,UAE7CK,EAAU,IAAMD,EAAe,IAC/BE,EAAa,GAERC,EAAI,EAAGC,EAAKL,EAAQM,MAAM,KAAMC,EAAIF,EAAGG,OAAQJ,EAAIG,EAAGH,GAAK,EAClD,KAAVC,EAAGD,KAAqD,IAAxCF,EAAQJ,QAAQ,IAAMO,EAAGD,GAAK,OAC9CD,GAAc,IAAME,EAAGD,IAG3BH,KAAkBE,EAAad,EAAWY,EAAeE,KACzDV,EAAQgB,aAAa,QAASN,GAS/B,SAASO,EAAYjB,EAASO,GAM5B,IALDC,IAAAA,EAAeZ,EACfI,EAAQI,cAAgBJ,EAAQI,aAAa,UAE7CM,EAAa,IAAMF,EAAe,IAE7BG,EAAI,EAAGC,EAAKL,EAAQM,MAAM,KAAMC,EAAIF,EAAGG,OAAQJ,EAAIG,EAAGH,GAAK,EAChED,EAAaA,EAAWQ,QAAQ,IAAMN,EAAGD,GAAK,IAAK,KAEnDH,KAAkBE,EAAad,EAAWc,KAC1CV,EAAQgB,aAAa,QAASN,GAuRrC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,YAAA,EAAA,QAAA,YAAA,EAAA,QAAA,eAAA,EAAA,QAAA,aAAA,EAAA,QAAA,cAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,mBAAA,EAAA,QAAA,cAAA,EAAA,QAAA,OAAA,EAAA,QAAA,eAAA,EAAA,QAAA,kBAAA,EAAA,QAAA,yBAAA,EAlRD,IAAMS,EAAkB,KAClBC,EAAwB,SACxBC,EAAkB,4BAClBC,EAAkB,8BAOjB,SAASC,EAAY1B,GAAW2B,IAAAA,EAAmB,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAS/C3B,OALPA,GADAA,GADAA,GADAA,EAAYD,EAAWC,GAAW4B,eACZP,QAAQG,EAAiB,KACzBH,QAAQC,EAAiB,QACzBD,QAAQE,EAAuB,KAEjDI,IACA3B,EAAYA,EAAUqB,QAAQI,EAAiB,SAE5CzB,EAQJ,SAAS6B,EAAeC,GAEtBA,OAAAA,GAAW,IAAMA,GAAW,IAC5BA,GAAW,IAAMA,GAAW,IAC5BA,GAAW,IAAMA,GAAW,KAC5BA,GAAW,KAAOA,GAAW,KAClB,KAAZA,GACY,IAAZA,GACY,KAAZA,EASD,SAASC,IAEP,IADDC,IAAAA,EAAI,GACClB,EAAI,EAAGG,EAAI,UAAKC,OAAQJ,EAAIG,EAAGH,GAAK,EAAG,CACxCmB,IAAAA,EAASnB,EAAAA,GAAAA,UAAAA,QAAAA,OAAAA,EAAAA,UAAAA,GACR,IAAA,IAAIoB,KAAKD,EACNA,EAAEE,eAAeD,SAAsB,IAATD,EAAEC,KAChCF,EAAEE,GAAKD,EAAEC,IAIdF,OAAAA,EAQJ,SAASI,EAAcjC,EAASkC,GAC/B,GAAA,gBAAiBC,SAAU,CACvBjC,IAAAA,EAAIiC,SAASC,YAAY,cAC7BlC,EAAEmC,UAAUH,GAAO,GAAM,GACzBlC,EAAQiC,cAAc/B,QAEtBF,EAAQsC,UAAU,KAAOJ,GAU1B,SAASK,EAAgBvC,EAASwC,EAAUC,GAC/CD,IAAaA,EACTxC,IAGyB,UAArBA,EAAQ0C,UACmB,kBAApB1C,EAAQ2C,SACf3C,EAAQ2C,UAAYH,IAEpBxC,EAAQ2C,QAAUH,EAClBP,EAAcjC,EAAS,WAIF,WAArBA,EAAQ0C,UAAyB1C,EAAQwC,WAAaA,IACtDxC,EAAQwC,SAAWA,EAEfC,EAASG,yBACTC,aAAaJ,EAASG,yBAE1BH,EAASG,wBAA0BE,WAAW,WAC1Cb,EAAcjC,EAAQV,QAAQ,UAAW,WAC1C,KAYR,SAASyD,EAAmBC,GAI1B,IAJuCC,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIC,EAAiB,UAAA,OAAA,EAAA,UAAA,QAAA,EACvEC,EAAW,GACXC,EAAWH,EAAO,MAClBI,EAAWJ,EAAO,MACbtC,EAAI,EAAGG,EAAIkC,EAAYjC,OAAQJ,EAAIG,EAAGH,GAAK,EAAG,CAC/C2C,IAAAA,EAAS,GACTC,EAAQP,EAAYrC,GAEpB,GAAiB,iBAAV4C,EACPD,EAAOE,MAAQF,EAAOG,MAAQF,MAG7B,CAGGC,IAAAA,GADJF,EAAS1B,EAAa2B,IACHH,IAAaE,EAAOE,OAASF,EAAOG,MACnDA,EAAQH,EAAOD,IAAaC,EAAOG,OAASH,EAAOE,MACvDF,EAAOE,OAASA,GAAS,IAAIE,WAC7BJ,EAAOG,OAASA,GAAS,IAAIC,YAGT,IAApBR,IACAI,EAAOK,6BAA+BpC,EAAY+B,EAAOG,QAE7DN,EAASS,KAAKN,GAEXH,OAAAA,EAGX,IAAMU,EAAM1B,SAAS2B,cAAc,OAM5B,SAASC,EAAcC,GAEnBH,OADPA,EAAII,UAAYrE,EAAWoE,GACpBH,EAAIK,WAQR,SAASC,EAAOnE,EAAST,GACxB,GAACS,EAGA,IAAA,IAAIW,KAAKpB,EAAG,CACT6E,IAAAA,EAAwB,iBAAT7E,EAAEoB,GAAkBpB,EAAEoB,GAAK,KAAOpB,EAAEoB,GACvDX,EAAQoE,MAAMzD,GAAKyD,EAAQ,IAU5B,SAASC,EAAeC,EAAMC,EAAIC,GACjC,GAACF,GAASC,EAAV,CAGAE,IAAAA,EAAaC,iBAAiBJ,GAC9BK,EAAS,GAETH,GAAAA,GAAcA,EAAWzD,OACpB,IAAA,IAAIJ,EAAI,EAAGG,EAAI0D,EAAWzD,OAAQJ,EAAIG,EAAGH,GAAK,EAC/CgE,EAAOH,EAAW7D,IAAM8D,EAAWD,EAAW7D,SAGlDgE,EAASF,EAGbN,EAAOI,EAAII,IASf,IAAMC,EAAgB,SAAhBA,EAAiBC,EAAMC,EAAgBC,GACrC,GAAgB,iBAATF,EAIAA,MAHM,iCAATE,IACAF,EAAOtD,EAAYsD,GAAM,KAEW,IAAjCA,EAAKG,OAAOF,GAChB,GAAIG,MAAMC,QAAQL,GAChB,IAAA,IAAIlE,EAAI,EAAGG,EAAI+D,EAAK9D,OAAQJ,EAAIG,EAAGH,GAAK,EACrCiE,GAAAA,EAAcC,EAAKlE,GAAImE,GAChB,OAAA,EAIZ,OAAA,GASJ,SAASK,EAAkBC,EAAKC,EAAOC,GAAOC,IAAAA,EAAW,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAKvD,IAAA,IAAI5E,KAJL4E,IACAD,EAAQ/D,EAAY+D,GAAO,IAGjBF,EACNA,GAAAA,EAAIpD,eAAerB,GAAI,CACnB6E,IAAAA,GAAU,EAEV,GAAkB,iBAAXJ,EAAIzE,IAGJG,IADHA,IAAAA,EAAIuE,EAAMtE,OACPD,KACCuE,GAAAA,EAAMvE,KAAOH,EAAG,CAChB6E,GAAU,EACV,YAKRA,EAAUP,MAAMC,QAAQE,EAAIzE,IAE5B6E,GAAAA,GAAWZ,EAAcQ,EAAIzE,GAAI2E,EAAO3E,GACjC,OAAA,EAIZ,OAAA,EAQJ,SAAS8E,EAAyBC,GAGhC,IADDpC,IAAAA,EAAS,GACJ3C,EAAI,EAAGG,EAAI4E,EAAI3E,OAAQJ,EAAIG,EAAGH,GAAK,EACpC,GAAkB,iBAAX+E,EAAI/E,GAAX,CAMG6E,IAHHG,IAAAA,EAAM/F,EAAW8F,EAAI/E,IACrB6E,EAAkB,UAARG,EACVC,EAAItC,EAAOvC,OACRyE,GAAWI,KACVtC,EAAOsC,KAAOD,IACdH,GAAU,GAGdA,GACAlC,EAAOM,KAAK+B,GAGbrC,OAAAA;;ACtKN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzKL,IAKIuC,EALJ,EAAA,QAAA,0BAyKK,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA9JgBC,IAAAA,EA8JhB,WA7JWC,SAAAA,EAAAA,GAAO,EAAA,KAAA,GACVA,KAAAA,MAAQA,EACRC,KAAAA,cACAC,KAAAA,aACAC,KAAAA,aACAC,KAAAA,OAwJR,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,UAlJS,MAAA,WACDC,KAAAA,YAAYC,KAAK,QAiJzB,CAAA,IAAA,oBA3ImB,MAAA,WACZ/C,IAAAA,EAAS,GACT,GAAA,mBAAoB,KAAKyC,MACzBzC,EAAOgD,MAAQ,KAAKP,MAAMQ,eAC1BjD,EAAOvC,OAAS,KAAKgF,MAAMS,aAAelD,EAAOgD,WAC9C,GAAInE,SAASsE,UAAW,CACtBV,KAAAA,MAAMW,QACPD,IAAAA,EAAYtE,SAASsE,UAAUE,cAC/BC,EAAkBH,EAAUI,KAAK9F,OACrC0F,EAAUK,UAAU,aAAc,KAAKf,MAAMvC,MAAMzC,QACnDuC,EAAOgD,MAAQG,EAAUI,KAAK9F,OAAS6F,EACvCtD,EAAOvC,OAAS6F,EAEbtD,OAAAA,IA8HV,CAAA,IAAA,gBAtHaqC,MAAAA,SAAAA,GACN,OAACA,EAODA,IAAQ,KAAKK,cACN,KAAKE,cAGXL,IACDA,EAAW1D,SAAS2B,cAAc,SAC3B+B,EAAAA,EAAAA,QAAAA,EAAU,CACbkB,SAAU,WACVC,KAAM,MACNC,MAAO,MACPC,MAAO,OACPC,QAAS,EACTC,WAAY,QAEhBjF,SAASkF,KAAKC,YAAYzB,IAG9BA,EAAS0B,YAAc5B,EAClBK,KAAAA,cAAgBL,GAEN,EAAA,EAAA,gBAAA,KAAKI,MAAOF,EAAU,CACjC,gBACA,WACA,aACA,aACA,kBAGGA,EAAS2B,aAAe3B,EAAS4B,cAlC/BzB,KAAAA,cAAgBL,EACd,KAmHd,CAAA,IAAA,cA3EuB,MAAA,WAAZzD,IAAAA,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACZA,IAAAA,EAAMwF,UAAWxF,EAAMyF,OAAvBzF,CAIAsB,IAqCAoE,EArCApE,EAAQ,KAAKuC,MAAMvC,MACnBtB,GAAAA,EAAM2F,MAAqC,YAA7B3F,EAAM2F,KAAKpG,cAA6B,CAClDE,IAAAA,EAAUO,EAAMP,QAChBmG,EAA8B,KAAZnG,EAClBoG,EAAiC,IAAZpG,EAGrBmG,GAAAA,GAAmBC,EAAoB,CACnCtB,IAAAA,EAAY,KAAKuB,oBACjBvB,EAAU1F,OACVyC,EACIA,EAAMyE,UAAU,EAAGxB,EAAUH,OAC7B9C,EAAMyE,UAAUxB,EAAUH,MAAQG,EAAU1F,QACzCgH,GAAsBtB,EAAUH,MACvC9C,EACIA,EAAMyE,UAAU,EAAGxB,EAAUH,MAAQ,GACrC9C,EAAMyE,UAAUxB,EAAUH,MAAQ,GAC/BwB,QAAuCI,IAApBzB,EAAUH,QACpC9C,EACIA,EAAMyE,UAAU,EAAGxB,EAAUH,OAC7B9C,EAAMyE,UAAUxB,EAAUH,MAAQ,SAKzC,IAAI,EAAe3E,EAAAA,gBAAAA,GAAU,CAC1BwG,IAAAA,EAAQjG,EAAMkG,SACdC,EAAYC,OAAOC,aAAa5G,GAMpC6B,GAJI6E,EADAF,EACYE,EAAUG,cAEVH,EAAU5G,gBAO7B+B,IAAUoE,EAAc,KAAK7B,MAAM3F,aAAa,kBACjDoD,EAAQoE,GAGRV,IAAAA,EAAQ,KAAKuB,cAAcjF,GAAS,EACpC0D,IAAU,KAAKhB,eACVA,KAAAA,aAAegB,EACfnB,KAAAA,MAAM3B,MAAM8C,MAAWA,GAAAA,OAAAA,EAA5B,UAyBP,CAAA,IAAA,UAlBS,MAAA,WACDnB,KAAAA,MAAM2C,oBAAoB,OAAQ,KAAKzC,cACvCF,KAAAA,MAAM2C,oBAAoB,QAAS,KAAKzC,cACxCF,KAAAA,MAAM2C,oBAAoB,QAAS,KAAKzC,cACxCF,KAAAA,MAAM2C,oBAAoB,UAAW,KAAKzC,cAC1CF,KAAAA,MAAQ,OAahB,CAAA,IAAA,OAPM,MAAA,WACEK,KAAAA,cACAH,KAAAA,aAAe,KAAKG,YAAYuC,KAAK,MACrC5C,KAAAA,MAAM6C,iBAAiB,OAAQ,KAAK3C,cACpCF,KAAAA,MAAM6C,iBAAiB,QAAS,KAAK3C,cACrCF,KAAAA,MAAM6C,iBAAiB,QAAS,KAAK3C,cACrCF,KAAAA,MAAM6C,iBAAiB,UAAW,KAAK3C,kBAC/C,EAAA,GAAA,QAAA,QAAA;;ACqnDJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA9xDD,QAAA,sBACA,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,QAAA,0BA4xDC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA5wDD,IAAI4C,EAAW,EAETC,EAAkB,CAOpB/D,KAAM,GAONgE,OAAQ,GAKRC,cAAe,GAMfC,aAAc,GAKdC,MAAO,IAIPC,UAAW,EAIXC,WAAY,KAKZC,gBAAgB,EAKhBC,eAAe,EAKfC,UAAU,EAKVC,UAAU,EAIVC,SAAU,KAKVC,kBAAmB,IAKnBC,mBAAmB,EAMnBC,gBAAiB,IAKjBC,qBAAsB,QAKtBjC,YAAa,GAKbkC,cAAe,aAKfC,aAAc,oBAIdC,cAAe,GAIfC,eAAgB,GAIhBC,iBAAkB,GAMlBC,aAAc,SAKdC,cAAe,UAIfC,cAAe,WAKfC,eAAgB,WAKhBC,gBAAiB,qBAKjBC,gBACI,gJAKJC,cAAe,SAAA1J,GACRA,MAAAA,GAAAA,OAAAA,EAAUA,KAAAA,OAAW,IAAXA,EAAe,SAAW,UADtB,gBAOrB2J,iBAAaxC,EAKbyC,oBAAgBzC,EAKhB0C,gBAAY1C,EAKZ2C,cAAU3C,EAKV4C,eAAW5C,EAMX6C,cAAU7C,EAIV8C,aAAS9C,EAIT+C,aAAS/C,EAITgD,YAAQhD,GAONiD,EAokDL,WAnkDenL,SAAAA,EAAAA,EAASoL,GAEb,GAFsB,EAAA,KAAA,GAErBpL,EAAD,CAKAA,GAAAA,EAAQqL,kBAAoBrL,EAAQqL,iBAAiBC,KAC9C,MAAA,CAAEC,IAAKvL,EAAQqL,kBAIrBD,KAAAA,QACApL,KAAAA,QACAwL,KAAAA,eACAC,KAAAA,gBAGAC,KAAAA,KACA3F,KAAAA,MACA4F,KAAAA,QACAC,KAAAA,QACAC,KAAAA,gBAGAC,KAAAA,IACAC,KAAAA,IACAC,KAAAA,KACAC,KAAAA,MACAlD,KAAAA,OACAmD,KAAAA,SACA3C,KAAAA,SACA/G,KAAAA,SACA2J,KAAAA,SACA3C,KAAAA,SACA4C,KAAAA,UACArC,KAAAA,aACAsC,KAAAA,aACAC,KAAAA,eACAC,KAAAA,gBACAC,KAAAA,kBACAC,KAAAA,qBAGAC,KAAAA,cACAC,KAAAA,mBAGAC,KAAAA,YACAC,KAAAA,aACAC,KAAAA,kBACAC,KAAAA,mBACAnK,KAAAA,wBAGAoK,KAAAA,cAGA7G,KAAAA,KAAKnG,EAASoL,IAygD1B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,wBAhgDyBrG,MAAAA,SAAAA,EAAMkI,EAAMC,GAE1B,GADJA,OAA6B,IAAZA,EAA0B,KAAK3B,IAAM2B,EACpB,mBAAvB,KAAK9B,QAAQrG,GACb,OAAA,KAAKqG,QAAQrG,GAAMoI,MAAMD,EAASD,KA6/CpD,CAAA,IAAA,OAr/CQjN,MAAAA,SAAAA,GACG,QAAmB,IAAZA,EAAyB,CAC5BoN,IAAAA,EAAc,GAAA,OAAA,KAAKrD,aAAvB,sBAEO/J,OADKA,EAAAA,EAAAA,aAAAA,EAASoN,GACdpN,EAAQqN,gBAAgB,UAI/B,GADCtH,KAAAA,MAAM/E,aAAa,gBAAiB,QACrC,KAAK4K,QAAS,CACV0B,IAAAA,KAAc,KAAKjB,cAAc3I,WAChCkI,KAAAA,QAAQ5K,aAAa,gBAAiBsM,GAE1C,KAAKpB,WACDqB,KAAAA,KAAK,KAAK7B,MACVQ,KAAAA,UAAW,EACXsB,KAAAA,sBAAsB,SAAU,CAAC,KAAK9B,OACtC,KAAKiB,qBACDA,KAAAA,oBAAqB,EAC1BxK,SAASyG,iBAAiB,QAAS,KAAK8D,mBAm+CvD,CAAA,IAAA,OA39CQ1M,MAAAA,SAAAA,GACG,QAAmB,IAAZA,EAEAA,OADEA,EAAAA,EAAAA,UAAAA,EAAY,GAAA,OAAA,KAAK+J,aAA1B,uBACO/J,EAAQgB,aAAa,SAAU,UAGrCyL,KAAAA,sBAAwB,EACxB1G,KAAAA,MAAM/E,aAAa,gBAAiB,SACrC,KAAK4K,SACAA,KAAAA,QAAQ5K,aAAa,gBAAiB,SAE3C,KAAKkL,WACAuB,KAAAA,KAAK,KAAK/B,MACVQ,KAAAA,UAAW,EACXsB,KAAAA,sBAAsB,UAAW,CAAC,KAAK9B,UA68CvD,CAAA,IAAA,SAt8CY,MAAA,WACD,GAAA,KAAKS,SAAU,CACVA,KAAAA,UAAW,EACXpG,KAAAA,MAAMoG,UAAW,EAClBtK,IAAAA,EAAI,KAAKkI,cACD,EAAA,EAAA,aAAA,KAAKhE,MAAUlE,GAAAA,OAAAA,EAA3B,gCACY,EAAA,EAAA,aAAA,KAAK8J,QAAY9J,GAAAA,OAAAA,EAA7B,iCACI,KAAK+J,UACAA,KAAAA,QAAQ5K,aAAa,WAAY,MAC1B,EAAA,EAAA,aAAA,KAAK4K,QAAY/J,GAAAA,OAAAA,EAA7B,sCA67Cf,CAAA,IAAA,UAr7Ca,MAAA,WACF,IAAC,KAAKsK,SAAU,CACXA,KAAAA,UAAW,EACXpG,KAAAA,MAAMoG,UAAW,EAClBtK,IAAAA,EAAI,KAAKkI,cACJ,EAAA,EAAA,UAAA,KAAKhE,MAAUlE,GAAAA,OAAAA,EAAxB,gCACS,EAAA,EAAA,UAAA,KAAK8J,QAAY9J,GAAAA,OAAAA,EAA1B,iCACI,KAAK+J,UACAA,KAAAA,QAAQ5K,aAAa,WAAY,OAC7B,EAAA,EAAA,UAAA,KAAK4K,QAAY/J,GAAAA,OAAAA,EAA1B,sCA46Cf,CAAA,IAAA,kBAp6CqB,MAAA,WACV,KAAK2H,UAAY,KAAKwD,eACjBA,KAAAA,cAAcU,YAk6C9B,CAAA,IAAA,gBAz5CiBlK,MAAAA,SAAAA,GAAOmK,IAAAA,EAAkB,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAC9B5H,KAAAA,MAAMvC,MAAQ,KAAKwI,KAAOxI,EAC3BmK,IACKnB,KAAAA,kBAAoBhJ,KAs5CpC,CAAA,IAAA,iBA34CkB4H,MAAAA,SAAAA,GAAS9F,IAAAA,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,KAAKS,MAAMvC,MAAOqB,EAAM,UAAA,OAAA,EAAA,UAAA,QAAA,EAEhDS,GADJA,GAAQ,EAAWA,EAAAA,YAAAA,GAAO7D,cACf,CACPoD,EAAOA,GAAQ,QACV,IAAA,IAAIlE,EAAI,EAAGG,EAAIsK,EAAQrK,OAAQJ,EAAIG,EAAGH,GAAK,EACxC,IAAA,EAAWyK,EAAAA,YAAAA,EAAQzK,GAAGkE,IAAOpD,gBAAkB6D,EACxC3E,OAAAA,EAIZ,OAAC,IAi4Cf,CAAA,IAAA,WAz3CYkG,MAAAA,SAAAA,EAAMqC,GAAO,IAAA,EAAA,KACd,GAACrC,GAAS,KAAKgF,gBAAf,CAIA3C,GAAU,IAAVA,EACQ,OAAA,KAAK2C,gBAAgBtE,YAAcV,EAE/CqC,EAAyB,iBAAVA,EAAqBA,EAAQ,IACxC,KAAK4D,mBACLjK,aAAa,KAAKiK,mBAEjBA,KAAAA,kBAAoBhK,WAAW,WAChC,EAAK+I,gBAAgBtE,YAAcV,GACpCqC,MA22CV,CAAA,IAAA,iBAn2CkBlJ,MAAAA,SAAAA,GAEP,OAAA,KAAKuJ,UACLvJ,EAAQ4N,iCACR,EAAS5N,EAAAA,UAAAA,EAAY,GAAA,OAAA,KAAK+J,aAH9B,iBAk2CP,CAAA,IAAA,mBAv1CsB,MAAA,WAGV,IAFDlI,IAAAA,EAAI,KAAK8J,QAAQkC,WACjBC,EAAI,GACCnN,EAAI,EAAGG,EAAIe,EAAEd,OAAQJ,EAAIG,EAAGH,GAAK,EAClC,KAAKoN,eAAelM,EAAElB,KACtBmN,EAAElK,KAAK/B,EAAElB,IAGVmN,OAAAA,IA+0Cd,CAAA,IAAA,0BAx0C2BvK,MAAAA,SAAAA,GAChByK,IAAAA,EAAQ,KAAKxL,SAASnC,QAAQkD,GAC9ByK,IAAW,IAAXA,EAEK,IAAA,IAAIrN,EAAI,EAAGG,EAAI,KAAK0B,SAASzB,OAAQJ,EAAIG,EAAGH,GAAK,EAC9C,GAAA,KAAK6B,SAAS7B,GAAG6C,QAAUD,EAAMC,MAAO,CACxCwK,EAAQrN,EACR,MAMRqN,GAAAA,GAAS,GAAK,KAAKxL,SAASwL,GAAQ,CAChCC,IAAAA,GAAS,EAAa,EAAA,cAAA,KAAKzL,SAASwL,IACpCvK,EAAQwK,EAAOxK,OACHwK,EAAAA,EAAAA,iBAAAA,EAAOjO,SAAS,EAAO,MAClCwC,KAAAA,SAAS0L,OAAOF,EAAO,GACvBR,KAAAA,sBAAsB,WAAY,CAACS,IACnCE,KAAAA,qBACAC,KAAAA,SAAY3K,GAAAA,OAAAA,EAAS,KAAA,OAAA,KAAK2H,QAAQhB,eAAiB,MAozCnE,CAAA,IAAA,qBA5yCwB,MAAA,WAEb,GAAC,KAAKb,SAAN,CAKA,KAAKA,UAAY,KAAK/G,SAASzB,QAAU,KAAKqK,QAAQ3B,SACjD4E,KAAAA,UAEAC,KAAAA,SAILC,IAAAA,EAAuB,KAAKC,mBAC5B,GAAC,KAAKhM,SAASzB,QAAWwN,EAAqBxN,OAA/C,CAOGJ,IAFHF,IAAAA,EAAU,GACVE,EAAI4N,EAAqBxN,OACtBJ,KAAK,CAIDG,IAHHmN,IAAAA,EAASM,EAAqB5N,GAAGiN,+BACjC9M,EAAI,KAAK0B,SAASzB,OAClB0N,GAAe,EACZ3N,KAAK,CACJ0B,IAAAA,EAAW,KAAKA,SAAS1B,GACzB0B,GAAAA,IAAayL,GAAUzL,EAASgB,QAAUyK,EAAOzK,MAAO,CACxDiL,GAAe,EACf,OAGJA,EACAhO,EAAQmD,KAAK2K,EAAqB5N,IAE7BgL,KAAAA,QAAQ+C,YAAYH,EAAqB5N,IAQjD,IAHDgO,IAAAA,EAAa,KAAKvD,QAAQjB,aAC1ByE,EAAWzM,SAAS0M,yBACpBC,EAAmB,GAAA,OAAA,KAAK/E,aAA5B,cACSpJ,EAAI,EAAGG,EAAI,KAAK0B,SAASzB,OAAQJ,EAAIG,EAAGH,GAAK,EAAG,CAI9CG,IAHH0B,IAAAA,EAAW,KAAKA,SAAS7B,GACzBG,EAAIL,EAAQM,OACZgO,GAAU,EACPjO,KAAK,CACJmN,IAAAA,EAASxN,EAAQK,GAAG8M,+BACpBK,GAAAA,IAAWzL,GAAYyL,EAAOzK,QAAUhB,EAASgB,MAAO,CACxDuL,GAAU,EACV,OAGJ,IAACA,EAAS,CACNtL,IAAAA,EAAQjB,EAASiB,MACjBuL,GAAO,EACP,EAAA,eAAA,8BAA8BF,OAAAA,EACEH,MAAAA,4BAAAA,OAAAA,EAAclL,KAAAA,OAAAA,EACvCA,MAAAA,GAAAA,OAAAA,EAHA,YAKXuL,EAAKpB,+BAAiCpL,EACtCoM,EAAStH,YAAY0H,IAGzBJ,EAASf,YAAce,EAASf,WAAW9M,QACtC4K,KAAAA,QAAQsD,aAAaL,EAAU,KAAKlD,MAOxC,IAHDI,IAAAA,EAAM,GAGDnL,EAAI,EAAGG,GADhBL,EAAU,KAAK+N,oBACazN,OAAQJ,EAAIG,EAAGH,GAAK,EAAG,CAC3CuO,IAAAA,EAAQ,GAAA,OAAA,KAAKpD,IAAIqD,gBAAmBxO,KAAAA,OAAAA,GACxCF,EAAQE,GAAGK,aAAa,KAAMkO,GAC9BpD,EAAIlI,KAAKsL,GAQT,GANJpD,EAAIlI,KAAK,KAAKkI,IAAIsD,MAGbrJ,KAAAA,MAAM/E,aAAa,YAAa8K,EAAIuD,KAAK,MAG1C,KAAK7F,UAAY,KAAK4B,QAAQxD,YAAa,CACvC0H,IAAAA,EAAQ,KAAK9M,SAASzB,OAAS,GAAK,KAAKqK,QAAQxD,YAChD7B,KAAAA,MAAM/E,aAAa,cAAesO,QAqtClD,CAAA,IAAA,sBA9sCyB,MAAA,WACdC,IAAAA,EAAS,KAAKxJ,MAAM3F,aAAa,oBACjCK,GAAU,EAAW8O,EAAAA,YAAAA,GAAU,IAC/BC,EAAc/O,EAAQS,QAAQ,KAAK4K,IAAI2D,cAAe,IAE1B,IAA5B,KAAK1J,MAAMvC,MAAMzC,SACjByO,EAAcA,EAAc,IAAM,KAAK1D,IAAI2D,gBAI1CD,GAAc,EAAWA,EAAAA,YAAAA,IACtBA,IAAgB/O,GACXsF,KAAAA,MAAM/E,aAAa,mBAAoBwO,GAEzCD,GACFxJ,KAAAA,MAAMsH,gBAAgB,sBA+rCtC,CAAA,IAAA,wBAxrC2B,MAAA,WAKbvM,IAJH4O,IAAAA,EAAU,KAAK3F,aACf4F,EAAQ,KAAKjE,KAAKmC,WAClB/M,EAAI6O,EAAM5O,OAEPD,MACS6O,EAAAA,EAAAA,aAAAA,EAAM7O,GAAO4O,GAAAA,OAAAA,EAAzB,oCACAC,EAAM7O,GAAGE,aAAa,gBAAiB,WAirClD,CAAA,IAAA,iBAxqCkBkB,MAAAA,SAAAA,EAAO8L,GAEb4B,KAAAA,wBAGDxE,IAAAA,EAAU,KAAKM,KAAKmC,WACpBG,GAAAA,EAAQ,IAAM5C,IAAYA,EAAQrK,OAMlC,OALK0L,KAAAA,sBAAwB,OAEzBvK,GAASA,EAAM2N,SAAW,KAAK9J,OAC1BA,KAAAA,MAAMW,SAMfsH,GAAAA,GAAS5C,EAAQrK,OAGjB,OAFK0L,KAAAA,qBAAuBrB,EAAQrK,OAAS,OACxC+O,KAAAA,eAAe5N,EAAO,KAAKuK,sBAKhCsD,IAAAA,EAAU3E,EAAQ4C,GAClB+B,GAAAA,GAAuD,iBAArCA,EAAQ3P,aAAa,YAA0B,CAC5DqM,KAAAA,qBAAuBuB,EACxBgC,IAAAA,EAAW,GAAA,OAAA,KAAKjG,aAApB,mCAIA,OAHSgG,EAAAA,EAAAA,UAAAA,EAASC,GAClBD,EAAQ/O,aAAa,gBAAiB,aACtC+O,EAAQrJ,QAKP+F,KAAAA,sBAAwB,IAsoCpC,CAAA,IAAA,yBAhoC4B,MAAA,WAEhB,IADDwD,IAAAA,EAAW,GACNtP,EAAI,EAAGG,EAAI,KAAK0B,SAASzB,OAAQJ,EAAIG,EAAGH,GAAK,EAAG,CACjD4C,IAAAA,EAAQ,KAAKf,SAAS7B,GAC1BsP,EAASrM,KAAKL,EAAMC,QACJD,EAAAA,EAAAA,iBAAAA,EAAMvD,SAAS,EAAM,MAIrC,GAAA,KAAKwL,eAAgB,CACjB0E,IAAAA,EAAiBD,EAASZ,KAAK,KAAKjE,QAAQ1B,mBAC5CwG,IAAmB,KAAKlQ,QAAQwD,QAC3BxD,KAAAA,QAAQwD,MAAQ0M,GACP,EAAA,EAAA,eAAA,KAAKlQ,QAAS,YAK/B,KAAKwC,SAASzB,QAAU,KAAK0K,kBACzBzL,KAAAA,QAAQwD,MAAQ,MA6mChC,CAAA,IAAA,qBAnmCsBtB,MAAAA,SAAAA,EAAO8L,GAAOmC,IAAAA,IAAsB,UAAA,OAAA,QAAA,IAAA,UAAA,KAAA,UAAA,GAG/C,KAAiB,iBAAVnC,GACPA,EAAQ,GACP,KAAKzE,UAAY,KAAK/G,SAASzB,QAAU,KAAKqK,QAAQ3B,WACtD,KAAK6C,eAAevL,QACpB,KAAKuL,eAAe0B,GAJrB,CAeGlN,IALHmN,IAAAA,GAAS,EAAa,EAAA,cAAA,KAAK3B,eAAe0B,IAG1ClN,EAAI,KAAK0B,SAASzB,OAClBqP,GAAkB,EACftP,KACC,GAAA,KAAK0B,SAAS1B,GAAG0C,QAAUyK,EAAOzK,MAAO,CACzC4M,GAAkB,EAClB,MAIHC,KAAAA,cAAc,KAAK9G,SAAW,GAAK0E,EAAOxK,OAAO,GACjD6M,KAAAA,kBAGAF,GAAoB,KAAK7G,WACrB/G,KAAAA,SAAW,IAIf4N,IACI5N,KAAAA,SAASoB,KAAKqK,GACdsC,KAAAA,yBACApC,KAAAA,sBAGJX,KAAAA,sBAAsB,YAAa,CAACS,IACpCG,KAAAA,SAAYH,GAAAA,OAAAA,EAAOxK,MAAS,KAAA,OAAA,KAAK2H,QAAQd,gBAAkB,GAG3D,KAAK6B,WAAoC,IAAxBgE,GACbpK,KAAAA,MAAMW,QAIV+G,KAAAA,UAkjCZ,CAAA,IAAA,4BA1iC6B+C,MAAAA,SAAAA,GAClB,IAAC,KAAKjH,WAAa,KAAK/G,SAASzB,OAC1ByP,OAAAA,EAEPrN,IAAAA,EAAW,GACfsN,EAAa,IAAK,IAAI9P,EAAI,EAAGG,EAAI0P,EAAQzP,OAAQJ,EAAIG,EAAGH,GAAK,EAAG,CAGvD,IAFD6B,IAAAA,EAAW,KAAKA,SAChBc,EAASkN,EAAQ7P,GACZiF,EAAI,EAAG8K,EAAIlO,EAASzB,OAAQ6E,EAAI8K,EAAG9K,GAAK,EAAG,CAE5C+K,GADarN,EAAOG,QAAUjB,EAASoD,GAAGnC,OAC5BH,EAAOE,QAAUhB,EAASoD,GAAGpC,MAClCiN,SAAAA,EAGjBtN,EAASS,KAAKN,GAEXH,OAAAA,IA0hCd,CAAA,IAAA,iBAnhCkBqN,MAAAA,SAAAA,GACPI,IAAAA,EAAS,GACTC,EAAW,KAAK/E,IAAIgF,OACpBpB,EAAU,KAAK3F,aACf9G,EAAU,KAAKmI,QAAQpC,cAEvB+H,EAAU,KAAKC,0BAA0BR,GAEzCS,EAAW,KAAKzD,sBAAsB,aAAcuD,GAGnDzE,KAAAA,eAAiB2E,GAChB,EAAmBA,EAAAA,oBAAAA,EAAUhO,GAC7B8N,EAKD,IAJDhQ,IAsBAqN,EAtBArN,EAAS,KAAKuL,eAAevL,OAG7BqI,EAAa,KAAKiD,aAAe,KAAO,KAAKjB,QAAQhC,WAChDzI,EAAI,EAAGA,EAAII,GAAUJ,EAAIyI,EAAYzI,GAAK,EAC/CiQ,EAAOhN,KACH,gEAAgE8L,OAAAA,EACrDmB,cAAAA,OAAAA,OAAAA,EAAalQ,MAAAA,OAAAA,EAAqBA,qBAAAA,OAAAA,EAAI,EAC5BI,MAAAA,iBAAAA,OAAAA,EAAW,MAAA,OAAA,KAAKuL,eAAe3L,GAAG8C,MAH3D,UAQAmN,EAAO7P,SACE,EAAA,EAAA,UAAA,KAAK2K,KAASgE,GAAAA,OAAAA,EAAvB,yBACY,EAAA,EAAA,aAAA,KAAKhE,KAASgE,GAAAA,OAAAA,EAA1B,0BAEY,EAAA,EAAA,aAAA,KAAKhE,KAASgE,GAAAA,OAAAA,EAA1B,yBACS,EAAA,EAAA,UAAA,KAAKhE,KAASgE,GAAAA,OAAAA,EAAvB,wBAKAwB,IAAAA,EAAS,KAAK9F,QAAQtB,cACtB,IAAC8G,EAAO7P,QAA4B,iBAAXmQ,GAAuBA,EAAOnQ,OAAQ,CAC/DqN,EAAW8C,EACPC,IAAAA,EAAiBzB,GAAAA,OAAAA,EAArB,YACAkB,EAAOhN,KACWuN,cAAAA,OAAAA,EAAeA,KAAAA,OAAAA,EAA4BD,kBAAAA,OAAAA,EAD7D,UAMCE,KAAAA,mBAGAhD,IACDA,EAAW,KAAKZ,sBAAsB,gBAAiB,CAACzM,KAEvDqN,KAAAA,SAASA,GAIViD,IAAAA,EAAcT,EAAOvB,KAAK,IAW1B,GAVA,KAAK9C,kBAAoB8E,GACpB9E,KAAAA,gBAAkB8E,EAElB3F,KAAAA,KAAKzH,UAAYoN,GAGjBzB,KAAAA,yBAIJgB,EAAO7P,OAGR,OAFK0M,KAAAA,YACApB,KAAAA,cAAe,GAInBkB,KAAAA,OAGAlB,KAAAA,cAAe,IAs8B3B,CAAA,IAAA,cA97Be7I,MAAAA,SAAAA,GAA4B,IAAA,EAAA,KAArB8N,EAAc,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GACzBvF,EAAM,IAAIwF,eACVC,EAASC,mBACTC,EAAY,KAAKrF,aACjBsF,EAAYD,GAAaJ,EACzBM,EAAa,KAAKrI,SAAW,KAAK/G,SAASzB,OAAS,EACpD8Q,EAA0B,KAAKC,KAAK,KAAK/I,QAAU,IAAM,IACzDgJ,EACA,KAAKhJ,OACL8I,EACGL,GAAAA,OAAAA,EAAO,KAAKpG,QAAQxB,iBAAoB4H,KAAAA,OAAAA,EAAOhO,GAC/CgO,KAAAA,GAAAA,OAAAA,EAAO,KAAKpG,QAAQvB,sBACpB8H,KAAAA,GAAAA,OAAAA,EAAY,KAAOC,EAAa,KAAKxG,QAAQhC,YAGhD,KAAK2C,KACAA,KAAAA,IAAIiG,QAGT9E,IAAAA,EAAUoE,EAAc,KAAO,KAAK/F,IACxCwG,EAAM,KAAKvE,sBAAsB,cAAe,CAACuE,GAAM7E,IAAY6E,EAEnEhG,EAAIT,KAAK,MAAOyG,GAChBhG,EAAIkG,OAAS,WACLlG,GAAAA,EAAImG,aAAenG,EAAIoG,MACJ,MAAfpG,EAAIqG,OAAgB,CAEpB,EAAK/F,aAAeqF,EAChBW,IAAAA,EAAmB,EAAK7E,sBACxB,iBACA,CAAChK,EAAOuI,GACRmB,GAEAjK,EAAU,EAAKmI,QAAQpC,cACvBD,EAASsJ,GAAoBtG,EAAIuG,aACjCC,GAAQ,EAAmBxJ,EAAAA,oBAAAA,EAAQ9F,GAAS,GAE5CqO,GACA,EAAKkB,sBAAsBD,GAC3B,EAAKE,wBAAuB,IAE5B,EAAKC,eAAeH,KAO/BjB,IACIvF,KAAAA,IAAMA,GAGfA,EAAI4G,SA04BX,CAAA,IAAA,SAn4BUnP,MAAAA,SAAAA,GAAO,IAAA,EAAA,KAEN,GAAiB,iBAAVA,EAAP,CAKA6I,IAAAA,EAAe,KAAKA,aACpBgG,EAAmB,KAAK7E,sBAAsB,WAAY,CAAChK,IAC3DL,EAAW,GAYX,GARCkJ,GAA4C,iBAArBgG,IACxB7O,EAAQ6O,GAIPrG,KAAAA,KAAO,KAAKQ,kBAAoBhJ,EAGjC,KAAKyI,MAIL,OAHK2G,KAAAA,YAAYpP,QAEZ6I,KAAAA,cAAe,GAKpB,GAAuB,mBAAhB,KAAKtD,OAAZ,CAeA,GALCvF,IACD6I,GAAe,GAIf,KAAKtD,QAAU,KAAKA,OAAOhI,OAAQ,CAC/B8R,IAAAA,EAAQ,CAAC,gCACT,IAACxG,EAAc,CACf7I,GAAQ,EAAYA,EAAAA,aAAAA,GAAO,GACvBsP,IAAAA,EAAW,KAAK1H,QAAQnC,aACxBhE,MAAMC,QAAQ4N,IAAaA,EAAS/R,SACpC8R,GAAQ,EAAyBA,EAAAA,0BAAAA,EAAME,OAAOD,KAGjD,IAAA,IAAInS,EAAI,EAAGG,EAAI,KAAKiI,OAAOhI,OAAQJ,EAAIG,EAAGH,GAAK,EAAG,CAC/C4C,IAAAA,EAAQ,KAAKwF,OAAOpI,IACpB0L,IAAgB,EAAkB9I,EAAAA,mBAAAA,EAAOsP,EAAOrP,KAChDL,EAASS,KAAK,CACV5D,QAASuD,EAAMvD,QACfgT,kBAAmBrS,EACnB8C,MAAOF,EAAME,MACbD,MAAOD,EAAMC,SAMxBkP,KAAAA,eAAevP,QApCX4F,KAAAA,OAAO1C,KAAK,KAAKkF,IAAK,KAAKS,KAAM,SAAAiH,GAC9BhQ,IAAAA,EAAU,EAAKmI,QAAQpC,cACvB1F,GAAS,EAAmB2P,EAAAA,oBAAAA,EAAUhQ,GAC1C,EAAKyP,eAAepP,UA9BnB8N,KAAAA,qBAg4BhB,CAAA,IAAA,mBA3zBsB,MAAA,WACX,KAAKxE,aACL/J,aAAa,KAAK+J,aAElBsG,IAAAA,EAAY,KAAKnJ,cACT,EAAA,EAAA,aAAA,KAAK4B,QAAYuH,GAAAA,OAAAA,EAA7B,gCACY,EAAA,EAAA,aAAA,KAAKnN,MAAUmN,GAAAA,OAAAA,EAA3B,6BACK9G,KAAAA,WAAY,IAozBxB,CAAA,IAAA,aA3yBclM,MAAAA,SAAAA,GAAiD,IAAA,EAAA,KAA9CiT,EAAuB,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAAOC,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAC7C/G,EAAe,KAAKA,aACpBnD,EAAQmD,GAAgB+G,EAAS,EAAI,KAAKhI,QAAQlC,MAGjDkI,KAAAA,mBACAhF,KAAAA,WAAY,EACZQ,KAAAA,YAAc9J,WAAW,WACtBU,IAAAA,EAAQ,EAAKuC,MAAMvC,MAkBnB,IAdA6I,GACU,KAAV7I,GACC2P,IACI,EAAK5J,UACN,EAAK/G,SAASzB,SACd,EAAW,EAAA,YAAA,EAAKyB,SAAS,GAAGiB,UAAW,EAAWD,EAAAA,YAAAA,MAEtDA,EAAQ,IAIZ,EAAK6P,sBACL,EAAK7G,kBAAoBhJ,GAEpB6I,GAAgB7I,EAAMzC,OAAS,EAAKqK,QAAQjC,UAC7C,EAAKsE,WADL,CAMA6F,IAAAA,EACA,IAEAA,EADcpT,GAAgB,YAAXA,EAAE2H,OACE3H,EAAEyH,QAAUzH,EAAEqT,SAAWrT,EAAEwH,SACpD,MAAOxH,IAGLsT,IAAAA,EAAsB,KAAVhQ,GAAuBA,IAAU,EAAKwI,KAGlD,IAACwH,GAAcA,IAAc,EAAKtH,WAAaoH,EAAW,CACtDzR,IAAAA,EAAI,EAAKkI,cACJ,EAAA,EAAA,UAAA,EAAK4B,QAAY9J,GAAAA,OAAAA,EAA1B,gCACS,EAAA,EAAA,UAAA,EAAKkE,MAAUlE,GAAAA,OAAAA,EAAxB,6BACA,EAAK4K,sBAAwB,EAC7B,EAAKgH,OAAOjQ,MAEjB0F,KA0vBV,CAAA,IAAA,oBAnvBqBhH,MAAAA,SAAAA,GAAO,IAAA,EAAA,KACjB,KAAKiK,WAIL,KAAKuH,kBACL7Q,aAAa,KAAK6Q,kBAEjBA,KAAAA,iBAAmB5Q,WAAW,WAC3B,EAAKiK,oBACLlK,aAAa,EAAKkK,oBAEtB7K,EAAMyR,iBACN,EAAKtH,cAAe,EACpB,EAAKuH,WAAW1R,GAAO,GAAO,QAquBzC,CAAA,IAAA,sBA5tBuBA,MAAAA,SAAAA,GAAsB,IAAA,EAAA,KAAf2R,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAC3B3K,EAAQ2K,EAAQ,EAAI,IACpB,KAAK9G,oBACLlK,aAAa,KAAKkK,oBAIjBA,KAAAA,mBAAqBjK,WAAW,WAE7BgR,IAAAA,EAAa3R,SAAS4R,cAEtB,GAACF,IACDC,GACE,EAAKlI,SAAW,EAAKA,UAAYkI,GAClCA,EAAWlG,iCAGR,EAAKjC,QAAQqI,SAASF,GAN1B,CAYA,EAAK/H,KACL,EAAKA,IAAIiG,QAITiC,IAAAA,EAAY,EAAKC,eAAevL,KAAK,GACrC,IAACkL,GAAS,EAAKzI,QAAQ9B,eAAiB,EAAK4C,SAAU,CAEnDiI,IAAAA,EAAQ,EAAK1H,qBACI,iBAAV0H,IAAiC,IAAXA,IAE7BA,EAAQF,EAAU,EAAK3H,iBAE3B,EAAK8H,mBAAmB,GAAID,GAAO,GAOnC,GAJJ,EAAK/C,mBACL,EAAK3D,QAGA,EAAKlE,WAA0C,IAA9B0K,EAAU,EAAKzR,WACd,EAAKgJ,gBAAkB,EAAKC,kBACJ,KAAvB,EAAKzL,QAAQwD,QAC7B,EAAKxD,QAAQwD,MAAQ,IACP,EAAA,EAAA,eAAA,EAAKxD,QAAS,WAE5B,EAAKwC,SAASzB,QACd,EAAKsT,wBAAwB,EAAK7R,SAAS,IAE/C,EAAK6N,cAAc,IAAI,GAGvB,EAAK9G,UACL,EAAK8G,cAAc,IAAI,GAI3B,EAAKC,kBAGD,EAAK3D,qBACL,EAAKA,oBAAqB,EAC1BxK,SAASuG,oBAAoB,QAAS,EAAKgE,kBAEhDxD,KAypBV,CAAA,IAAA,iBAlpBkBhH,MAAAA,SAAAA,GAEP,GAAA,KAAK6L,eAAe7L,EAAM2N,QAAS,CAC/B5B,IAAAA,EAAS/L,EAAM2N,OAAOjC,+BACnB,OAAA,KAAKyG,wBAAwBpG,GAGpC,KAAK9B,WAIL,KAAKP,SAAW1J,EAAM2N,SAAW,KAAKjE,QACjC0I,KAAAA,kBAAkBpS,IAIvB,KAAKgK,WACLhK,EAAMyR,iBACF,KAAKlH,sBAAwB,GACxB2H,KAAAA,mBAAmBlS,EAAO,KAAKuK,uBAKxCvK,EAAM2N,SAAW,KAAK9J,OACjB6N,KAAAA,WAAW1R,GAAO,GAAO,OAynBzC,CAAA,IAAA,qBAlnBsBA,MAAAA,SAAAA,GAaX,GAZJA,EAAMyR,iBAED,KAAKzH,WACDG,KAAAA,aAAe,KAAKjB,QAAQjC,UAAY,GAEzC,KAAKkD,cACL,KAAKtG,MAAMvC,MAAMzC,QAAU,KAAKqK,QAAQjC,YAEnCyK,KAAAA,WAAW1R,IAIpB,KAAKgK,WAAa,KAAKE,UAAW,CAC9B3L,IAAAA,EAAU,KAAKgM,qBACI,iBAAZhM,GAAwBA,EAAU,EACpCqP,KAAAA,eAAe5N,EAAO,GAEtB4N,KAAAA,eAAe5N,EAAOzB,EAAU,MAgmBpD,CAAA,IAAA,mBAvlBoByB,MAAAA,SAAAA,GACbA,EAAMyR,kBACQ,KAAKxH,UAAY,KAAKD,UACe,iBAA9B,KAAKO,sBACjBqD,KAAAA,eAAe5N,EAAO,KAAKuK,qBAAuB,KAmlBlE,CAAA,IAAA,uBA3kBwBvK,MAAAA,SAAAA,GACXqS,IAAAA,EAAgBrS,EAAM2N,SAAW,KAAK9J,MAExC7D,GAAkB,KAAlBA,EAAMP,UAAmB4S,EAElB,OADPrS,EAAMyR,iBACC,KAAKa,eAAetS,GAG3B,IAAA,KAAKiK,SAAL,CAKAsI,IAAAA,EAAiB,KAAKjS,UAAY,KAAKA,SAASzB,OAEhD,GAAA,KAAKqK,QAAQzB,mBACQ,KAArB,KAAK5D,MAAMvC,OACO,IAAlBtB,EAAMP,SACN8S,GACAF,GACA,KAAKhL,SAEA8K,KAAAA,wBAAwB,KAAK7R,SAASiS,EAAiB,QAP5D,CAYAC,IAAAA,GAAe,EAAexS,EAAAA,gBAAAA,EAAMP,SACpCgT,GAAcJ,GAAiBG,EAC/BC,GACK5O,KAAAA,MAAMW,SAIXiO,GAAeJ,GAAiBG,IAC3Bd,KAAAA,WAAW1R,OAwiB3B,CAAA,IAAA,cAhiBeA,MAAAA,SAAAA,GACAA,OAAAA,EAAMP,SACL,KAAA,GACI6S,KAAAA,eAAetS,GACpB,MACC,KAAA,GACI0S,KAAAA,oBAAoB1S,GAAO,GAChC,MACC,KAAA,GACI2S,KAAAA,iBAAiB3S,GACtB,MACC,KAAA,GACI4S,KAAAA,mBAAmB5S,GACxB,MACJ,QACS6S,KAAAA,qBAAqB7S,MAihBzC,CAAA,IAAA,gBAzgBmB,MAAA,WACR,KAAK2K,cACLhK,aAAa,KAAKgK,gBAugB7B,CAAA,IAAA,eAhgBkB,MAAA,WAAA,IAAA,EAAA,KAEN,KAAKT,WAAa,KAAKrG,MAAMvC,QAAU,KAAKgJ,mBACxCoH,KAAAA,WAAW,IAEf/G,KAAAA,aAAe/J,WAAW,WAC3B,EAAKkS,gBACN,OAyfV,CAAA,IAAA,aAnfgB,MAAA,WAAA,IAAA,EAAA,KAEJrJ,KAAAA,QAAQ/C,iBAAiB,WAAY,SAAA1G,GACtC,EAAK0S,oBAAoB1S,GAAO,KAG/ByJ,KAAAA,QAAQ/C,iBAAiB,UAAW,SAAA1G,GAChC,EAAKwJ,KAAKsI,SAAS9R,EAAM2N,UAC1B,EAAKpD,sBAAwB,KAIhCd,KAAAA,QAAQ/C,iBAAiB,UAAW,SAAA1G,GACrC,EAAK+S,YAAY/S,KAGhByJ,KAAAA,QAAQ/C,iBAAiB,QAAS,SAAA1G,GAC/BA,GAAAA,EAAM2N,SAAW,EAAKlE,SAItB,GAAA,EAAKoC,eAAe7L,EAAM2N,QAAS,CAC/B5B,IAAAA,EAAS/L,EAAM2N,OAAOjC,+BAC1B,EAAKyG,wBAAwBpG,SAL7B,EAAKlI,MAAMW,UASfwO,IAAAA,EAAyB,GAAA,OAAA,KAAKnL,aAAlC,oCACIoL,EAAuB,GAAA,OAAA,KAAKpL,aAAhC,kCAEKhE,KAAAA,MAAM6C,iBAAiB,OAAQ,YACpB,EAAA,EAAA,aAAA,EAAK+C,QAASuJ,IACd,EAAA,EAAA,aAAA,EAAKnP,MAAOoP,GACxB,EAAKC,kBAGJrP,KAAAA,MAAM6C,iBAAiB,QAAS,SAAA1G,GACjC,EAAK0R,WAAW1R,KAGf6D,KAAAA,MAAM6C,iBAAiB,QAAS,SAAA1G,IACtB,EAAKgK,UACH,EAAKnG,MAAMvC,MAAMzC,QAAU,EAAKqK,QAAQjC,WACjD,EAAKyK,WAAW1R,GAAO,KAI1B6D,KAAAA,MAAM6C,iBAAiB,UAAW,YAC1B,EAAA,EAAA,UAAA,EAAK+C,QAASuJ,IACd,EAAA,EAAA,UAAA,EAAKnP,MAAOoP,GACrB,EAAKH,eACA,EAAK7I,UAAa,EAAKD,UACxB,EAAK0H,WAAW1R,OAAO,KAK3B,KAAK0J,SACAA,KAAAA,QAAQhD,iBAAiB,QAAS,SAAA1G,GACnC,EAAKoS,kBAAkBpS,KAK1BwJ,KAAAA,KAAK9C,iBAAiB,aAAc,SAAA1G,GACrC,EAAK0N,0BAGJlE,KAAAA,KAAK9C,iBAAiB,QAAS,SAAA1G,GAC5BA,GAAAA,EAAM2N,SAAW,EAAKnE,KAAM,CACxBmC,IAAAA,EAAa,EAAKnC,KAAKmC,WACvBA,GAAAA,EAAW9M,OAAQ,CACfsU,IAAAA,EAAY,GAAGhV,QAAQgG,KAAKwH,EAAY3L,EAAM2N,QAClD,EAAKuE,mBAAmBlS,EAAOmT,OAMvC,KAAK7L,WACAwD,KAAAA,cAAgB,IAAIlH,EAAJ,QAAa,KAAKC,UAmalD,CAAA,IAAA,2BA5Z8B,MAAA,WAClBwD,KAAAA,UAAW,EAEXR,KAAAA,OAAS,GAET,IADDuM,IAAAA,EAAW,KAAKtV,QAAQuV,iBAAiB,0BACpC5U,EAAI,EAAGG,EAAIwU,EAASvU,OAAQJ,EAAIG,EAAGH,GAAK,EAAG,CAC5C6U,IAAAA,EAAWF,EAAS3U,GAEpB,GAAC6U,EAAShS,MAAV,CAGAiS,IAAAA,EAAS,CAAEzV,QAASwV,EAAUhS,MAAOgS,EAAShS,OAE9CC,EAAQ+R,EAASlW,QAAQ,UACxBmE,GAAS+R,EAAStG,KACnBzL,EAAQtB,SAASuT,cAAc,SAAWF,EAAStG,GAAK,OAExDzL,IACAgS,EAAOhS,MAAQA,EAAM8D,aAGpBkO,EAAOhS,QACRgS,EAAOhS,MAAQgS,EAAOjS,OAE1BiS,EAAO9R,8BAA+B,EAAY8R,EAAAA,aAAAA,EAAOhS,OACpDsF,KAAAA,OAAOnF,KAAK6R,GAEbD,EAAS7S,SACJH,KAAAA,SAASoB,KAAK6R,OAgYlC,CAAA,IAAA,oBAxXuB,MAAA,WACXlM,KAAAA,SAAW,KAAKvJ,QAAQuJ,SAExBR,KAAAA,OAAS,GAET,IADDqC,IAAAA,EAAU,KAAKpL,QAAQuV,iBAAiB,UACnC5U,EAAI,EAAGG,EAAIsK,EAAQrK,OAAQJ,EAAIG,EAAGH,GAAK,EAAG,CAC3CsN,IAAAA,EAAS7C,EAAQzK,GAEjB,GAACsN,EAAOzK,MAAR,CAGAiS,IAAAA,EAAS,CACTzV,QAASiO,EACTzK,MAAOyK,EAAOzK,MACdC,MAAOwK,EAAO1G,aAElBkO,EAAO9R,8BAA+B,EAAY8R,EAAAA,aAAAA,EAAOhS,OACpDsF,KAAAA,OAAOnF,KAAK6R,GAEbxH,EAAOzL,UACFA,KAAAA,SAASoB,KAAK6R,OAoWlC,CAAA,IAAA,wBA3VyB1M,MAAAA,SAAAA,GACdvF,IAAAA,EAAQ,KAAKgI,gBAAkB,KAAKxL,QAAQwD,MAC5CA,GAAAA,GAASuF,GAAUA,EAAOhI,OAMrB,IAJDwI,IAAAA,EAAW,KAAK6B,QAAQ7B,SACxBoM,EAAY,KAAKvK,QAAQ1B,kBACzBkM,EAAWrM,EAAW/F,EAAM3C,MAAM8U,GAAa,CAACnS,GAE3C7C,EAAI,EAAGG,EAAI8U,EAAS7U,OAAQJ,EAAIG,EAAGH,GAAK,EAAG,CAC5CkV,IAAAA,EAAMD,EAASjV,GACfsT,EAAY,KAAKC,eAKjB,KAHeD,EAAU,KAAKzR,SAAUqT,EAAK,UAAY,GAG1C,CACXC,IAAAA,EAAgB7B,EAAUlL,EAAQ8M,EAAK,SACvCC,GAAiB,GACZtT,KAAAA,SAASoB,KAAKmF,EAAO+M,QAyUjD,CAAA,IAAA,sBA/TyB,MAAA,WACd7S,IAAAA,EAAU,KAAKmI,QAAQpC,cACtBD,KAAAA,QAAS,EAAmB,EAAA,oBAAA,KAAKA,OAAQ9F,GACzCuP,KAAAA,sBAAsB,KAAKzJ,UA4TvC,CAAA,IAAA,sBAtTyB,MAAA,WACbkD,KAAAA,OAAQ,EACT,KAAKT,gBAAkB,KAAKxL,QAAQwD,OAC/BoP,KAAAA,YAAY,KAAK5S,QAAQwD,OAAO,KAmThD,CAAA,IAAA,yBA5S4B,MAAA,WAAA,IAAA,EAAA,KACjB,KAAKgI,gBAAkB,KAAKxL,QAAQwD,OAC/BuF,KAAAA,OAAO1C,UAAK6B,EAAW,KAAKlI,QAAQwD,MAAO,SAAAyP,GAC5C,EAAKT,uBACD,EAAmBS,EAAAA,oBAAAA,EAAU,EAAK7H,QAAQpC,gBAE9C,EAAKyJ,wBAAuB,OAsS3C,CAAA,IAAA,iBA9RoB,MAAA,WAET,MAAuB,mBAAhB,KAAK1J,OACL,KAAKgN,yBAIW,iBAAhB,KAAKhN,QAAuB,KAAKA,OAAOhI,OACxC,KAAKiV,sBAIZ/Q,MAAMC,QAAQ,KAAK6D,SAAW,KAAKA,OAAOhI,OACnC,KAAKkV,sBAIZ,KAAKxK,gBACE,KAAKyK,yBAIZ,KAAKlW,QAAQ0V,cAAc,2BACtBS,KAAAA,8BAuQhB,CAAA,IAAA,yBA/P+C,MAAA,WACpCC,KAD8B,UAAA,OAAA,QAAA,IAAA,UAAA,KAAA,UAAA,GAChB,CAEV,GAAA,KAAKtK,IAAIuK,QAAS,CACd5S,IAAAA,EAAQtB,SAASuT,cACjB,SAAW,KAAK5J,IAAIuK,QAAU,MAE9B5S,IACAA,EAAM6S,4BAA8B,KAAKxK,IAAIuK,QAC7C5S,EAAMzC,aAAa,MAAO,KAAK8K,IAAIyK,QAKvC/G,IAAAA,EAAc,KAAKxP,QAAQI,aAAa,oBACxCoP,GACKzJ,KAAAA,MAAM/E,aAAa,mBAAoBwO,GAE5CgH,IAAAA,EAAa,KAAKxW,QAAQI,aAAa,mBACvCoW,GACKzQ,KAAAA,MAAM/E,aAAa,kBAAmBwV,GAK/C,KAAKhU,SAASzB,SAEV,KAAKwI,SACA4E,KAAAA,sBAIAkC,KAAAA,cAAc,KAAK7N,SAAS,GAAGiB,OAAS,IAAI,GAC5C6M,KAAAA,oBAKR+C,KAAAA,sBAGC,KAAKrT,QAAQmM,UACVkC,KAAAA,YAqNhB,CAAA,IAAA,UA9Ma,MAAA,WACFvM,IAAAA,EAAI,KAAKsJ,QACTsE,EAAU,KAAK3F,aACf0M,EAAgB3U,EAAEyI,gBAClBxF,EAAOjD,EAAEiD,KAAWjD,IAAAA,OAAAA,EAAEiD,MAA1B,GACI2R,EAAY5U,EAAEkI,cAAoBlI,IAAAA,OAAAA,EAAEkI,eAAkB,GACtD2M,EAAa7U,EAAEmI,eAAqBnI,IAAAA,OAAAA,EAAEmI,gBAAmB,GACzD2M,EAAe9U,EAAEoI,iBAAuBpI,IAAAA,OAAAA,EAAEoI,kBAAqB,GAC/D2M,EAAYJ,EAAgCA,gBAAAA,OAAAA,EAAmB,KAAA,GAE/DK,EAAU,CACE,YAAA,OAAA,KAAKhL,IAAIiL,QAAmBrH,aAAAA,OAAAA,EAAmBkH,aAAAA,OAAAA,EAD/D,OAKAE,EAAQlT,KACJ,wFAC2B,uBAAA,OAAA,KAAKkI,IAAIyK,MAAuBzU,mBAAAA,OAAAA,EAAE8F,YAC3C,MAAA,cAAA,OAAA,KAAKkE,IAAIsD,KAA2BtN,wBAAAA,OAAAA,EAAE8F,YAC1C8H,MAAAA,UAAAA,OAAAA,EAAiBiH,WAAAA,OAAAA,EAAc5R,KAAAA,OAAAA,EAJjD,QAQIjD,EAAEuH,gBACFyN,EAAQlT,KACJ,mCAAmC9B,OAAAA,EAAEuI,cAAyBqF,aAAAA,OAAAA,EACtC,gBAAA,oBAAA,OAAA,KAAK5D,IAAIkL,OAFrC,oCAMJF,EAAQlT,KACJ,WAAW,OAAA,KAAKkI,IAAIsD,KAAgBM,aAAAA,OAAAA,EAAgBgH,UAAAA,OAAAA,EAC9BG,qBAAAA,kBAAAA,OAAAA,EAF1B,WAKAC,EAAQlT,KACJ,wBAAwB8L,OAAAA,EAAoBA,cAAAA,OAAAA,EACjC,qBAAA,OAAA,OAAA,KAAK5D,IAAI2D,cAAkB3N,MAAAA,OAAAA,EAAE0I,gBAF5C,YAKAsM,EAAQlT,KACJ,wBAAwB8L,OAAAA,EAAoBA,cAAAA,OAAAA,EACjC,wBAAA,OAAA,OAAA,KAAK5D,IAAImL,iBAFxB,oDAMAH,EAAQlT,KAAR,UACK5D,KAAAA,QAAQkX,mBAAmB,WAAYJ,EAAQzH,KAAK,OA+JhE,CAAA,IAAA,cAzJiB,MAAA,WAAA,IAAA,EAAA,KACL9D,KAAAA,IAAM,CACPD,KAAM,WAAM,OAAA,EAAKiC,KAAKlH,KAAK,IAC3B8Q,MAAO,WAAM,OAAA,EAAK1J,KAAKpH,KAAK,IAC5BoN,OAAQ,SAAAoC,GAAO,OAAA,EAAKpC,OAAOpN,KAAKwP,KAc/B,IAXD/H,IAAAA,EAAI,CACJ,UACA,UACA,SACA,UACA,QACA,UACA,OACA,YAGKnN,EAAAA,SAAAA,EAAOG,GACZ,EAAKyK,IAAIuC,EAAEnN,IACe,mBAAf,EAAKmN,EAAEnN,IACR,WAAM,OAAA,EAAKmN,EAAEnN,IAAI0F,KAAK,IACtB,EAAKyH,EAAEnN,KAJZA,EAAI,EAAGG,EAAIgN,EAAE/M,OAAQJ,EAAIG,EAAGH,GAAK,EAAjCA,EAAAA,GAQJX,KAAAA,QAAQqL,iBAAmB,KAAKE,MA+H5C,CAAA,IAAA,UAzHa,MAAA,WAEF9H,IAAAA,EAAQtB,SAASuT,cAAc,SAAW,KAAK5J,IAAIyK,MAAQ,MAmB1D,IAAA,IAAI5V,KAlBL8C,GAASA,EAAM6S,8BACf7S,EAAMzC,aAAa,MAAOyC,EAAM6S,oCACzB7S,EAAM6S,6BAGb,KAAK3J,oBACLxK,SAASuG,oBAAoB,QAAS,KAAKgE,eAG3C,KAAKlD,UAAY,KAAKwD,eACjBA,KAAAA,cAAcoK,UAGlBpX,KAAAA,QAAQN,WAAWgP,YAAY,KAAK/C,gBAClC,KAAK3L,QAAQqL,iBAEfkC,KAAAA,KAAK,KAAKvN,SAED,KACN,KAAKgC,eAAerB,KACfA,KAAAA,GAAK,QAkGzB,CAAA,IAAA,OAxFQX,MAAAA,SAAAA,EAASoL,GAEVvC,GAAY,EACPiD,KAAAA,IAAM,GACNA,KAAAA,IAAIuK,QAAUrW,EAAQkP,GACtBpD,KAAAA,IAAIuL,OAAYrX,GAAAA,OAAAA,EAAQkP,IAAM,GAAuBrG,sBAAAA,OAAAA,GACrDiD,KAAAA,IAAIsD,KAAU,GAAA,OAAA,KAAKtD,IAAIuL,OAA5B,SACKvL,KAAAA,IAAIyK,MAAW,GAAA,OAAA,KAAKzK,IAAIuL,OAA7B,UACKvL,KAAAA,IAAIkL,OAAY,GAAA,OAAA,KAAKlL,IAAIuL,OAA9B,WACKvL,KAAAA,IAAIgF,OAAY,GAAA,OAAA,KAAKhF,IAAIuL,OAA9B,WACKvL,KAAAA,IAAIiL,QAAa,GAAA,OAAA,KAAKjL,IAAIuL,OAA/B,YACKvL,KAAAA,IAAIqD,gBAAqB,GAAA,OAAA,KAAKrD,IAAIgF,OAAvC,aACKhF,KAAAA,IAAI2D,cAAmB,GAAA,OAAA,KAAK3D,IAAIuL,OAArC,kBACKvL,KAAAA,IAAImL,iBAAsB,GAAA,OAAA,KAAKnL,IAAIuL,OAAxC,qBAEK7U,KAAAA,SAAW,GACXxC,KAAAA,QAAUA,EACVwL,KAAAA,eAAsC,UAArBxL,EAAQ0C,SACzB+I,KAAAA,gBAAuC,WAArBzL,EAAQ0C,SAC1B0I,KAAAA,SAAU,EAAatC,EAAAA,cAAAA,EAAiBsC,GAGxCrC,KAAAA,OAAS,KAAKqC,QAAQrC,OACtBQ,KAAAA,SAAW,KAAK6B,QAAQ7B,SACxBC,KAAAA,SAAW,KAAK4B,QAAQ5B,SACxBO,KAAAA,aAAe,KAAKqB,QAAQrB,aAC5B2C,KAAAA,cAAgB,KAAKkI,oBAAoBjM,KAAK,MAG9C2O,KAAAA,UAGA5L,KAAAA,KAAOvJ,SAASoV,eAAe,KAAKzL,IAAIsD,MACxCrJ,KAAAA,MAAQ5D,SAASoV,eAAe,KAAKzL,IAAIyK,OACzC5K,KAAAA,QAAUxJ,SAASoV,eAAe,KAAKzL,IAAIiL,SAC3CnL,KAAAA,QAAUzJ,SAASoV,eAAe,KAAKzL,IAAIkL,QAC3CnL,KAAAA,gBAAkB1J,SAASoV,eAC5B,KAAKzL,IAAImL,kBAIRO,KAAAA,iBAGDZ,IAAAA,EAAe,GACf,KAAKxL,QAAQ/B,iBACbuN,GAAoB,IAAA,OAAA,KAAK7M,aAAzB,wBAEA,KAAKP,WACLoN,GAAoB,IAAA,OAAA,KAAK7M,aAAzB,wBAEA,KAAKR,WACLqN,GAAoB,IAAA,OAAA,KAAK7M,aAAzB,wBAEA6M,IACS,EAAA,EAAA,UAAA,KAAKjL,QAASiL,GAItBnJ,KAAAA,KAAK,KAAK/B,MACV+B,KAAAA,KAAK,KAAKzN,SAGVyX,KAAAA,cAGAhF,KAAAA,yBAGAiF,KAAAA,aAGAlK,KAAAA,sBAAsB,UAAW,CAAC,KAAK7B,cAgBnD,EAAA,GANDgM,OAAM,iBAAuB,SAACC,EAAMxM,GACzB,OAAA,IAAID,EAAiByM,EAAMxM,GAASG,KAGhC,IAAA,EAAA,SAACqM,EAAMxM,GACX,OAAA,IAAID,EAAiByM,EAAMxM,GAASG,KAC9C,QAAA,QAAA","file":"aria-autocomplete.min.js","sourceRoot":"../src","sourcesContent":["if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\nif (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n        var el = this;\n        do { \n            if (el.matches(s)) { \n                return el; \n            } \n            el = el.parentElement || el.parentNode; \n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}","/**\n * @description trim string helper\n * @param {string} theString\n */\nexport function trimString(theString) {\n    return theString == null ? '' : (theString + '').trim();\n}\n\n/**\n * @description check if element has class\n * @param {Element} element - element to check class on\n * @param {String} className\n * @returns {Boolean}\n */\nexport function hasClass(element, className) {\n    let e = element;\n    let cur = trimString(e.getAttribute && e.getAttribute('class'));\n    return ` ${cur} `.indexOf(` ${className} `) > -1;\n}\n\n/**\n * @description add class(es) to element\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to add\n */\nexport function addClass(element, classes) {\n    let currentValue = trimString(\n        element.getAttribute && element.getAttribute('class')\n    );\n    let current = ' ' + currentValue + ' ';\n    let finalValue = '';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        if (cs[i] !== '' && current.indexOf(' ' + cs[i] + ' ') === -1) {\n            finalValue += ' ' + cs[i];\n        }\n    }\n    if (currentValue !== (finalValue = trimString(currentValue + finalValue))) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n/**\n * @description remove class(es) from element\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to remove\n */\nexport function removeClass(element, classes) {\n    let currentValue = trimString(\n        element.getAttribute && element.getAttribute('class')\n    );\n    let finalValue = ' ' + currentValue + ' ';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        finalValue = finalValue.replace(' ' + cs[i] + ' ', ' ');\n    }\n    if (currentValue !== (finalValue = trimString(finalValue))) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n// regex constants used for string cleaning\nconst REGEX_AMPERSAND = /&/g;\nconst REGEX_DUPE_WHITESPACE = /\\s\\s+/g;\nconst REGEX_TO_IGNORE = /[\\u2018\\u2019',:\\u2013-]/g;\nconst REGEX_MAKE_SAFE = /[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g;\n/**\n * @description clean string of some characters, and make safe for regex searching\n * @param {String} theString\n * @param {Boolean=} makeSafeForRegex\n * @returns {String}\n */\nexport function cleanString(theString, makeSafeForRegex = false) {\n    theString = trimString(theString).toLowerCase(); // case insensitive\n    theString = theString.replace(REGEX_TO_IGNORE, ''); // ignore quotes, commas, colons, and hyphens\n    theString = theString.replace(REGEX_AMPERSAND, 'and'); // treat & and 'and' as the same\n    theString = theString.replace(REGEX_DUPE_WHITESPACE, ' '); // ignore duplicate whitespace\n    // make safe for regex searching\n    if (makeSafeForRegex) {\n        theString = theString.replace(REGEX_MAKE_SAFE, '\\\\$&');\n    }\n    return theString;\n}\n\n/**\n * @description check if keycode is for a printable/width-affecting character\n * @param {Number} keyCode\n * @returns {Boolean}\n */\nexport function isPrintableKey(keyCode) {\n    return (\n        (keyCode >= 48 && keyCode <= 57) || // 0-9\n        (keyCode >= 65 && keyCode <= 90) || // a-z\n        (keyCode >= 96 && keyCode <= 111) || // numpad 0-9, numeric operators\n        (keyCode >= 186 && keyCode <= 222) || // semicolon, equal, comma, dash, etc.\n        keyCode === 32 || // space\n        keyCode === 8 || // backspace\n        keyCode === 46 // delete\n    );\n}\n\n/**\n * @description merge objects together to generate a new one\n * @param {Object} args - objects to merge together\n * @returns {Object}\n */\nexport function mergeObjects(...args) {\n    let n = {};\n    for (let i = 0, l = args.length; i < l; i += 1) {\n        let o = args[i];\n        for (let p in o) {\n            if (o.hasOwnProperty(p) && typeof o[p] !== 'undefined') {\n                n[p] = o[p];\n            }\n        }\n    }\n    return n;\n}\n\n/**\n * @description dispatch event helper\n * @param {Element} element\n * @param {String} event\n */\nexport function dispatchEvent(element, event) {\n    if ('createEvent' in document) {\n        let e = document.createEvent('HTMLEvents');\n        e.initEvent(event, true, true);\n        element.dispatchEvent(e);\n    } else {\n        element.fireEvent('on' + event);\n    }\n}\n\n/**\n * @description set element option or checkbox to specified state and trigger change event\n * @param {Element} element\n * @param {Boolean} selected\n * @param {(AriaAutocomplete|Object)} instance\n */\nexport function setElementState(element, selected, instance) {\n    selected = !!selected;\n    if (element) {\n        // handle checkbox\n        if (\n            element.nodeName === 'INPUT' &&\n            typeof element.checked === 'boolean' &&\n            element.checked !== selected\n        ) {\n            element.checked = selected;\n            dispatchEvent(element, 'change');\n        }\n\n        // handle dropdown option\n        if (element.nodeName === 'OPTION' && element.selected !== selected) {\n            element.selected = selected;\n            // ensure change event only fires once for dropdown\n            if (instance.elementChangeEventTimer) {\n                clearTimeout(instance.elementChangeEventTimer);\n            }\n            instance.elementChangeEventTimer = setTimeout(function() {\n                dispatchEvent(element.closest('select'), 'change');\n            }, 1);\n        }\n    }\n}\n\n/**\n * @description process an array of strings or objects to ensure needed props exist\n * @param {(String|Object)[]} sourceArray\n * @param {Object=} mapping - value and label mapping used in object cases\n * @param {Boolean=} setCleanedLabel - defaults to true\n * @returns {Array}\n */\nexport function processSourceArray(sourceArray, mapping = {}, setCleanedLabel) {\n    let toReturn = [];\n    let mapValue = mapping['value'];\n    let mapLabel = mapping['label'];\n    for (let i = 0, l = sourceArray.length; i < l; i += 1) {\n        let result = {};\n        let entry = sourceArray[i];\n        // handle array of strings\n        if (typeof entry === 'string') {\n            result.value = result.label = entry;\n        }\n        // handle array of objects - ensure value and label exist, and maintain any other properties\n        else {\n            // generate new object to not modify original\n            result = mergeObjects(entry);\n            let value = result[mapValue] || result.value || result.label;\n            let label = result[mapLabel] || result.label || result.value;\n            result.value = (value || '').toString();\n            result.label = (label || '').toString();\n        }\n        // whether to set a cleaned label for static source filtering (in filter method)\n        if (setCleanedLabel !== false) {\n            result.ariaAutocompleteCleanedLabel = cleanString(result.label);\n        }\n        toReturn.push(result);\n    }\n    return toReturn;\n}\n\nconst DIV = document.createElement('div');\n/**\n * @description convert HTML string into an element\n * @param {String} html\n * @returns {Element}\n */\nexport function htmlToElement(html) {\n    DIV.innerHTML = trimString(html);\n    return DIV.firstChild;\n}\n\n/**\n * @description set styles on an element\n * @param {Element} element\n * @param {Object} s\n */\nexport function setCss(element, s) {\n    if (!element) {\n        return;\n    }\n    for (let i in s) {\n        let style = typeof s[i] === 'number' ? s[i] + 'px' : s[i];\n        element.style[i] = style + ''; // force to be a string\n    }\n}\n\n/**\n * @description transfer styles from one Element to another\n * @param {Element} from\n * @param {Element} to\n * @param {Array=} properties\n */\nexport function transferStyles(from, to, properties) {\n    if (!from || !to) {\n        return;\n    }\n    let fromStyles = getComputedStyle(from);\n    let styles = {};\n\n    if (properties && properties.length) {\n        for (let i = 0, l = properties.length; i < l; i += 1) {\n            styles[properties[i]] = fromStyles[properties[i]];\n        }\n    } else {\n        styles = fromStyles;\n    }\n\n    setCss(to, styles);\n}\n\n/**\n * @description search String or Array for another string - partial match\n * @param {String|Array} prop\n * @param {String} regexSafeQuery\n * @param {String=} name\n */\nconst searchPropFor = (prop, regexSafeQuery, name) => {\n    if (typeof prop === 'string') {\n        if (name !== 'ariaAutocompleteCleanedLabel') {\n            prop = cleanString(prop, false);\n        }\n        return prop.search(regexSafeQuery) !== -1;\n    } else if (Array.isArray(prop)) {\n        for (let i = 0, l = prop.length; i < l; i += 1) {\n            if (searchPropFor(prop[i], regexSafeQuery)) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n/**\n * @description check through object's String or String[] properties for query match\n * @param {Object} obj\n * @param {String[]} props\n * @param {String} query\n * @returns {Boolean}\n */\nexport function searchVarPropsFor(obj, props, query, makeSafe = false) {\n    if (makeSafe) {\n        query = cleanString(query, true);\n    }\n\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            let proceed = false;\n            // check if obj property is a string, and if property name is in props Array\n            if (typeof obj[i] === 'string') {\n                // use while loop instead of indexOf for performance in older browsers\n                let l = props.length;\n                while (l--) {\n                    if (props[l] === i) {\n                        proceed = true;\n                        break;\n                    }\n                }\n            } else {\n                // if not a string, only allow Arrays otherwise\n                proceed = Array.isArray(obj[i]);\n            }\n            if (proceed && searchPropFor(obj[i], query, i)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * @description remove duplicate array entries, and `label`\n * @param {Array} arr\n * @returns {String[]}\n */\nexport function removeDuplicatesAndLabel(arr) {\n    // remove `label` (we will be using `ariaAutocompleteCleanedLabel`) and duplicates from props array\n    let result = [];\n    for (let i = 0, l = arr.length; i < l; i += 1) {\n        if (typeof arr[i] !== 'string') {\n            continue;\n        }\n        let str = trimString(arr[i]);\n        let proceed = str !== 'label';\n        let j = result.length;\n        while (proceed && j--) {\n            if (result[j] === str) {\n                proceed = false;\n            }\n        }\n        if (proceed) {\n            result.push(str);\n        }\n    }\n    return result;\n}\n","import { isPrintableKey, setCss, transferStyles } from './autocomplete-helpers';\r\n\r\n/**\r\n * @description storage for element used to detect value width\r\n */\r\nlet testSpan;\r\n\r\n/**\r\n * @description set an input element to autogrow based on its value\r\n * @param {Element} input\r\n */\r\nexport default class AutoGrow {\r\n    constructor(input) {\r\n        this.input = input;\r\n        this.currentString;\r\n        this.eventHandler;\r\n        this.currentWidth;\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * @description trigger an autogrow check\r\n     */\r\n    trigger() {\r\n        this.checkAndSet.call(this);\r\n    }\r\n\r\n    /**\r\n     * @description get current user selection from within the input\r\n     */\r\n    getInputSelection() {\r\n        let result = {};\r\n        if ('selectionStart' in this.input) {\r\n            result.start = this.input.selectionStart;\r\n            result.length = this.input.selectionEnd - result.start;\r\n        } else if (document.selection) {\r\n            this.input.focus();\r\n            let selection = document.selection.createRange();\r\n            let selectionLength = selection.text.length;\r\n            selection.moveStart('character', -this.input.value.length);\r\n            result.start = selection.text.length - selectionLength;\r\n            result.length = selectionLength;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @description measure the pixel width of a string in an input\r\n     * @param {String} str\r\n     * @returns {Number}\r\n     */\r\n    measureString(str) {\r\n        if (!str) {\r\n            this.currentString = str;\r\n            return 0;\r\n        }\r\n\r\n        // check for matching string\r\n        // risky, as styles could change between checks, but better for performance\r\n        if (str === this.currentString) {\r\n            return this.currentWidth;\r\n        }\r\n\r\n        if (!testSpan) {\r\n            testSpan = document.createElement('span');\r\n            setCss(testSpan, {\r\n                position: 'absolute',\r\n                top: -99999,\r\n                left: -99999,\r\n                width: 'auto',\r\n                padding: 0,\r\n                whiteSpace: 'pre'\r\n            });\r\n            document.body.appendChild(testSpan);\r\n        }\r\n\r\n        testSpan.textContent = str;\r\n        this.currentString = str;\r\n\r\n        transferStyles(this.input, testSpan, [\r\n            'letterSpacing',\r\n            'fontSize',\r\n            'fontFamily',\r\n            'fontWeight',\r\n            'textTransform'\r\n        ]);\r\n\r\n        return testSpan.offsetWidth || testSpan.clientWidth;\r\n    }\r\n\r\n    /**\r\n     * @description check the current input value and set width\r\n     * @param {Event} event\r\n     */\r\n    checkAndSet(event = {}) {\r\n        if (event.metaKey || event.altKey) {\r\n            return;\r\n        }\r\n\r\n        let value = this.input.value;\r\n        if (event.type && event.type.toLowerCase() === 'keydown') {\r\n            let keyCode = event.keyCode;\r\n            let keyCodeIsDelete = keyCode === 46;\r\n            let keyCodeIsBackspace = keyCode === 8;\r\n\r\n            // delete or backspace\r\n            if (keyCodeIsDelete || keyCodeIsBackspace) {\r\n                let selection = this.getInputSelection();\r\n                if (selection.length) {\r\n                    value =\r\n                        value.substring(0, selection.start) +\r\n                        value.substring(selection.start + selection.length);\r\n                } else if (keyCodeIsBackspace && selection.start) {\r\n                    value =\r\n                        value.substring(0, selection.start - 1) +\r\n                        value.substring(selection.start + 1);\r\n                } else if (keyCodeIsDelete && selection.start !== undefined) {\r\n                    value =\r\n                        value.substring(0, selection.start) +\r\n                        value.substring(selection.start + 1);\r\n                }\r\n            }\r\n\r\n            // any other width affecting character\r\n            else if (isPrintableKey(keyCode)) {\r\n                let shift = event.shiftKey;\r\n                let character = String.fromCharCode(keyCode);\r\n                if (shift) {\r\n                    character = character.toUpperCase();\r\n                } else {\r\n                    character = character.toLowerCase();\r\n                }\r\n                value += character;\r\n            }\r\n        }\r\n\r\n        let placeholder;\r\n        if (!value && (placeholder = this.input.getAttribute('placeholder'))) {\r\n            value = placeholder;\r\n        }\r\n\r\n        let width = this.measureString(value) + 4;\r\n        if (width !== this.currentWidth) {\r\n            this.currentWidth = width;\r\n            this.input.style.width = `${width}px`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description destroy the autogrow behaviour\r\n     */\r\n    destroy() {\r\n        this.input.removeEventListener('blur', this.eventHandler);\r\n        this.input.removeEventListener('input', this.eventHandler);\r\n        this.input.removeEventListener('keyup', this.eventHandler);\r\n        this.input.removeEventListener('keydown', this.eventHandler);\r\n        this.input = null;\r\n    }\r\n\r\n    /**\r\n     * @description initialise the autogrow behaviour and bind events\r\n     */\r\n    init() {\r\n        this.checkAndSet();\r\n        this.eventHandler = this.checkAndSet.bind(this);\r\n        this.input.addEventListener('blur', this.eventHandler);\r\n        this.input.addEventListener('input', this.eventHandler);\r\n        this.input.addEventListener('keyup', this.eventHandler);\r\n        this.input.addEventListener('keydown', this.eventHandler);\r\n    }\r\n}\r\n","import './closest-polyfill';\r\nimport AutoGrow from './autogrow';\r\nimport {\r\n    trimString,\r\n    hasClass,\r\n    addClass,\r\n    removeClass,\r\n    cleanString,\r\n    isPrintableKey,\r\n    mergeObjects,\r\n    dispatchEvent,\r\n    setElementState,\r\n    processSourceArray,\r\n    htmlToElement,\r\n    searchVarPropsFor,\r\n    removeDuplicatesAndLabel\r\n} from './autocomplete-helpers';\r\n\r\nlet appIndex = 0;\r\n\r\nconst DEFAULT_OPTIONS = {\r\n    /**\r\n     * @description Give the autocomplete a name to be included in form submissions\r\n     * (Instead of using this option, I would advise initialising the autocomplete on\r\n     * an existing input that will be submitted, to also use any existing validation;\r\n     * this approach is also compatible with the control in multiple mode)\r\n     */\r\n    name: '',\r\n    /**\r\n     * @type {String | String[] | Object[] | Function}\r\n     * @description Specify source. See examples file for more specific usage.\r\n     * @example ['Afghanistan', 'Albania', 'Algeria', ...more]\r\n     * @example (query, render) => render(arrayToUse)\r\n     */\r\n    source: '',\r\n    /**\r\n     * @description Properties to use for label and value\r\n     * when source is an Array of Objects\r\n     */\r\n    sourceMapping: {},\r\n    /**\r\n     * @type {String[]}\r\n     * @description Additional properties to use when searching for a match.\r\n     * `label` will always be used\r\n     */\r\n    alsoSearchIn: [],\r\n\r\n    /**\r\n     * @description Input delay after typing before running a search\r\n     */\r\n    delay: 100,\r\n    /**\r\n     * @description Minimum number of characters to run a search (includes spaces)\r\n     */\r\n    minLength: 1,\r\n    /**\r\n     * @description Maximum number of results to render. Also used with async endpoint\r\n     */\r\n    maxResults: 9999,\r\n    /**\r\n     * @description Render a control that triggers showing all options.\r\n     * Runs a search with an empty query: '', and maxResults of 9999\r\n     */\r\n    showAllControl: false,\r\n    /**\r\n     * Confirm currently active selection when blurring off of the control. If\r\n     * no active selection, will compare current input value against available labels\r\n     */\r\n    confirmOnBlur: true,\r\n\r\n    /**\r\n     * @description Allow multiple items to be selected\r\n     */\r\n    multiple: false,\r\n    /**\r\n     * @description Adjust input width to match its value.\r\n     * Experimental, and a performance hit\r\n     */\r\n    autoGrow: false,\r\n    /**\r\n     * @description Maximum number of items that can be selected\r\n     */\r\n    maxItems: 9999,\r\n    /**\r\n     * @description If initialised element is an input, and in multiple mode,\r\n     * character that separates the selected values e.g. \"GLP,ZWE\"\r\n     */\r\n    multipleSeparator: ',',\r\n    /**\r\n     * @description If input is empty and in multiple mode,\r\n     * delete last selected item on backspace\r\n     */\r\n    deleteOnBackspace: false,\r\n\r\n    /**\r\n     * @description In async mode, parameter to use when adding the input value\r\n     * to the endpoint String. e.g. https://some-endpoint?q=norway&limit=9999\r\n     */\r\n    asyncQueryParam: 'q',\r\n    /**\r\n     * @description In async mode, parameter to use when adding results limit\r\n     * to the endpoint String. e.g. https://some-endpoint?q=norway&limit=9999\r\n     */\r\n    asyncMaxResultsParam: 'limit',\r\n\r\n    /**\r\n     * @description Placeholder text to show in generated input\r\n     */\r\n    placeholder: '',\r\n    /**\r\n     * @description Text to show (and announce to screen readers) if no results found.\r\n     * If empty, the list of options will remain hidden when there are no results\r\n     */\r\n    noResultsText: 'No results',\r\n    /**\r\n     * @description String to prepend to classes for BEM naming\r\n     * e.g. aria-autocomplete__input\r\n     */\r\n    cssNameSpace: 'aria-autocomplete',\r\n    /**\r\n     * @description Custom class name to add to the options list holder\r\n     */\r\n    listClassName: '',\r\n    /**\r\n     * @description Custom class name to add to the generated input\r\n     */\r\n    inputClassName: '',\r\n    /**\r\n     * @description Custom class name to add to the component wrapper\r\n     */\r\n    wrapperClassName: '',\r\n\r\n    /**\r\n     * @description In multiple mode, screen reader text used for element deletion.\r\n     * Prepended to option label in aria-label attribute e.g. 'delete Canada'\r\n     */\r\n    srDeleteText: 'delete',\r\n    /**\r\n     * @description Screen reader text announced after deletion.\r\n     * Apended to option label e.g. 'Canada deleted'\r\n     */\r\n    srDeletedText: 'deleted',\r\n    /**\r\n     * @description Value for aria-label attribute on the show all control\r\n     */\r\n    srShowAllText: 'Show all',\r\n    /**\r\n     * @description Screen reader text announced after confirming a selection.\r\n     * Appended to option label e.g. 'Canada selected'\r\n     */\r\n    srSelectedText: 'selected',\r\n    /**\r\n     * @description Screen reader explainer added to the list element\r\n     * via aria-label attribute\r\n     */\r\n    srListLabelText: 'Search suggestions',\r\n    /**\r\n     * @description Screen reader description announced when the input receives focus.\r\n     * Only announced when input is empty\r\n     */\r\n    srAssistiveText:\r\n        'When results are available use up and down arrows to review and ' +\r\n        'enter to select. Touch device users, explore by touch or with swipe gestures.',\r\n    /**\r\n     * @description Screen reader announcement after results are rendered\r\n     */\r\n    srResultsText: length =>\r\n        `${length} ${length === 1 ? 'result' : 'results'} available.`,\r\n\r\n    /**\r\n     * @description Callback before async call is made - receives the URL.\r\n     * Can be used to format the endpoint URL by returning a String\r\n     */\r\n    onAsyncPrep: undefined,\r\n    /**\r\n     * @description Callback after async call completes - receives the xhr object.\r\n     * Can be used to format the results by returning an Array\r\n     */\r\n    onAsyncSuccess: undefined,\r\n    /**\r\n     * @description Callback prior to rendering - receives the options that are going\r\n     * to render. Can be used to format the results by returning an Array\r\n     */\r\n    onResponse: undefined,\r\n    /**\r\n     * @description Callback before a search is performed - receives the input value.\r\n     * Can be used to alter the search value by returning a String\r\n     */\r\n    onSearch: undefined,\r\n    /**\r\n     * @description Callback after selection is made -\r\n     * receives an object with the option details\r\n     */\r\n    onConfirm: undefined,\r\n    /**\r\n     * @description Callback after an autocomplete selection is deleted.\r\n     * Fires in single-select mode when selection is deleted automatically.\r\n     * Fires in multi-select mode when selected is deleted by user action\r\n     */\r\n    onDelete: undefined,\r\n    /**\r\n     * @description Callback when main script processing and initial rendering has finished\r\n     */\r\n    onReady: undefined,\r\n    /**\r\n     * @description Callback when list area closes - receives the list holder element\r\n     */\r\n    onClose: undefined,\r\n    /**\r\n     * @description Callback when list area opens - receives the list holder element\r\n     */\r\n    onOpen: undefined\r\n};\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {Object=} options\r\n */\r\nclass AriaAutocomplete {\r\n    constructor(element, options) {\r\n        // fail silently if no list provided\r\n        if (!element) {\r\n            return;\r\n        }\r\n\r\n        // if instance already exists on the list element, do not re-initialise\r\n        if (element.ariaAutocomplete && element.ariaAutocomplete.open) {\r\n            return { api: element.ariaAutocomplete };\r\n        }\r\n\r\n        // vars defined later - related explicitly to core initialising params\r\n        this.options;\r\n        this.element;\r\n        this.elementIsInput;\r\n        this.elementIsSelect;\r\n\r\n        // vars defined later - elements\r\n        this.list;\r\n        this.input;\r\n        this.wrapper;\r\n        this.showAll;\r\n        this.srAnnouncements;\r\n\r\n        // vars defined later - non elements\r\n        this.ids;\r\n        this.xhr;\r\n        this.term;\r\n        this.async;\r\n        this.source;\r\n        this.menuOpen;\r\n        this.multiple;\r\n        this.selected;\r\n        this.disabled;\r\n        this.autoGrow;\r\n        this.filtering;\r\n        this.cssNameSpace;\r\n        this.forceShowAll;\r\n        this.filteredSource; // filtered source items to render\r\n        this.currentListHtml;\r\n        this.inputPollingValue;\r\n        this.currentSelectedIndex; // for storing index of currently focused option\r\n\r\n        // document click\r\n        this.documentClick;\r\n        this.documentClickBound;\r\n\r\n        // timers\r\n        this.filterTimer;\r\n        this.pollingTimer;\r\n        this.announcementTimer;\r\n        this.componentBlurTimer;\r\n        this.elementChangeEventTimer;\r\n\r\n        // storage for autoGrow class\r\n        this.AutoGrowInput;\r\n\r\n        // get going!\r\n        this.init(element, options);\r\n    }\r\n\r\n    /**\r\n     * trigger callbacks included in component options\r\n     * @param {String} name\r\n     * @param {Array=} args\r\n     * @param {Any=} args\r\n     */\r\n    triggerOptionCallback(name, args, context) {\r\n        context = typeof context === 'undefined' ? this.api : context;\r\n        if (typeof this.options[name] === 'function') {\r\n            return this.options[name].apply(context, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description show element with CSS only - if none provided, set list state to visible\r\n     * @param {Element=} element\r\n     */\r\n    show(element) {\r\n        if (typeof element !== 'undefined') {\r\n            let toRemove = `${this.cssNameSpace}--hide hide hidden`;\r\n            removeClass(element, toRemove);\r\n            return element.removeAttribute('hidden');\r\n        }\r\n\r\n        this.input.setAttribute('aria-expanded', 'true');\r\n        if (this.showAll) {\r\n            let expanded = (!!this.forceShowAll).toString();\r\n            this.showAll.setAttribute('aria-expanded', expanded);\r\n        }\r\n        if (!this.menuOpen) {\r\n            this.show(this.list);\r\n            this.menuOpen = true;\r\n            this.triggerOptionCallback('onOpen', [this.list]);\r\n            if (!this.documentClickBound) {\r\n                this.documentClickBound = true;\r\n                document.addEventListener('click', this.documentClick);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @description hide element with CSS only - if none provided, set list state to hidden\r\n     * @param {Element=} element\r\n     */\r\n    hide(element) {\r\n        if (typeof element !== 'undefined') {\r\n            addClass(element, `${this.cssNameSpace}--hide hide hidden`);\r\n            return element.setAttribute('hidden', 'hidden');\r\n        }\r\n\r\n        this.currentSelectedIndex = -1;\r\n        this.input.setAttribute('aria-expanded', 'false');\r\n        if (this.showAll) {\r\n            this.showAll.setAttribute('aria-expanded', 'false');\r\n        }\r\n        if (this.menuOpen) {\r\n            this.hide(this.list);\r\n            this.menuOpen = false;\r\n            this.triggerOptionCallback('onClose', [this.list]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description enable autocomplete (e.g. when under maxItems selected)\r\n     */\r\n    enable() {\r\n        if (this.disabled) {\r\n            this.disabled = false;\r\n            this.input.disabled = false;\r\n            let n = this.cssNameSpace;\r\n            removeClass(this.input, `${n}__input--disabled disabled`);\r\n            removeClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '0');\r\n                removeClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description disable autocomplete (e.g. when maxItems selected)\r\n     */\r\n    disable() {\r\n        if (!this.disabled) {\r\n            this.disabled = true;\r\n            this.input.disabled = true;\r\n            let n = this.cssNameSpace;\r\n            addClass(this.input, `${n}__input--disabled disabled`);\r\n            addClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '-1');\r\n                addClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description trigger input resizing if autogrow is enabled\r\n     */\r\n    triggerAutoGrow() {\r\n        if (this.autoGrow && this.AutoGrowInput) {\r\n            this.AutoGrowInput.trigger();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set input value to specific string, and related component vars\r\n     * @param {String} value\r\n     * @param {Boolean=} setPollingValue\r\n     */\r\n    setInputValue(value, setPollingValue = false) {\r\n        this.input.value = this.term = value;\r\n        if (setPollingValue) {\r\n            this.inputPollingValue = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description check if current input value is contained in a selection of options\r\n     * @param {Array} options - array of objects with value and label properties\r\n     * @param {String=} query - string to use - checks input value otherwise\r\n     * @param {String=} prop - prop to check against in options array - defaults to 'label'\r\n     * @returns {Number} index of array entry that matches, or -1 if none found\r\n     */\r\n    indexOfQueryIn(options, query = this.input.value, prop) {\r\n        query = trimString(query).toLowerCase();\r\n        if (query) {\r\n            prop = prop || 'label';\r\n            for (let i = 0, l = options.length; i < l; i += 1) {\r\n                if (trimString(options[i][prop]).toLowerCase() === query) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * @description make a screen reader announcement\r\n     * @param {String} text\r\n     * @param {Number=} delay\r\n     */\r\n    announce(text, delay) {\r\n        if (!text || !this.srAnnouncements) {\r\n            return;\r\n        }\r\n        // in immediate case, do not user timer\r\n        if (delay === 0) {\r\n            return (this.srAnnouncements.textContent = text);\r\n        }\r\n        delay = typeof delay === 'number' ? delay : 400;\r\n        if (this.announcementTimer) {\r\n            clearTimeout(this.announcementTimer);\r\n        }\r\n        this.announcementTimer = setTimeout(() => {\r\n            this.srAnnouncements.textContent = text;\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description check if element is a selected element in the DOM\r\n     * @param {Element} element\r\n     * @returns {Boolean}\r\n     */\r\n    isSelectedElem(element) {\r\n        return (\r\n            this.multiple &&\r\n            element.ariaAutocompleteSelectedOption &&\r\n            hasClass(element, `${this.cssNameSpace}__selected`)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @description get DOM elements for selected items\r\n     * @returns {Element[]}\r\n     */\r\n    getSelectedElems() {\r\n        let n = this.wrapper.childNodes;\r\n        let a = [];\r\n        for (let i = 0, l = n.length; i < l; i += 1) {\r\n            if (this.isSelectedElem(n[i])) {\r\n                a.push(n[i]);\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @description remove object from selected\r\n     * @param {Object} entry\r\n     */\r\n    removeEntryFromSelected(entry) {\r\n        let index = this.selected.indexOf(entry);\r\n        if (index === -1) {\r\n            // value check, in case explicit object reference did not work\r\n            for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n                if (this.selected[i].value === entry.value) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // set element state, dispatch change event, set selected array,\r\n        // trigger callback, build selected, and do screen reader announcement\r\n        if (index > -1 && this.selected[index]) {\r\n            let option = mergeObjects(this.selected[index]);\r\n            let label = option.label;\r\n            setElementState(option.element, false, this);\r\n            this.selected.splice(index, 1);\r\n            this.triggerOptionCallback('onDelete', [option]);\r\n            this.buildMultiSelected();\r\n            this.announce(`${label} ${this.options.srDeletedText}`, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description re-build the html showing the selected items\r\n     * note: there are a lot of loops here - could affect performance\r\n     */\r\n    buildMultiSelected() {\r\n        // only do anything in multiple mode\r\n        if (!this.multiple) {\r\n            return;\r\n        }\r\n\r\n        // disable or enable as needed\r\n        if (this.multiple && this.selected.length >= this.options.maxItems) {\r\n            this.disable();\r\n        } else {\r\n            this.enable();\r\n        }\r\n\r\n        // no elements, and none selected, do nothing\r\n        let currentSelectedElems = this.getSelectedElems();\r\n        if (!this.selected.length && !currentSelectedElems.length) {\r\n            return;\r\n        }\r\n\r\n        // cycle through existing elements, and remove any not in the selected array\r\n        let current = [];\r\n        let i = currentSelectedElems.length;\r\n        while (i--) {\r\n            let option = currentSelectedElems[i].ariaAutocompleteSelectedOption;\r\n            let l = this.selected.length;\r\n            let isInSelected = false;\r\n            while (l--) {\r\n                let selected = this.selected[l];\r\n                if (selected === option || selected.value === option.value) {\r\n                    isInSelected = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (isInSelected) {\r\n                current.push(currentSelectedElems[i]);\r\n            } else {\r\n                this.wrapper.removeChild(currentSelectedElems[i]);\r\n            }\r\n        }\r\n\r\n        // cycle through selected array, and add elements for any not represented by one\r\n        let deleteText = this.options.srDeleteText;\r\n        let fragment = document.createDocumentFragment();\r\n        let selectedClass = `${this.cssNameSpace}__selected`;\r\n        for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n            let selected = this.selected[i];\r\n            let l = current.length;\r\n            let isInDom = false;\r\n            while (l--) {\r\n                let option = current[l].ariaAutocompleteSelectedOption;\r\n                if (option === selected || option.value === selected.value) {\r\n                    isInDom = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!isInDom) {\r\n                let label = selected.label;\r\n                let span = htmlToElement(\r\n                    `<span role=\"button\" class=\"${selectedClass}\" ` +\r\n                        `tabindex=\"0\" aria-label=\"${deleteText} ${label}\">` +\r\n                        `${label}</span>`\r\n                );\r\n                span.ariaAutocompleteSelectedOption = selected;\r\n                fragment.appendChild(span);\r\n            }\r\n        }\r\n        if (fragment.childNodes && fragment.childNodes.length) {\r\n            this.wrapper.insertBefore(fragment, this.list);\r\n        }\r\n\r\n        // set ids on elements\r\n        let ids = [];\r\n        // get selected elements again, as some may have been added or removed\r\n        current = this.getSelectedElems();\r\n        for (let i = 0, l = current.length; i < l; i += 1) {\r\n            let id = `${this.ids.OPTION_SELECTED}-${i}`;\r\n            current[i].setAttribute('id', id);\r\n            ids.push(id);\r\n        }\r\n        ids.push(this.ids.LIST);\r\n\r\n        // set input aria-owns\r\n        this.input.setAttribute('aria-owns', ids.join(' '));\r\n\r\n        // in autogrow mode, hide the placeholder if there are selected items\r\n        if (this.autoGrow && this.options.placeholder) {\r\n            let toSet = this.selected.length ? '' : this.options.placeholder;\r\n            this.input.setAttribute('placeholder', toSet);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set the aria-describedby attribute on the input\r\n     */\r\n    setInputDescription() {\r\n        let exists = this.input.getAttribute('aria-describedby');\r\n        let current = trimString(exists || '');\r\n        let describedBy = current.replace(this.ids.SR_ASSISTANCE, '');\r\n\r\n        if (this.input.value.length === 0) {\r\n            describedBy = describedBy + ' ' + this.ids.SR_ASSISTANCE;\r\n        }\r\n\r\n        // set or remove attribute, but only if necessary\r\n        if ((describedBy = trimString(describedBy))) {\r\n            if (describedBy !== current) {\r\n                this.input.setAttribute('aria-describedby', describedBy);\r\n            }\r\n        } else if (exists) {\r\n            this.input.removeAttribute('aria-describedby');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description reset classes and aria-selected attribute for all visible filtered options\r\n     */\r\n    resetOptionAttributes() {\r\n        let cssName = this.cssNameSpace;\r\n        let nodes = this.list.childNodes;\r\n        let l = nodes.length;\r\n\r\n        while (l--) {\r\n            removeClass(nodes[l], `${cssName}__option--focused focused focus`);\r\n            nodes[l].setAttribute('aria-selected', 'false');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description move focus to correct option, or to input (on up and down arrows)\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     */\r\n    setOptionFocus(event, index) {\r\n        // set aria-selected to false and remove focused class\r\n        this.resetOptionAttributes();\r\n\r\n        // if negative index, or no options available, focus on input\r\n        let options = this.list.childNodes;\r\n        if (index < 0 || !options || !options.length) {\r\n            this.currentSelectedIndex = -1;\r\n            // focus on input, only if event was from another element\r\n            if (event && event.target !== this.input) {\r\n                this.input.focus();\r\n            }\r\n            return;\r\n        }\r\n\r\n        // down arrow on/past last option, focus on last item\r\n        if (index >= options.length) {\r\n            this.currentSelectedIndex = options.length - 1;\r\n            this.setOptionFocus(event, this.currentSelectedIndex);\r\n            return;\r\n        }\r\n\r\n        // if option found, focus...\r\n        let toFocus = options[index];\r\n        if (toFocus && typeof toFocus.getAttribute('tabindex') === 'string') {\r\n            this.currentSelectedIndex = index;\r\n            let toAdd = `${this.cssNameSpace}__option--focused focused focus`;\r\n            addClass(toFocus, toAdd);\r\n            toFocus.setAttribute('aria-selected', 'true');\r\n            toFocus.focus();\r\n            return;\r\n        }\r\n\r\n        // reset index just in case\r\n        this.currentSelectedIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * @description set values and dispatch events based on any DOM elements in the selected array\r\n     */\r\n    setSourceElementValues() {\r\n        let valToSet = [];\r\n        for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n            let entry = this.selected[i];\r\n            valToSet.push(entry.value);\r\n            setElementState(entry.element, true, this); // element processing\r\n        }\r\n\r\n        // set original input value\r\n        if (this.elementIsInput) {\r\n            let valToSetString = valToSet.join(this.options.multipleSeparator);\r\n            if (valToSetString !== this.element.value) {\r\n                this.element.value = valToSetString;\r\n                dispatchEvent(this.element, 'change');\r\n            }\r\n        }\r\n\r\n        // included in case of multi-select mode used with a <select> element as the source\r\n        if (!this.selected.length && this.elementIsSelect) {\r\n            this.element.value = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description select option from the list by index\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     * @param {Boolean=} focusAfterSelection\r\n     */\r\n    handleOptionSelect(event, index, focusAfterSelection = true) {\r\n        // defensive check for proper index, that the filteredSource exists, and not exceed max items option\r\n        if (\r\n            typeof index !== 'number' ||\r\n            index < 0 ||\r\n            (this.multiple && this.selected.length >= this.options.maxItems) ||\r\n            !this.filteredSource.length ||\r\n            !this.filteredSource[index]\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // generate new object from the selected item in case the original source gets altered\r\n        let option = mergeObjects(this.filteredSource[index]);\r\n\r\n        // detect if selected option is already in selected array\r\n        let l = this.selected.length;\r\n        let alreadySelected = false;\r\n        while (l--) {\r\n            if (this.selected[l].value === option.value) {\r\n                alreadySelected = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.setInputValue(this.multiple ? '' : option.label, true);\r\n        this.triggerAutoGrow();\r\n\r\n        // reset selected array in single select mode\r\n        if (!alreadySelected && !this.multiple) {\r\n            this.selected = [];\r\n        }\r\n\r\n        // (re)set values of any DOM elements based on selected array\r\n        if (!alreadySelected) {\r\n            this.selected.push(option);\r\n            this.setSourceElementValues();\r\n            this.buildMultiSelected(); // rebuild multi-selected if needed\r\n        }\r\n\r\n        this.triggerOptionCallback('onConfirm', [option]);\r\n        this.announce(`${option.label} ${this.options.srSelectedText}`, 0);\r\n\r\n        // return focus to input\r\n        if (!this.disabled && focusAfterSelection !== false) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // close menu after option selection, and after returning focus to input\r\n        this.hide();\r\n    }\r\n\r\n    /**\r\n     * @description remove selected entries from results if in multiple mode\r\n     * @param {Array} results\r\n     * @returns {Array}\r\n     */\r\n    removeSelectedFromResults(results) {\r\n        if (!this.multiple || !this.selected.length) {\r\n            return results;\r\n        }\r\n        let toReturn = [];\r\n        resultsLoop: for (let i = 0, l = results.length; i < l; i += 1) {\r\n            let selected = this.selected;\r\n            let result = results[i];\r\n            for (let j = 0, k = selected.length; j < k; j += 1) {\r\n                let labelMatch = result.label === selected[j].label;\r\n                if (labelMatch && result.value === selected[j].value) {\r\n                    continue resultsLoop;\r\n                }\r\n            }\r\n            toReturn.push(result);\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * @description final filtering and render for list options, and render\r\n     * @param {Array} results\r\n     */\r\n    setListOptions(results) {\r\n        let toShow = [];\r\n        let optionId = this.ids.OPTION;\r\n        let cssName = this.cssNameSpace;\r\n        let mapping = this.options.sourceMapping;\r\n        // if in multiple mode, exclude items already in the selected array\r\n        let updated = this.removeSelectedFromResults(results);\r\n        // allow callback to alter the response before rendering\r\n        let callback = this.triggerOptionCallback('onResponse', updated);\r\n\r\n        // now commit to setting the filtered source\r\n        this.filteredSource = callback\r\n            ? processSourceArray(callback, mapping)\r\n            : updated;\r\n        let length = this.filteredSource.length;\r\n\r\n        // build up the list html\r\n        let maxResults = this.forceShowAll ? 9999 : this.options.maxResults;\r\n        for (let i = 0; i < length && i < maxResults; i += 1) {\r\n            toShow.push(\r\n                `<li tabindex=\"-1\" aria-selected=\"false\" role=\"option\" class=\"${cssName}__option\" ` +\r\n                    `id=\"${optionId}--${i}\" aria-posinset=\"${i + 1}\" ` +\r\n                    `aria-setsize=\"${length}\">${this.filteredSource[i].label}</li>`\r\n            );\r\n        }\r\n\r\n        // set has-results or no-results class on the list element\r\n        if (toShow.length) {\r\n            addClass(this.list, `${cssName}__list--has-results`);\r\n            removeClass(this.list, `${cssName}__list--no-results`);\r\n        } else {\r\n            removeClass(this.list, `${cssName}__list--has-results`);\r\n            addClass(this.list, `${cssName}__list--no-results`);\r\n        }\r\n\r\n        // no results text handling\r\n        let announce;\r\n        let noText = this.options.noResultsText;\r\n        if (!toShow.length && typeof noText === 'string' && noText.length) {\r\n            announce = noText;\r\n            let optionClass = `${cssName}__option`;\r\n            toShow.push(\r\n                `<li class=\"${optionClass} ${optionClass}--no-results\">${noText}</li>`\r\n            );\r\n        }\r\n\r\n        // remove loading class(es) and reset variables\r\n        this.cancelFilterPrep();\r\n\r\n        // announce to screen reader\r\n        if (!announce) {\r\n            announce = this.triggerOptionCallback('srResultsText', [length]);\r\n        }\r\n        this.announce(announce);\r\n\r\n        // render the list, only if we have to\r\n        // time taken for string comparison is worth it to not have to re-parse and re-render the list\r\n        let newListHtml = toShow.join('');\r\n        if (this.currentListHtml !== newListHtml) {\r\n            this.currentListHtml = newListHtml;\r\n            // innerHTML vs insertAdjacentHtml performance in old IE ?\r\n            this.list.innerHTML = newListHtml;\r\n        } else {\r\n            // if list html matches, and not re-rendered, clear aria-selected and focus classes\r\n            this.resetOptionAttributes();\r\n        }\r\n\r\n        // if toShow array is empty, make sure not to render the menu\r\n        if (!toShow.length) {\r\n            this.hide();\r\n            this.forceShowAll = false;\r\n            return;\r\n        }\r\n\r\n        this.show();\r\n        // reset forceShowAll must be after .show()\r\n        // aria-expanded attribute on showAllControl is controlled in .show() method\r\n        this.forceShowAll = false;\r\n    }\r\n\r\n    /**\r\n     * @description trigger async call for options to render\r\n     * @param {String} value\r\n     * @param {Boolean=} isFirstCall\r\n     */\r\n    handleAsync(value, isFirstCall = false) {\r\n        let xhr = new XMLHttpRequest();\r\n        let encode = encodeURIComponent;\r\n        let isShowAll = this.forceShowAll;\r\n        let unlimited = isShowAll || isFirstCall;\r\n        let baseAmount = this.multiple ? this.selected.length : 0;\r\n        let ampersandOrQuestionMark = /\\?/.test(this.source) ? '&' : '?';\r\n        let url =\r\n            this.source +\r\n            ampersandOrQuestionMark +\r\n            `${encode(this.options.asyncQueryParam)}=${encode(value)}&` +\r\n            `${encode(this.options.asyncMaxResultsParam)}=` +\r\n            `${unlimited ? 9999 : baseAmount + this.options.maxResults}`;\r\n\r\n        // abort any current call first\r\n        if (this.xhr) {\r\n            this.xhr.abort();\r\n        }\r\n\r\n        let context = isFirstCall ? null : this.api;\r\n        url = this.triggerOptionCallback('onAsyncPrep', [url], context) || url;\r\n\r\n        xhr.open('GET', url);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === xhr.DONE) {\r\n                if (xhr.status === 200) {\r\n                    // return forceShowAll to previous state before the options render\r\n                    this.forceShowAll = isShowAll;\r\n                    let callbackResponse = this.triggerOptionCallback(\r\n                        'onAsyncSuccess',\r\n                        [value, xhr],\r\n                        context\r\n                    );\r\n                    let mapping = this.options.sourceMapping;\r\n                    let source = callbackResponse || xhr.responseText;\r\n                    let items = processSourceArray(source, mapping, false);\r\n\r\n                    if (isFirstCall) {\r\n                        this.prepSelectedFromArray(items);\r\n                        this.setInputStartingStates(false);\r\n                    } else {\r\n                        this.setListOptions(items);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        // allow the creation of an uncancellable call to use on first load\r\n        if (!isFirstCall) {\r\n            this.xhr = xhr;\r\n        }\r\n\r\n        xhr.send();\r\n    }\r\n\r\n    /**\r\n     * @description trigger filtering using a value\r\n     * @param {String} value\r\n     */\r\n    filter(value) {\r\n        // fail silently if no value is provided\r\n        if (typeof value !== 'string') {\r\n            this.cancelFilterPrep();\r\n            return;\r\n        }\r\n\r\n        let forceShowAll = this.forceShowAll;\r\n        let callbackResponse = this.triggerOptionCallback('onSearch', [value]);\r\n        let toReturn = [];\r\n\r\n        // allow onSearch callback to affect the searched value\r\n        // only permitted when not a forceShowAll case\r\n        if (!forceShowAll && typeof callbackResponse === 'string') {\r\n            value = callbackResponse;\r\n        }\r\n\r\n        // store search term - used for comparison in filterPrep\r\n        this.term = this.inputPollingValue = value;\r\n\r\n        // async handling\r\n        if (this.async) {\r\n            this.handleAsync(value);\r\n            // set show all to false immediately as may be used in other places\r\n            this.forceShowAll = false;\r\n            return;\r\n        }\r\n\r\n        // handle the source as a function\r\n        if (typeof this.source === 'function') {\r\n            this.source.call(this.api, this.term, response => {\r\n                let mapping = this.options.sourceMapping;\r\n                let result = processSourceArray(response, mapping);\r\n                this.setListOptions(result);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // if empty string, show all\r\n        if (!value) {\r\n            forceShowAll = true;\r\n        }\r\n\r\n        // existing list handling\r\n        if (this.source && this.source.length) {\r\n            let check = ['ariaAutocompleteCleanedLabel'];\r\n            if (!forceShowAll) {\r\n                value = cleanString(value, true);\r\n                let searchIn = this.options.alsoSearchIn;\r\n                if (Array.isArray(searchIn) && searchIn.length) {\r\n                    check = removeDuplicatesAndLabel(check.concat(searchIn));\r\n                }\r\n            }\r\n            for (let i = 0, l = this.source.length; i < l; i += 1) {\r\n                let entry = this.source[i];\r\n                if (forceShowAll || searchVarPropsFor(entry, check, value)) {\r\n                    toReturn.push({\r\n                        element: entry.element,\r\n                        staticSourceIndex: i,\r\n                        label: entry.label,\r\n                        value: entry.value\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setListOptions(toReturn);\r\n    }\r\n\r\n    /**\r\n     * @description cancel filter timer and remove loading classes\r\n     */\r\n    cancelFilterPrep() {\r\n        if (this.filterTimer) {\r\n            clearTimeout(this.filterTimer);\r\n        }\r\n        let nameSpace = this.cssNameSpace;\r\n        removeClass(this.wrapper, `${nameSpace}__wrapper--loading loading`);\r\n        removeClass(this.input, `${nameSpace}__input--loading loading`);\r\n        this.filtering = false;\r\n    }\r\n\r\n    /**\r\n     * @description checks before filtering, and set filter timer\r\n     * @param {Event} e\r\n     * @param {Boolean=} doValueOverrideCheck - whether to check input value against selected item(s)\r\n     * @param {Boolean=} runNow\r\n     */\r\n    filterPrep(e, doValueOverrideCheck = false, runNow = false) {\r\n        let forceShowAll = this.forceShowAll;\r\n        let delay = forceShowAll || runNow ? 0 : this.options.delay;\r\n\r\n        // clear timers\r\n        this.cancelFilterPrep();\r\n        this.filtering = true;\r\n        this.filterTimer = setTimeout(() => {\r\n            let value = this.input.value;\r\n            // treat as empty search if...\r\n            // forceShowAll, or in single mode and selected item label matches current value\r\n            if (\r\n                forceShowAll ||\r\n                value === '' ||\r\n                (doValueOverrideCheck &&\r\n                    !this.multiple &&\r\n                    this.selected.length &&\r\n                    trimString(this.selected[0].label) === trimString(value))\r\n            ) {\r\n                value = '';\r\n            }\r\n\r\n            // handle aria-describedby\r\n            this.setInputDescription();\r\n            this.inputPollingValue = value; // set polling value, even if search criteria not met\r\n\r\n            if (!forceShowAll && value.length < this.options.minLength) {\r\n                this.hide();\r\n                return;\r\n            }\r\n\r\n            // try catch used due to permissions issues in some cases\r\n            let modifier;\r\n            try {\r\n                let keydown = e && e.type === 'keydown';\r\n                modifier = keydown && (e.altKey || e.ctrlKey || e.metaKey); // allow shift key, just in case...\r\n            } catch (e) {}\r\n\r\n            // if value to use matches last used search term, do nothing\r\n            let equalVals = value === '' ? false : value === this.term;\r\n\r\n            // prevent search being run again with the same value\r\n            if (!equalVals || (equalVals && !this.menuOpen && !modifier)) {\r\n                let n = this.cssNameSpace;\r\n                addClass(this.wrapper, `${n}__wrapper--loading loading`);\r\n                addClass(this.input, `${n}__input--loading loading`);\r\n                this.currentSelectedIndex = -1;\r\n                this.filter(value);\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description trigger filter prep in showAll mode\r\n     * @param {Event} event\r\n     */\r\n    filterPrepShowAll(event) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        // need to use a timer, as the wrapper focus out will fire after the click event\r\n        if (this.showAllPrepTimer) {\r\n            clearTimeout(this.showAllPrepTimer);\r\n        }\r\n        this.showAllPrepTimer = setTimeout(() => {\r\n            if (this.componentBlurTimer) {\r\n                clearTimeout(this.componentBlurTimer);\r\n            }\r\n            event.preventDefault();\r\n            this.forceShowAll = true;\r\n            this.filterPrep(event, false, true);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description blur behaviour for hiding list and removing focus class(es)\r\n     * @param {Event} event\r\n     * @param {Boolean=} force - fire instantly and force blurring out of the component\r\n     */\r\n    handleComponentBlur(event, force = false) {\r\n        let delay = force ? 0 : 100;\r\n        if (this.componentBlurTimer) {\r\n            clearTimeout(this.componentBlurTimer);\r\n        }\r\n        // use a timeout to ensure this blur fires after other focus events\r\n        // and in case the user focuses back in immediately\r\n        this.componentBlurTimer = setTimeout(() => {\r\n            // do nothing if blurring to an element within the list\r\n            let activeElem = document.activeElement;\r\n            if (\r\n                !force &&\r\n                activeElem &&\r\n                !(this.showAll && this.showAll === activeElem) && // exception for show all button\r\n                !activeElem.ariaAutocompleteSelectedOption // exception for selected items\r\n            ) {\r\n                // must base this on the wrapper to allow scrolling the list in IE\r\n                if (this.wrapper.contains(activeElem)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // cancel any running async call\r\n            if (this.xhr) {\r\n                this.xhr.abort();\r\n            }\r\n\r\n            // confirmOnBlur behaviour\r\n            let isQueryIn = this.indexOfQueryIn.bind(this);\r\n            if (!force && this.options.confirmOnBlur && this.menuOpen) {\r\n                // if blurring from an option (currentSelectedIndex > -1), select it\r\n                let toUse = this.currentSelectedIndex;\r\n                if (typeof toUse !== 'number' || toUse === -1) {\r\n                    // otherwise check for exact match between current input value and available items\r\n                    toUse = isQueryIn(this.filteredSource);\r\n                }\r\n                this.handleOptionSelect({}, toUse, false);\r\n            }\r\n\r\n            this.cancelFilterPrep();\r\n            this.hide();\r\n\r\n            // in single select case, if current value and chosen value differ, clear selected and input value\r\n            if (!this.multiple && isQueryIn(this.selected) === -1) {\r\n                let isInputOrDdl = this.elementIsInput || this.elementIsSelect;\r\n                if (isInputOrDdl && this.element.value !== '') {\r\n                    this.element.value = '';\r\n                    dispatchEvent(this.element, 'change');\r\n                }\r\n                if (this.selected.length) {\r\n                    this.removeEntryFromSelected(this.selected[0]);\r\n                }\r\n                this.setInputValue('', true);\r\n            }\r\n\r\n            if (this.multiple) {\r\n                this.setInputValue('', true);\r\n            }\r\n\r\n            // trigger input resizing\r\n            this.triggerAutoGrow();\r\n\r\n            // unbind document click\r\n            if (this.documentClickBound) {\r\n                this.documentClickBound = false;\r\n                document.removeEventListener('click', this.documentClick);\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description enter keydown for selections\r\n     * @param {Event} event\r\n     */\r\n    handleEnterKey(event) {\r\n        // if in multiple mode, and event target was a selected item, remove it\r\n        if (this.isSelectedElem(event.target)) {\r\n            let option = event.target.ariaAutocompleteSelectedOption;\r\n            return this.removeEntryFromSelected(option);\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (this.showAll && event.target === this.showAll) {\r\n            this.filterPrepShowAll(event);\r\n            return;\r\n        }\r\n\r\n        if (this.menuOpen) {\r\n            event.preventDefault();\r\n            if (this.currentSelectedIndex > -1) {\r\n                this.handleOptionSelect(event, this.currentSelectedIndex);\r\n            }\r\n        }\r\n\r\n        // if enter keypress was from the filter input, trigger search immediately\r\n        if (event.target === this.input) {\r\n            this.filterPrep(event, false, true);\r\n        }\r\n    }\r\n    /**\r\n     * @description down arrow usage - option focus, or search all\r\n     * @param {Event} event\r\n     */\r\n    handleDownArrowKey(event) {\r\n        event.preventDefault();\r\n        // if closed, and text is long enough, run search\r\n        if (!this.menuOpen) {\r\n            this.forceShowAll = this.options.minLength < 1;\r\n            if (\r\n                this.forceShowAll ||\r\n                this.input.value.length >= this.options.minLength\r\n            ) {\r\n                this.filterPrep(event);\r\n            }\r\n        }\r\n        // move focus to downward option\r\n        if (this.menuOpen && !this.filtering) {\r\n            let current = this.currentSelectedIndex;\r\n            if (typeof current !== 'number' || current < 0) {\r\n                this.setOptionFocus(event, 0);\r\n            } else {\r\n                this.setOptionFocus(event, current + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description up arrow usage - option focus, or return focus to input\r\n     * @param {Event} event\r\n     */\r\n    handleUpArrowKey(event) {\r\n        event.preventDefault();\r\n        let usable = !this.disabled && this.menuOpen;\r\n        if (usable && typeof this.currentSelectedIndex === 'number') {\r\n            this.setOptionFocus(event, this.currentSelectedIndex - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description standard keydown handling (excluding enter, up, down, escape)\r\n     * @param {Event} event\r\n     */\r\n    handleKeyDownDefault(event) {\r\n        const targetIsInput = event.target === this.input;\r\n        // on space, if focus state is on any other item, treat as enter\r\n        if (event.keyCode === 32 && !targetIsInput) {\r\n            event.preventDefault();\r\n            return this.handleEnterKey(event);\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        // on backspace, if using empty input in multiple mode, delete last selected entry\r\n        let selectedLength = this.selected && this.selected.length;\r\n        if (\r\n            this.options.deleteOnBackspace &&\r\n            this.input.value === '' &&\r\n            event.keyCode === 8 &&\r\n            selectedLength &&\r\n            targetIsInput &&\r\n            this.multiple\r\n        ) {\r\n            this.removeEntryFromSelected(this.selected[selectedLength - 1]);\r\n            return;\r\n        }\r\n\r\n        // any printable character not on input, return focus to input\r\n        let printableKey = isPrintableKey(event.keyCode);\r\n        let focusInput = !targetIsInput && printableKey;\r\n        if (focusInput) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // trigger filtering - done here, instead of using input event, due to IE9 issues\r\n        if (focusInput || (targetIsInput && printableKey)) {\r\n            this.filterPrep(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description component keydown handling\r\n     * @param {Event} event\r\n     */\r\n    prepKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 13: // on enter\r\n                this.handleEnterKey(event);\r\n                break;\r\n            case 27: // on escape\r\n                this.handleComponentBlur(event, true);\r\n                break;\r\n            case 38: // on up\r\n                this.handleUpArrowKey(event);\r\n                break;\r\n            case 40: // on down\r\n                this.handleDownArrowKey(event);\r\n                break;\r\n            default:\r\n                this.handleKeyDownDefault(event);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description cancel checking for input value changes from external causes\r\n     */\r\n    cancelPolling() {\r\n        if (this.pollingTimer) {\r\n            clearTimeout(this.pollingTimer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description start checking for input value changes from causes that bypass event detection\r\n     */\r\n    startPolling() {\r\n        // check if input value does not equal last searched term\r\n        if (!this.filtering && this.input.value !== this.inputPollingValue) {\r\n            this.filterPrep({});\r\n        }\r\n        this.pollingTimer = setTimeout(() => {\r\n            this.startPolling();\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * @description bind component events to generated elements\r\n     */\r\n    bindEvents() {\r\n        // when focus is moved outside of the component, close everything\r\n        this.wrapper.addEventListener('focusout', event => {\r\n            this.handleComponentBlur(event, false);\r\n        });\r\n        // reset selected index\r\n        this.wrapper.addEventListener('focusin', event => {\r\n            if (!this.list.contains(event.target)) {\r\n                this.currentSelectedIndex = -1;\r\n            }\r\n        });\r\n        // handle all keydown events inside the component\r\n        this.wrapper.addEventListener('keydown', event => {\r\n            this.prepKeyDown(event);\r\n        });\r\n        // if clicking directly on the wrapper, move focus to the input\r\n        this.wrapper.addEventListener('click', event => {\r\n            if (event.target === this.wrapper) {\r\n                this.input.focus();\r\n                return;\r\n            }\r\n            if (this.isSelectedElem(event.target)) {\r\n                let option = event.target.ariaAutocompleteSelectedOption;\r\n                this.removeEntryFromSelected(option);\r\n            }\r\n        });\r\n\r\n        let wrapperFocusClasses = `${this.cssNameSpace}__wrapper--focused focused focus`;\r\n        let inputFocusClasses = `${this.cssNameSpace}__input--focused focused focus`;\r\n        // when blurring out of input, remove classes\r\n        this.input.addEventListener('blur', () => {\r\n            removeClass(this.wrapper, wrapperFocusClasses);\r\n            removeClass(this.input, inputFocusClasses);\r\n            this.cancelPolling();\r\n        });\r\n        // trigger filter on input event as well as keydown (covering bases)\r\n        this.input.addEventListener('input', event => {\r\n            this.filterPrep(event);\r\n        });\r\n        // when specifically clicking on input, if menu is closed, and value is long enough, search\r\n        this.input.addEventListener('click', event => {\r\n            let open = this.menuOpen;\r\n            if (!open && this.input.value.length >= this.options.minLength) {\r\n                this.filterPrep(event, true);\r\n            }\r\n        });\r\n        // when focusing on input, reset selected index and trigger search handling\r\n        this.input.addEventListener('focusin', () => {\r\n            addClass(this.wrapper, wrapperFocusClasses);\r\n            addClass(this.input, inputFocusClasses);\r\n            this.startPolling();\r\n            if (!this.disabled && !this.menuOpen) {\r\n                this.filterPrep(event, true);\r\n            }\r\n        });\r\n\r\n        // show all button click\r\n        if (this.showAll) {\r\n            this.showAll.addEventListener('click', event => {\r\n                this.filterPrepShowAll(event);\r\n            });\r\n        }\r\n\r\n        // clear any current focus position when hovering into the list\r\n        this.list.addEventListener('mouseenter', event => {\r\n            this.resetOptionAttributes();\r\n        });\r\n        // trigger options selection\r\n        this.list.addEventListener('click', event => {\r\n            if (event.target !== this.list) {\r\n                let childNodes = this.list.childNodes;\r\n                if (childNodes.length) {\r\n                    let nodeIndex = [].indexOf.call(childNodes, event.target);\r\n                    this.handleOptionSelect(event, nodeIndex);\r\n                }\r\n            }\r\n        });\r\n\r\n        // setup input autogrow behaviour\r\n        if (this.autoGrow) {\r\n            this.AutoGrowInput = new AutoGrow(this.input);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on child checkboxes\r\n     */\r\n    prepListSourceCheckboxes() {\r\n        this.multiple = true; // force multiple in this case\r\n        // reset source and use checkboxes\r\n        this.source = [];\r\n        let elements = this.element.querySelectorAll('input[type=\"checkbox\"]');\r\n        for (let i = 0, l = elements.length; i < l; i += 1) {\r\n            let checkbox = elements[i];\r\n            // must have a value other than empty string\r\n            if (!checkbox.value) {\r\n                continue;\r\n            }\r\n            let toPush = { element: checkbox, value: checkbox.value };\r\n            // label searching\r\n            let label = checkbox.closest('label');\r\n            if (!label && checkbox.id) {\r\n                label = document.querySelector('[for=\"' + checkbox.id + '\"]');\r\n            }\r\n            if (label) {\r\n                toPush.label = label.textContent;\r\n            }\r\n            // if no label so far, re-use value\r\n            if (!toPush.label) {\r\n                toPush.label = toPush.value;\r\n            }\r\n            toPush.ariaAutocompleteCleanedLabel = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (checkbox.checked) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on <select> options\r\n     */\r\n    prepListSourceDdl() {\r\n        this.multiple = this.element.multiple; // force multiple to match select\r\n        // reset source and use options\r\n        this.source = [];\r\n        let options = this.element.querySelectorAll('option');\r\n        for (let i = 0, l = options.length; i < l; i += 1) {\r\n            let option = options[i];\r\n            // must have a value other than empty string\r\n            if (!option.value) {\r\n                continue;\r\n            }\r\n            let toPush = {\r\n                element: option,\r\n                value: option.value,\r\n                label: option.textContent\r\n            };\r\n            toPush.ariaAutocompleteCleanedLabel = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (option.selected) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description build up selected array if starting element was an input, and had a value\r\n     * @param {Object[]} source\r\n     */\r\n    prepSelectedFromArray(source) {\r\n        let value = this.elementIsInput && this.element.value;\r\n        if (value && source && source.length) {\r\n            // account for multiple mode\r\n            let multiple = this.options.multiple;\r\n            let separator = this.options.multipleSeparator;\r\n            let valueArr = multiple ? value.split(separator) : [value];\r\n\r\n            for (let i = 0, l = valueArr.length; i < l; i += 1) {\r\n                let val = valueArr[i];\r\n                let isQueryIn = this.indexOfQueryIn;\r\n                // make sure it is not already in the selected array\r\n                let isInSelected = isQueryIn(this.selected, val, 'value') > -1;\r\n\r\n                // but is in the source array (check via 'value', not 'label')\r\n                if (!isInSelected) {\r\n                    let indexInSource = isQueryIn(source, val, 'value');\r\n                    if (indexInSource > -1) {\r\n                        this.selected.push(source[indexInSource]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust starting source array to format needed, and set selected\r\n     */\r\n    prepListSourceArray() {\r\n        let mapping = this.options.sourceMapping;\r\n        this.source = processSourceArray(this.source, mapping);\r\n        this.prepSelectedFromArray(this.source);\r\n    }\r\n\r\n    /**\r\n     * @description trigger source string endpoint to generate selected array\r\n     */\r\n    prepListSourceAsync() {\r\n        this.async = true;\r\n        if (this.elementIsInput && this.element.value) {\r\n            this.handleAsync(this.element.value, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description process source function to generate selected array\r\n     */\r\n    prepListSourceFunction() {\r\n        if (this.elementIsInput && this.element.value) {\r\n            this.source.call(undefined, this.element.value, response => {\r\n                this.prepSelectedFromArray(\r\n                    processSourceArray(response, this.options.sourceMapping)\r\n                );\r\n                this.setInputStartingStates(false);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust set sources to needed format\r\n     */\r\n    prepListSource() {\r\n        // allow complete control over the source handling via custom function\r\n        if (typeof this.source === 'function') {\r\n            return this.prepListSourceFunction();\r\n        }\r\n\r\n        // string source - treat as async endpoint\r\n        if (typeof this.source === 'string' && this.source.length) {\r\n            return this.prepListSourceAsync();\r\n        }\r\n\r\n        // array source - copy array\r\n        if (Array.isArray(this.source) && this.source.length) {\r\n            return this.prepListSourceArray();\r\n        }\r\n\r\n        // dropdown source\r\n        if (this.elementIsSelect) {\r\n            return this.prepListSourceDdl();\r\n        }\r\n\r\n        // checkboxlist source\r\n        if (this.element.querySelector('input[type=\"checkbox\"]')) {\r\n            this.prepListSourceCheckboxes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set input starting states - aria attributes, disabled state, starting value\r\n     * @param {Boolean=} setAriaAttrs\r\n     */\r\n    setInputStartingStates(setAriaAttrs = true) {\r\n        if (setAriaAttrs) {\r\n            // update corresponding label to now focus on the new input\r\n            if (this.ids.ELEMENT) {\r\n                let label = document.querySelector(\r\n                    '[for=\"' + this.ids.ELEMENT + '\"]'\r\n                );\r\n                if (label) {\r\n                    label.ariaAutocompleteOriginalFor = this.ids.ELEMENT;\r\n                    label.setAttribute('for', this.ids.INPUT);\r\n                }\r\n            }\r\n\r\n            // update aria-describedby and aria-labelledby attributes if present\r\n            let describedBy = this.element.getAttribute('aria-describedby');\r\n            if (describedBy) {\r\n                this.input.setAttribute('aria-describedby', describedBy);\r\n            }\r\n            let labelledBy = this.element.getAttribute('aria-labelledby');\r\n            if (labelledBy) {\r\n                this.input.setAttribute('aria-labelledby', labelledBy);\r\n            }\r\n        }\r\n\r\n        // if selected item(s) already exists\r\n        if (this.selected.length) {\r\n            // for multi select variant, set selected items\r\n            if (this.multiple) {\r\n                this.buildMultiSelected();\r\n            }\r\n            // for single select variant, set value to match\r\n            else {\r\n                this.setInputValue(this.selected[0].label || '', true);\r\n                this.triggerAutoGrow();\r\n            }\r\n        }\r\n\r\n        // setup input description - done here in case value is affected above\r\n        this.setInputDescription();\r\n\r\n        // disable the control if the invoked element was disabled\r\n        if (!!this.element.disabled) {\r\n            this.disable();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description build and insert component html structure\r\n     */\r\n    setHtml() {\r\n        let o = this.options;\r\n        let cssName = this.cssNameSpace;\r\n        let explainerText = o.srListLabelText;\r\n        let name = o.name ? ` ${o.name}` : ``;\r\n        let listClass = o.listClassName ? ` ${o.listClassName}` : '';\r\n        let inputClass = o.inputClassName ? ` ${o.inputClassName}` : '';\r\n        let wrapperClass = o.wrapperClassName ? ` ${o.wrapperClassName}` : '';\r\n        let explainer = explainerText ? ` aria-label=\"${explainerText}\"` : '';\r\n\r\n        let newHtml = [\r\n            `<div id=\"${this.ids.WRAPPER}\" class=\"${cssName}__wrapper${wrapperClass}\">`\r\n        ];\r\n\r\n        // add input\r\n        newHtml.push(\r\n            `<input type=\"text\" autocomplete=\"off\" aria-expanded=\"false\" aria-autocomplete=\"list\" ` +\r\n                `role=\"combobox\" id=\"${this.ids.INPUT}\" placeholder=\"${o.placeholder}\" ` +\r\n                `aria-owns=\"${this.ids.LIST}\" aria-placeholder=\"${o.placeholder}\" ` +\r\n                `class=\"${cssName}__input${inputClass}\"${name} />`\r\n        );\r\n\r\n        // button to show all available options\r\n        if (o.showAllControl) {\r\n            newHtml.push(\r\n                `<span role=\"button\" aria-label=\"${o.srShowAllText}\" class=\"${cssName}__show-all\" ` +\r\n                    `tabindex=\"0\" id=\"${this.ids.BUTTON}\" aria-expanded=\"false\"></span>`\r\n            );\r\n        }\r\n        // add the list holder\r\n        newHtml.push(\r\n            `<ul id=\"${this.ids.LIST}\" class=\"${cssName}__list${listClass}\" role=\"listbox\" ` +\r\n                `hidden=\"hidden\"${explainer}></ul>`\r\n        );\r\n        // add the screen reader assistance element\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-assistance\" ` +\r\n                `id=\"${this.ids.SR_ASSISTANCE}\">${o.srAssistiveText}</span>`\r\n        );\r\n        // add element for added screen reader announcements\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-announcements\" ` +\r\n                `id=\"${this.ids.SR_ANNOUNCEMENTS}\" aria-live=\"polite\" aria-atomic=\"true\"></span>`\r\n        );\r\n\r\n        // close all and append\r\n        newHtml.push(`</div>`);\r\n        this.element.insertAdjacentHTML('afterend', newHtml.join(''));\r\n    }\r\n\r\n    /**\r\n     * @description generate api object to expose on the element\r\n     */\r\n    generateApi() {\r\n        this.api = {\r\n            open: () => this.show.call(this),\r\n            close: () => this.hide.call(this),\r\n            filter: val => this.filter.call(val)\r\n        };\r\n\r\n        let a = [\r\n            'options',\r\n            'destroy',\r\n            'enable',\r\n            'disable',\r\n            'input',\r\n            'wrapper',\r\n            'list',\r\n            'selected'\r\n        ];\r\n\r\n        for (let i = 0, l = a.length; i < l; i += 1) {\r\n            this.api[a[i]] =\r\n                typeof this[a[i]] === 'function'\r\n                    ? () => this[a[i]].call(this)\r\n                    : this[a[i]];\r\n        }\r\n\r\n        // store api on original element\r\n        this.element.ariaAutocomplete = this.api;\r\n    }\r\n\r\n    /**\r\n     * @description destroy component\r\n     */\r\n    destroy() {\r\n        // return original label 'for' attribute back to element id\r\n        let label = document.querySelector('[for=\"' + this.ids.INPUT + '\"]');\r\n        if (label && label.ariaAutocompleteOriginalFor) {\r\n            label.setAttribute('for', label.ariaAutocompleteOriginalFor);\r\n            delete label.ariaAutocompleteOriginalFor;\r\n        }\r\n        // remove the document click if still bound\r\n        if (this.documentClickBound) {\r\n            document.removeEventListener('click', this.documentClick);\r\n        }\r\n        // destroy autogrow behaviour and events\r\n        if (this.autoGrow && this.AutoGrowInput) {\r\n            this.AutoGrowInput.destroy();\r\n        }\r\n        // remove the whole wrapper\r\n        this.element.parentNode.removeChild(this.wrapper);\r\n        delete this.element.ariaAutocomplete;\r\n        // re-show original element\r\n        this.show(this.element);\r\n        // set all instance properties to null to clean up DOMNode references\r\n        for (let i in this) {\r\n            if (this.hasOwnProperty(i)) {\r\n                this[i] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description initialise AriaAutocomplete\r\n     * @param {Element} element\r\n     * @param {Object=} options\r\n     */\r\n    init(element, options) {\r\n        // ids used for DOM queries and accessibility attributes e.g. aria-controls\r\n        appIndex += 1;\r\n        this.ids = {};\r\n        this.ids.ELEMENT = element.id;\r\n        this.ids.PREFIX = `${element.id || ''}aria-autocomplete-${appIndex}`;\r\n        this.ids.LIST = `${this.ids.PREFIX}-list`;\r\n        this.ids.INPUT = `${this.ids.PREFIX}-input`;\r\n        this.ids.BUTTON = `${this.ids.PREFIX}-button`;\r\n        this.ids.OPTION = `${this.ids.PREFIX}-option`;\r\n        this.ids.WRAPPER = `${this.ids.PREFIX}-wrapper`;\r\n        this.ids.OPTION_SELECTED = `${this.ids.OPTION}-selected`;\r\n        this.ids.SR_ASSISTANCE = `${this.ids.PREFIX}-sr-assistance`;\r\n        this.ids.SR_ANNOUNCEMENTS = `${this.ids.PREFIX}-sr-announcements`;\r\n\r\n        this.selected = [];\r\n        this.element = element;\r\n        this.elementIsInput = element.nodeName === 'INPUT';\r\n        this.elementIsSelect = element.nodeName === 'SELECT';\r\n        this.options = mergeObjects(DEFAULT_OPTIONS, options);\r\n\r\n        // set these internally so that the component has to be properly destroyed to change them\r\n        this.source = this.options.source;\r\n        this.multiple = this.options.multiple;\r\n        this.autoGrow = this.options.autoGrow;\r\n        this.cssNameSpace = this.options.cssNameSpace;\r\n        this.documentClick = this.handleComponentBlur.bind(this);\r\n\r\n        // create html structure\r\n        this.setHtml();\r\n\r\n        // additional app variables\r\n        this.list = document.getElementById(this.ids.LIST);\r\n        this.input = document.getElementById(this.ids.INPUT);\r\n        this.wrapper = document.getElementById(this.ids.WRAPPER);\r\n        this.showAll = document.getElementById(this.ids.BUTTON);\r\n        this.srAnnouncements = document.getElementById(\r\n            this.ids.SR_ANNOUNCEMENTS\r\n        );\r\n\r\n        // set internal source array, from static elements if necessary\r\n        this.prepListSource();\r\n\r\n        // set any further classes on component wrapper based on options\r\n        let wrapperClass = '';\r\n        if (this.options.showAllControl) {\r\n            wrapperClass += ` ${this.cssNameSpace}__wrapper--show-all`;\r\n        }\r\n        if (this.autoGrow) {\r\n            wrapperClass += ` ${this.cssNameSpace}__wrapper--autogrow`;\r\n        }\r\n        if (this.multiple) {\r\n            wrapperClass += ` ${this.cssNameSpace}__wrapper--multiple`;\r\n        }\r\n        if (wrapperClass) {\r\n            addClass(this.wrapper, wrapperClass);\r\n        }\r\n\r\n        // hide element and list manually\r\n        this.hide(this.list); // pass in the list so that the onClose is not triggered\r\n        this.hide(this.element);\r\n\r\n        // generate api object to expose\r\n        this.generateApi();\r\n\r\n        // set starting states for input - must be after source has been defined\r\n        this.setInputStartingStates();\r\n\r\n        // bind all necessary events\r\n        this.bindEvents();\r\n\r\n        // fire onready callback\r\n        this.triggerOptionCallback('onReady', [this.wrapper]);\r\n    }\r\n}\r\n\r\n/**\r\n * @description expose specific function rather than the AriaAutocomplete class\r\n * @param {Element} elem\r\n * @param {Object} options\r\n * @returns {Object}\r\n */\r\nwindow['AriaAutocomplete'] = (elem, options) => {\r\n    return new AriaAutocomplete(elem, options).api;\r\n};\r\n\r\nexport default (elem, options) => {\r\n    return new AriaAutocomplete(elem, options).api;\r\n};\r\n"]}