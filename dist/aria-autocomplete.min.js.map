{"version":3,"sources":["closest-polyfill.js","helpers.js","aria-autocomplete.js"],"names":["Element","prototype","matches","msMatchesSelector","webkitMatchesSelector","closest","s","el","parentElement","parentNode","nodeType","trimString","theString","trim","hasClass","element","className","e","cur","getAttribute","indexOf","addClass","classes","currentValue","current","finalValue","i","cs","split","l","length","setAttribute","removeClass","replace","REGEX_AMPERSAND","REGEX_DUPE_WHITESPACE","REGEX_MAKE_SAFE","REGEX_TO_IGNORE","cleanString","toLowerCase","isPrintableKey","keyCode","mergeObjects","n","o","p","hasOwnProperty","dispatchEvent","event","document","createEvent","initEvent","fireEvent","setElementState","selected","instance","nodeName","checked","elementChangeEventTimer","clearTimeout","setTimeout","processSourceArray","sourceArray","mapping","setCleanedLabel","toReturn","mapValue","mapLabel","result","entry","value","label","toString","cleanedLabel","push","DIV","createElement","htmlToElement","html","innerHTML","firstChild","appIndex","DEFAULT_OPTIONS","source","sourceMapping","delay","minLength","maxResults","showAllControl","confirmOnBlur","autoGrowInput","multiple","maxItems","multipleSeparator","deleteOnBackspace","placeholder","noResultsText","listClassName","inputClassName","wrapperClassName","cssNameSpace","asyncQueryParam","asyncMaxResultsParam","srDeleteText","srDeletedText","srShowAllText","srSelectedText","srExplanatoryText","srAssistiveText","srResultsText","onAsyncSuccess","undefined","onResponse","onSearch","onSelect","onReady","onClose","onOpen","AriaAutocomplete","options","ariaAutocomplete","elementIsInput","elementIsSelect","ids","ELEMENT","id","PREFIX","LIST","INPUT","BUTTON","OPTION","WRAPPER","OPTION_SELECTED","SR_ASSISTANCE","SR_ANNOUNCEMENTS","list","input","wrapper","showAll","srAnnouncements","xhr","term","async","menuOpen","disabled","filtering","forceShowAll","filteredSource","currentListHtml","currentSelectedIndex","filterTimer","announcementTimer","componentBlurTimer","init","name","args","apply","toRemove","removeAttribute","expanded","show","triggerOptionCallback","hide","query","prop","text","textContent","ariaAutocompleteSelectedOption","childNodes","a","isSelectedElem","index","splice","buildMultiSelected","currentSelectedElems","getSelectedElems","option","isInSelected","removeChild","deleteText","fragment","createDocumentFragment","selectedClass","isInDom","span","appendChild","join","exists","describedBy","cssName","nodes","resetOptionAttributes","target","focus","setOptionFocus","toFocus","toAdd","valToSet","valToSetString","disable","enable","focusAfterSelection","alreadySelected","setSourceElementValues","announce","results","resultsLoop","j","k","labelMatch","toShow","optionId","updated","removeSelectedFromResults","callback","noText","optionClass","cancelFilterPrep","newListHtml","canCancel","XMLHttpRequest","encode","encodeURIComponent","isShowAll","limit","limitParam","queryParam","params","url","test","abort","open","onload","responseText","items","setListOptions","send","callbackResponse","handleAsync","call","search","staticSourceIndex","nameSpace","doValueOverrideCheck","runNow","setInputDescription","modifier","type","altKey","ctrlKey","metaKey","equalVals","filter","preventDefault","filterPrep","force","activeElem","activeElement","contains","isQueryIn","isQueryContainedIn","bind","toUse","handleOptionSelect","removeEntryFromSelected","filterPrepShowAll","targetIsInput","handleEnterKey","selectedLength","lastSelectedLabel","announcement","pop","focusInput","handleComponentBlur","handleUpArrowKey","handleDownArrowKey","handleKeyDownDefault","addEventListener","prepKeyDown","nodeIndex","elements","querySelectorAll","checkbox","toPush","querySelector","separator","valueArr","val","indexInSource","Array","isArray","prepListSourceArray","prepListSourceDdl","prepListSourceCheckboxes","ariaAutocompleteOriginalFor","labelledBy","explainerText","listClass","inputClass","wrapperClass","explainer","newHtml","insertAdjacentHTML","api","close","refresh","destroy","setHtml","getElementById","prepListSource","setInputStartingStates","bindEvents","generateApi","window","elem"],"mappings":"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","file":"aria-autocomplete.min.js","sourceRoot":"../src","sourcesContent":["if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\nif (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n        var el = this;\n        do { \n            if (el.matches(s)) { \n                return el; \n            } \n            el = el.parentElement || el.parentNode; \n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}","/**\n * @description trim string helper\n * @param {string} theString\n */\nexport function trimString(theString) {\n    return theString == null ? '' : (theString + '').trim();\n}\n\n/**\n * @description check if element has class\n * @param {Element} element - element to check class on\n * @param {String} className\n * @returns {Boolean}\n */\nexport function hasClass(element, className) {\n    let e = element;\n    let cur = trimString(e.getAttribute && e.getAttribute('class'));\n    return ` ${cur} `.indexOf(` ${className} `) > -1;\n}\n\n/**\n * @description add class(es) to element\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to add\n */\nexport function addClass(element, classes) {\n    let currentValue = trimString(\n        element.getAttribute && element.getAttribute('class')\n    );\n    let current = ' ' + currentValue + ' ';\n    let finalValue = '';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        if (cs[i] !== '' && current.indexOf(' ' + cs[i] + ' ') === -1) {\n            finalValue += ' ' + cs[i];\n        }\n    }\n    if (currentValue !== (finalValue = trimString(currentValue + finalValue))) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n/**\n * @description remove class(es) from element\n * @param {Element} element - element to add class(es) to\n * @param {String} classes - space delimitted class(es) to remove\n */\nexport function removeClass(element, classes) {\n    let currentValue = trimString(\n        element.getAttribute && element.getAttribute('class')\n    );\n    let finalValue = ' ' + currentValue + ' ';\n\n    for (let i = 0, cs = classes.split(' '), l = cs.length; i < l; i += 1) {\n        finalValue = finalValue.replace(' ' + cs[i] + ' ', ' ');\n    }\n    if (currentValue !== (finalValue = trimString(finalValue))) {\n        element.setAttribute('class', finalValue);\n    }\n}\n\n// regex constants used for string cleaning\nconst REGEX_AMPERSAND = /&/g;\nconst REGEX_DUPE_WHITESPACE = /\\s\\s+/g;\nconst REGEX_MAKE_SAFE = /[.*+?^${}()|[\\]\\\\]/g;\nconst REGEX_TO_IGNORE = /[\\u2018\\u2019',:\\u2013-]/g;\n/**\n * @description clean string of some characters, and make safe for regex searching\n * @param {String} theString\n * @returns {String}\n */\nexport function cleanString(theString) {\n    theString = theString.replace(REGEX_TO_IGNORE, ''); // ignore quotes, commas, colons, and hyphens\n    theString = theString.replace(REGEX_AMPERSAND, 'and'); // treat & and 'and' as the same\n    theString = theString.replace(REGEX_MAKE_SAFE, '\\\\$&'); // make safe for regex searching\n    theString = theString.replace(REGEX_DUPE_WHITESPACE, ' '); // ignore duplicate whitespace\n    return trimString(theString.toLowerCase()); // case insensitive\n}\n\n/**\n * @description check if keycode is for a printable/width-affecting character\n * @param {Number} keyCode\n * @returns {Boolean}\n */\nexport function isPrintableKey(keyCode) {\n    return (\n        (keyCode >= 48 && keyCode <= 57) || // 0-9\n        (keyCode >= 65 && keyCode <= 90) || // a-z\n        (keyCode >= 96 && keyCode <= 111) || // numpad 0-9, numeric operators\n        (keyCode >= 186 && keyCode <= 222) || // semicolon, equal, comma, dash, etc.\n        keyCode === 32 || // space\n        keyCode === 8 || // backspace\n        keyCode === 46 // delete\n    );\n}\n\n/**\n * @description merge objects together to generate a new one\n * @param {Object} args - objects to merge together\n * @returns {Object}\n */\nexport function mergeObjects(...args) {\n    let n = {};\n    for (let i = 0, l = args.length; i < l; i += 1) {\n        let o = args[i];\n        for (let p in o) {\n            if (o.hasOwnProperty(p) && typeof o[p] !== 'undefined') {\n                n[p] = o[p];\n            }\n        }\n    }\n    return n;\n}\n\n/**\n * @description dispatch event helper\n * @param {Element} element\n * @param {String} event\n */\nexport function dispatchEvent(element, event) {\n    if ('createEvent' in document) {\n        let e = document.createEvent('HTMLEvents');\n        e.initEvent(event, true, true);\n        element.dispatchEvent(e);\n    } else {\n        element.fireEvent('on' + event);\n    }\n}\n\n/**\n * @description set element option or checkbox to specified state and trigger change event\n * @param {Element} element\n * @param {Boolean} selected\n * @param {(AriaAutocomplete|Object)} instance\n */\nexport function setElementState(element, selected, instance) {\n    selected = !!selected;\n    if (element) {\n        // handle checkbox\n        if (\n            element.nodeName === 'INPUT' &&\n            typeof element.checked === 'boolean' &&\n            element.checked !== selected\n        ) {\n            element.checked = selected;\n            dispatchEvent(element, 'change');\n        }\n\n        // handle dropdown option\n        if (element.nodeName === 'OPTION' && element.selected !== selected) {\n            element.selected = selected;\n            // ensure change event only fires once for dropdown\n            if (instance.elementChangeEventTimer) {\n                clearTimeout(instance.elementChangeEventTimer);\n            }\n            instance.elementChangeEventTimer = setTimeout(function() {\n                dispatchEvent(element.closest('select'), 'change');\n            }, 1);\n        }\n    }\n}\n\n/**\n * @description process an array of strings or objects to ensure needed props exist\n * @param {(String|Object)[]} sourceArray\n * @param {Object=} mapping - value and label mapping used in object cases\n * @param {Boolean=} setCleanedLabel - defaults to true\n * @returns {Array}\n */\nexport function processSourceArray(sourceArray, mapping = {}, setCleanedLabel) {\n    let toReturn = [];\n    let mapValue = mapping['value'];\n    let mapLabel = mapping['label'];\n    for (let i = 0, l = sourceArray.length; i < l; i += 1) {\n        let result = {};\n        let entry = sourceArray[i];\n        // handle array of strings\n        if (typeof entry === 'string') {\n            result.value = result.label = entry;\n        }\n        // handle array of objects - ensure value and label exist, and maintain any other properties\n        else {\n            result = entry;\n            let value = result[mapValue] || result.value || result.label;\n            let label = result[mapLabel] || result.label || result.value;\n            result.value = (value || '').toString();\n            result.label = (label || '').toString();\n        }\n        // whether to set a cleaned label for static source filtering (in filter method)\n        if (setCleanedLabel !== false) {\n            result.cleanedLabel = cleanString(result.label);\n        }\n        toReturn.push(result);\n    }\n    return toReturn;\n}\n\nconst DIV = document.createElement('div');\n/**\n * @description convert HTML string into an element\n * @param {String} html\n * @returns {Element}\n */\nexport function htmlToElement(html) {\n    DIV.innerHTML = trimString(html);\n    return DIV.firstChild;\n}\n","import './closest-polyfill';\r\nimport {\r\n    trimString,\r\n    hasClass,\r\n    addClass,\r\n    removeClass,\r\n    cleanString,\r\n    isPrintableKey,\r\n    mergeObjects,\r\n    dispatchEvent,\r\n    setElementState,\r\n    processSourceArray,\r\n    htmlToElement\r\n} from './helpers';\r\n\r\nlet appIndex = 0;\r\n\r\nconst DEFAULT_OPTIONS = {\r\n    /**\r\n     * @description string for async endpoint, array of strings, array of objects with value and label, or function\r\n     * @type {String|String[]|Object[]|Function}\r\n     */\r\n    source: '',\r\n    /** @description properties to use for label and value when using an Array of Objects as source */\r\n    sourceMapping: {},\r\n\r\n    /** @description input delay before running a search */\r\n    delay: 100,\r\n    /** @description min number of characters to run a search (includes spaces) */\r\n    minLength: 1,\r\n    /** @description max number of results to render */\r\n    maxResults: 9999,\r\n    /** @description whether to render a button that triggers showing all options */\r\n    showAllControl: true,\r\n    /** @description confirm selection when blurring off of the control */\r\n    confirmOnBlur: true,\r\n    /** @description @todo set input width to match its content */\r\n    autoGrowInput: false,\r\n\r\n    /** @description whether to allow multiple items to be selected */\r\n    multiple: false,\r\n    /** @description max number of items that can be selected */\r\n    maxItems: 9999,\r\n    /** @description if element is an input, and in multiple mode, character that separates the values */\r\n    multipleSeparator: ',',\r\n    /** @description if input is empty and in multiple mode, delete last selected item on backspace */\r\n    deleteOnBackspace: false,\r\n\r\n    /** @description placeholder text to show in generated input */\r\n    placeholder: 'Type to search...',\r\n    /** @description text to show (and announce) if no results found */\r\n    noResultsText: 'No results',\r\n\r\n    /** @description class name to add to list */\r\n    listClassName: '',\r\n    /** @description class name to add to input */\r\n    inputClassName: '',\r\n    /** @description class name to add to component wrapper */\r\n    wrapperClassName: 'form-control',\r\n    /** @description string to use in front of main classes that are used */\r\n    cssNameSpace: 'aria-autocomplete',\r\n\r\n    /** @description when source is a string, param to use when adding input value */\r\n    asyncQueryParam: 'q',\r\n    /** @description when source is a string, param to use when adding results limit */\r\n    asyncMaxResultsParam: 'limit',\r\n\r\n    /** @description in multi mode, screen reader text used for element deletion - prepended to label */\r\n    srDeleteText: 'delete',\r\n    /** @description in multi mode, screen reader text announced after deletion - appended to label */\r\n    srDeletedText: 'deleted',\r\n    /** @description screen reader text for the show all control */\r\n    srShowAllText: 'Show all',\r\n    /** @description screen reader text announced after selection - appended to label */\r\n    srSelectedText: 'selected',\r\n    /** @description screen reader explainer added to the list element via aria-label attribute */\r\n    srExplanatoryText: 'Search suggestions',\r\n    /** @description screen reader description used for main input when empty */\r\n    srAssistiveText:\r\n        'When autocomplete results are available use up and down arrows to review and enter to select. ' +\r\n        'Touch device users, explore by touch or with swipe gestures.',\r\n    /** @description screen reader announcement after results are rendered */\r\n    srResultsText: length =>\r\n        `${length} ${length === 1 ? 'result' : 'results'} available.`,\r\n\r\n    /** @description callback after async call completes - can be used to format the results */\r\n    onAsyncSuccess: undefined, //  to needed format (onResponse can also be used for this)\r\n    /** @description callback prior to rendering - can be used to format the results */\r\n    onResponse: undefined, // before response is processed and rendered - can be used to modify results\r\n    /** @description callback before search is performed - can be used to affect search value */\r\n    onSearch: undefined,\r\n    /** @description callback after selection is made */\r\n    onSelect: undefined,\r\n    /** @description callback when main script processing and initial rendering has finished */\r\n    onReady: undefined,\r\n    /** @description callback when list area closes */\r\n    onClose: undefined,\r\n    /** @description callback when list area opens */\r\n    onOpen: undefined\r\n};\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {Object=} options\r\n */\r\nclass AriaAutocomplete {\r\n    constructor(element, options) {\r\n        // fail silently if no list provided\r\n        if (!element) {\r\n            return;\r\n        }\r\n\r\n        // if instance already exists on the list element, do not re-initialise\r\n        if (element.ariaAutocomplete) {\r\n            return element.ariaAutocomplete;\r\n        }\r\n\r\n        appIndex += 1;\r\n        this.element = element;\r\n        this.elementIsInput = element.nodeName === 'INPUT';\r\n        this.elementIsSelect = element.nodeName === 'SELECT';\r\n\r\n        // ids used for DOM queries and accessibility attributes e.g. aria-controls\r\n        this.ids = {};\r\n        this.ids.ELEMENT = element.id;\r\n        this.ids.PREFIX = `${element.id || ''}aria-autocomplete-${appIndex}`;\r\n        this.ids.LIST = `${this.ids.PREFIX}-list`;\r\n        this.ids.INPUT = `${this.ids.PREFIX}-input`;\r\n        this.ids.BUTTON = `${this.ids.PREFIX}-button`;\r\n        this.ids.OPTION = `${this.ids.PREFIX}-option`;\r\n        this.ids.WRAPPER = `${this.ids.PREFIX}-wrapper`;\r\n        this.ids.OPTION_SELECTED = `${this.ids.OPTION}-selected`;\r\n        this.ids.SR_ASSISTANCE = `${this.ids.PREFIX}-sr-assistance`;\r\n        this.ids.SR_ANNOUNCEMENTS = `${this.ids.PREFIX}-sr-announcements`;\r\n\r\n        // always have an id on the original element for caching state\r\n        if (!this.ids.ELEMENT) {\r\n            this.ids.ELEMENT = `${this.ids.PREFIX}-element`;\r\n            this.element.setAttribute('id', this.ids.ELEMENT);\r\n        }\r\n\r\n        // vars defined later - elements\r\n        this.list;\r\n        this.input;\r\n        this.wrapper;\r\n        this.showAll;\r\n        this.srAnnouncements;\r\n\r\n        // vars defined later - non elements\r\n        this.xhr;\r\n        this.term;\r\n        this.async;\r\n        this.source;\r\n        this.menuOpen;\r\n        this.multiple;\r\n        this.selected;\r\n        this.disabled;\r\n        this.filtering;\r\n        this.cssNameSpace;\r\n        this.forceShowAll;\r\n        this.filteredSource; // filtered source items to render\r\n        this.currentListHtml;\r\n        this.currentSelectedIndex; // for storing index of currently focused option\r\n\r\n        // timers\r\n        this.filterTimer;\r\n        this.announcementTimer;\r\n        this.componentBlurTimer;\r\n        this.elementChangeEventTimer;\r\n\r\n        this.options = mergeObjects(DEFAULT_OPTIONS, options);\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * trigger callbacks included in component options\r\n     * @param {String} name\r\n     * @param {Array=} args\r\n     */\r\n    triggerOptionCallback(name, args) {\r\n        if (typeof this.options[name] === 'function') {\r\n            return this.options[name].apply(this.wrapper, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description show element with CSS only - if none provided, set list state to visible\r\n     * @param {Element=} element\r\n     */\r\n    show(element) {\r\n        if (typeof element !== 'undefined') {\r\n            let toRemove = `${this.cssNameSpace}--hide hide hidden`;\r\n            removeClass(element, toRemove);\r\n            return element.removeAttribute('hidden');\r\n        }\r\n\r\n        this.input.setAttribute('aria-expanded', 'true');\r\n        if (this.showAll) {\r\n            let expanded = (!!this.forceShowAll).toString();\r\n            this.showAll.setAttribute('aria-expanded', expanded);\r\n        }\r\n        if (!this.menuOpen) {\r\n            this.show(this.list);\r\n            this.menuOpen = true;\r\n            this.triggerOptionCallback('onOpen', [this.list]);\r\n        }\r\n    }\r\n    /**\r\n     * @description hide element with CSS only - if none provided, set list state to hidden\r\n     * @param {Element=} element\r\n     */\r\n    hide(element) {\r\n        if (typeof element !== 'undefined') {\r\n            addClass(element, `${this.cssNameSpace}--hide hide hidden`);\r\n            return element.setAttribute('hidden', 'hidden');\r\n        }\r\n\r\n        this.currentSelectedIndex = -1;\r\n        this.input.setAttribute('aria-expanded', 'false');\r\n        if (this.showAll) {\r\n            this.showAll.setAttribute('aria-expanded', 'false');\r\n        }\r\n        if (this.menuOpen) {\r\n            this.hide(this.list);\r\n            this.menuOpen = false;\r\n            this.triggerOptionCallback('onClose', [this.list]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description enable autocomplete (e.g. when under maxItems selected)\r\n     */\r\n    enable() {\r\n        if (this.disabled) {\r\n            this.disabled = false;\r\n            this.input.disabled = false;\r\n            let n = this.cssNameSpace;\r\n            removeClass(this.input, `${n}__input--disabled disabled`);\r\n            removeClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '0');\r\n                removeClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description disable autocomplete (e.g. when maxItems selected)\r\n     */\r\n    disable() {\r\n        if (!this.disabled) {\r\n            this.disabled = true;\r\n            this.input.disabled = true;\r\n            let n = this.cssNameSpace;\r\n            addClass(this.input, `${n}__input--disabled disabled`);\r\n            addClass(this.wrapper, `${n}__wrapper--disabled disabled`);\r\n            if (this.showAll) {\r\n                this.showAll.setAttribute('tabindex', '-1');\r\n                addClass(this.showAll, `${n}__show-all--disabled disabled`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description check if current input value is contained in a selection of options\r\n     * @param {String} query - string to use - checks input value otherwise\r\n     * @param {Array} options - array of objects with value and label properties\r\n     * @param {String=} prop - prop to check against in options array - defaults to 'label'\r\n     * @returns {Number} index of array entry that matches, or -1 if none found\r\n     */\r\n    isQueryContainedIn(query, options, prop) {\r\n        query = trimString(query || this.input.value).toLowerCase();\r\n        if (query) {\r\n            prop = prop || 'label';\r\n            for (let i = 0, l = options.length; i < l; i += 1) {\r\n                if (trimString(options[i][prop]).toLowerCase() === query) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * @description make a screen reader announcement\r\n     * @param {String} text\r\n     * @param {Number=} delay\r\n     */\r\n    announce(text, delay) {\r\n        if (!text || !this.srAnnouncements) {\r\n            return;\r\n        }\r\n        // in immediate case, do not user timer\r\n        if (delay === 0) {\r\n            return (this.srAnnouncements.textContent = text);\r\n        }\r\n        delay = typeof delay === 'number' ? delay : 400;\r\n        if (this.announcementTimer) {\r\n            clearTimeout(this.announcementTimer);\r\n        }\r\n        this.announcementTimer = setTimeout(() => {\r\n            this.srAnnouncements.textContent = text;\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description check if element is a selected element in the DOM\r\n     * @param {Element} element\r\n     * @returns {Boolean}\r\n     */\r\n    isSelectedElem(element) {\r\n        return (\r\n            this.multiple &&\r\n            element.ariaAutocompleteSelectedOption &&\r\n            hasClass(element, `${this.cssNameSpace}__selected`)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @description get DOM elements for selected items\r\n     * @returns {Element[]}\r\n     */\r\n    getSelectedElems() {\r\n        let n = this.wrapper.childNodes;\r\n        let a = [];\r\n        for (let i = 0, l = n.length; i < l; i += 1) {\r\n            if (this.isSelectedElem(n[i])) {\r\n                a.push(n[i]);\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @description remove object from selected\r\n     * @param {Object} entry\r\n     */\r\n    removeEntryFromSelected(entry) {\r\n        let index = this.selected.indexOf(entry);\r\n        if (index === -1) {\r\n            // value check, in case explicit object reference did not work\r\n            for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n                if (this.selected[i].value === entry.value) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // set element state, dispatch change event, set selected array, and build selected\r\n        if (index > -1) {\r\n            setElementState(this.selected[index].element, false, this);\r\n            this.selected.splice(index, 1);\r\n            this.buildMultiSelected();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description re-build the html showing the selected items\r\n     * @todo test performance in old IE - lots of loops here!\r\n     */\r\n    buildMultiSelected() {\r\n        // only do anything in multiple mode\r\n        if (!this.multiple) {\r\n            return;\r\n        }\r\n\r\n        // no elements, and none selected, do nothing\r\n        let currentSelectedElems = this.getSelectedElems();\r\n        if (!this.selected.length && !currentSelectedElems.length) {\r\n            return;\r\n        }\r\n\r\n        // cycle through existing elements, and remove any not in the selected array\r\n        let current = [];\r\n        let i = currentSelectedElems.length;\r\n        while (i--) {\r\n            let option = currentSelectedElems[i].ariaAutocompleteSelectedOption;\r\n            let l = this.selected.length;\r\n            let isInSelected = false;\r\n            while (l--) {\r\n                let selected = this.selected[l];\r\n                if (selected === option || selected.value === option.value) {\r\n                    isInSelected = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (isInSelected) {\r\n                current.push(currentSelectedElems[i]);\r\n            } else {\r\n                this.wrapper.removeChild(currentSelectedElems[i]);\r\n            }\r\n        }\r\n\r\n        // cycle through selected array, and add elements for any not represented by one\r\n        let deleteText = this.options.srDeleteText;\r\n        let fragment = document.createDocumentFragment();\r\n        let selectedClass = `${this.cssNameSpace}__selected`;\r\n        for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n            let selected = this.selected[i];\r\n            let l = current.length;\r\n            let isInDom = false;\r\n            while (l--) {\r\n                let option = current[l].ariaAutocompleteSelectedOption;\r\n                if (option === selected || option.value === selected.value) {\r\n                    isInDom = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!isInDom) {\r\n                let label = selected.label;\r\n                let span = htmlToElement(\r\n                    `<span role=\"button\" class=\"${selectedClass}\" ` +\r\n                        `tabindex=\"0\" aria-label=\"${deleteText} ${label}\">` +\r\n                        `${label}</span>`\r\n                );\r\n                span.ariaAutocompleteSelectedOption = selected;\r\n                fragment.appendChild(span);\r\n            }\r\n        }\r\n        this.wrapper.appendChild(fragment);\r\n\r\n        // set ids on elements\r\n        let ids = [this.ids.LIST];\r\n        current = this.getSelectedElems();\r\n        for (let i = 0, l = current.length; i < l; i += 1) {\r\n            let id = `${this.ids.OPTION_SELECTED}-${i}`;\r\n            current[i].setAttribute('id', id);\r\n            ids.push(id);\r\n        }\r\n\r\n        // set input aria-owns\r\n        this.input.setAttribute('aria-owns', ids.join(' '));\r\n    }\r\n\r\n    /**\r\n     * @description set the aria-describedby attribute on the input\r\n     */\r\n    setInputDescription() {\r\n        let exists = this.input.getAttribute('aria-describedby');\r\n        let current = trimString(exists || '');\r\n        let describedBy = current.replace(this.ids.SR_ASSISTANCE, '');\r\n\r\n        if (this.input.value.length === 0) {\r\n            describedBy = describedBy + ' ' + this.ids.SR_ASSISTANCE;\r\n        }\r\n\r\n        // set or remove attribute, but only if necessary\r\n        if ((describedBy = trimString(describedBy))) {\r\n            if (describedBy !== current) {\r\n                this.input.setAttribute('aria-describedby', describedBy);\r\n            }\r\n        } else if (exists) {\r\n            this.input.removeAttribute('aria-describedby');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description reset classes and aria-selected attribute for all visible filtered options\r\n     */\r\n    resetOptionAttributes() {\r\n        let cssName = this.cssNameSpace;\r\n        let nodes = this.list.childNodes;\r\n        let l = nodes.length;\r\n\r\n        while (l--) {\r\n            removeClass(nodes[l], `${cssName}__option--focused focused focus`);\r\n            nodes[l].setAttribute('aria-selected', 'false');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description move focus to correct option, or to input (on up and down arrows)\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     */\r\n    setOptionFocus(event, index) {\r\n        // set aria-selected to false and remove focused class\r\n        this.resetOptionAttributes();\r\n\r\n        // if negative index, or no options available, focus on input\r\n        let options = this.list.childNodes;\r\n        if (index < 0 || !options || !options.length) {\r\n            this.currentSelectedIndex = -1;\r\n            // focus on input, only if event was from another element\r\n            if (event && event.target !== this.input) {\r\n                this.input.focus();\r\n            }\r\n            return;\r\n        }\r\n\r\n        // down arrow on/past last option, focus on last item\r\n        if (index >= options.length) {\r\n            this.currentSelectedIndex = options.length - 1;\r\n            this.setOptionFocus(event, this.currentSelectedIndex);\r\n            return;\r\n        }\r\n\r\n        // if option found, focus...\r\n        let toFocus = options[index];\r\n        if (toFocus && typeof toFocus.getAttribute('tabindex') === 'string') {\r\n            this.currentSelectedIndex = index;\r\n            let toAdd = `${this.cssNameSpace}__option--focused focused focus`;\r\n            addClass(toFocus, toAdd);\r\n            toFocus.setAttribute('aria-selected', 'true');\r\n            toFocus.focus();\r\n            return;\r\n        }\r\n\r\n        // reset index just in case\r\n        this.currentSelectedIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * @description set values and dispatch events based on any DOM elements in the selected array\r\n     */\r\n    setSourceElementValues() {\r\n        let valToSet = [];\r\n        for (let i = 0, l = this.selected.length; i < l; i += 1) {\r\n            let entry = this.selected[i];\r\n            valToSet.push(entry.value);\r\n            setElementState(entry.element, true, this); // element processing\r\n        }\r\n\r\n        // set original input value\r\n        if (this.elementIsInput) {\r\n            let valToSetString = valToSet.join(this.options.multipleSeparator);\r\n            if (valToSetString !== this.element.value) {\r\n                this.element.value = valToSetString;\r\n                dispatchEvent(this.element, 'change');\r\n            }\r\n        }\r\n\r\n        // included in case of multi-select mode used with a <select> element as the source\r\n        if (!this.selected.length && this.elementIsSelect) {\r\n            this.element.value = '';\r\n        }\r\n\r\n        // set disabled state as needed\r\n        if (this.multiple && this.selected.length >= this.options.maxItems) {\r\n            return this.disable();\r\n        }\r\n        this.enable();\r\n    }\r\n\r\n    /**\r\n     * @description select option from the list by index\r\n     * @param {Event} event\r\n     * @param {Number} index\r\n     * @param {Boolean} focusAfterSelection\r\n     */\r\n    handleOptionSelect(event, index, focusAfterSelection) {\r\n        // defensive check for proper index, that the filteredSource exists, and not exceed max items option\r\n        if (\r\n            typeof index !== 'number' ||\r\n            index < 0 ||\r\n            (this.multiple && this.selected.length >= this.options.maxItems) ||\r\n            !this.filteredSource.length ||\r\n            !this.filteredSource[index]\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // generate new object from the selected item in case the original source gets altered\r\n        let option = mergeObjects(this.filteredSource[index]);\r\n\r\n        // detect if selected option is already in selected array\r\n        let l = this.selected.length;\r\n        let alreadySelected = false;\r\n        while (l--) {\r\n            if (this.selected[l].value === option.value) {\r\n                alreadySelected = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.input.value = this.term = this.multiple ? '' : option.label;\r\n\r\n        // reset selected array in single select mode\r\n        if (!alreadySelected && !this.multiple) {\r\n            this.selected = [];\r\n        }\r\n\r\n        // (re)set values of any DOM elements based on selected array\r\n        if (!alreadySelected) {\r\n            this.selected.push(option);\r\n            this.setSourceElementValues();\r\n            this.buildMultiSelected(); // rebuild multi-selected if needed\r\n        }\r\n\r\n        this.triggerOptionCallback('onSelect', [option]);\r\n        this.announce(`${option.label} ${this.options.srSelectedText}`, 0);\r\n\r\n        // return focus to input\r\n        if (!this.disabled && focusAfterSelection !== false) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // close menu after option selection, and after returning focus to input\r\n        this.hide();\r\n    }\r\n\r\n    /**\r\n     * @description remove selected entries from results if in multiple mode\r\n     * @param {Array} results\r\n     * @returns {Array}\r\n     */\r\n    removeSelectedFromResults(results) {\r\n        if (!this.multiple || !this.selected.length) {\r\n            return results;\r\n        }\r\n        let toReturn = [];\r\n        resultsLoop: for (let i = 0, l = results.length; i < l; i += 1) {\r\n            let selected = this.selected;\r\n            let result = results[i];\r\n            for (let j = 0, k = selected.length; j < k; j += 1) {\r\n                let labelMatch = result.label === selected[j].label;\r\n                if (labelMatch && result.value === selected[j].value) {\r\n                    continue resultsLoop;\r\n                }\r\n            }\r\n            toReturn.push(result);\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * @description final filtering and render for list options, and render\r\n     * @param {Array} results\r\n     */\r\n    setListOptions(results) {\r\n        let toShow = [];\r\n        let optionId = this.ids.OPTION;\r\n        let cssName = this.cssNameSpace;\r\n        let mapping = this.options.sourceMapping;\r\n        // if in multiple mode, exclude items already in the selected array\r\n        let updated = this.removeSelectedFromResults(results);\r\n        // allow callback to alter the response before rendering\r\n        let callback = this.triggerOptionCallback('onResponse', updated);\r\n\r\n        // now commit to setting the filtered source\r\n        this.filteredSource = callback\r\n            ? processSourceArray(callback, mapping)\r\n            : updated;\r\n        let length = this.filteredSource.length;\r\n\r\n        // build up the list html\r\n        let maxResults = this.options.maxResults;\r\n        for (let i = 0; i < length && i < maxResults; i += 1) {\r\n            toShow.push(\r\n                `<li tabindex=\"-1\" aria-selected=\"false\" role=\"option\" class=\"${cssName}__option\" ` +\r\n                    `id=\"${optionId}--${i}\" aria-posinset=\"${i + 1}\" ` +\r\n                    `aria-setsize=\"${length}\">${this.filteredSource[i].label}</li>`\r\n            );\r\n        }\r\n\r\n        // set has-results or no-results class on the list element\r\n        if (toShow.length) {\r\n            addClass(this.list, `${cssName}__list--has-results`);\r\n            removeClass(this.list, `${cssName}__list--no-results`);\r\n        } else {\r\n            removeClass(this.list, `${cssName}__list--has-results`);\r\n            addClass(this.list, `${cssName}__list--no-results`);\r\n        }\r\n\r\n        // no results text handling\r\n        let announce;\r\n        let noText = this.options.noResultsText;\r\n        if (!toShow.length && typeof noText === 'string' && noText.length) {\r\n            announce = noText;\r\n            let optionClass = `${cssName}__option`;\r\n            toShow.push(\r\n                `<li class=\"${optionClass} ${optionClass}--no-results\">${noText}</li>`\r\n            );\r\n        }\r\n\r\n        // remove loading class(es) and reset variables\r\n        this.cancelFilterPrep();\r\n\r\n        // announce to screen reader\r\n        if (!announce) {\r\n            announce = this.triggerOptionCallback('srResultsText', [length]);\r\n        }\r\n        this.announce(announce);\r\n\r\n        // render the list, only if we have to\r\n        // time taken for string comparison is worth it to not have to re-parse and re-render the list\r\n        let newListHtml = toShow.join('');\r\n        if (this.currentListHtml !== newListHtml) {\r\n            this.currentListHtml = newListHtml;\r\n            /** @todo: test innerHTML vs insertAdjacentHtml performance in old IE */\r\n            this.list.innerHTML = newListHtml;\r\n        } else {\r\n            // if list html matches, and not re-rendered, clear aria-selected and focus classes\r\n            this.resetOptionAttributes();\r\n        }\r\n\r\n        // if toShow array is empty, make sure not to render the menu\r\n        if (!toShow.length) {\r\n            this.hide();\r\n            return;\r\n        }\r\n\r\n        this.show();\r\n        // reset forceShowAll must be after .show()\r\n        // aria-expanded attribute on showAllControl is controlled in .show() method\r\n        this.forceShowAll = false;\r\n    }\r\n\r\n    /**\r\n     * @description trigger async call for options to render\r\n     * @param {String} value\r\n     * @param {Boolean=} canCancel\r\n     */\r\n    handleAsync(value, canCancel = true) {\r\n        let options = this.options;\r\n        let mapping = options.mapping;\r\n        let xhr = new XMLHttpRequest();\r\n        let encode = encodeURIComponent;\r\n        let isShowAll = this.forceShowAll;\r\n        let limit = this.selected.length + options.maxResults;\r\n        let limitParam = `${encode(options.asyncMaxResultsParam)}=${limit}`;\r\n        let queryParam = `${encode(options.asyncQueryParam)}=${encode(value)}`;\r\n        let params = `${queryParam}&${limitParam}`;\r\n        let url = this.source + (/\\?/.test(this.source) ? '&' : '?') + params;\r\n\r\n        // abort any current call first\r\n        if (this.xhr) {\r\n            this.xhr.abort();\r\n        }\r\n\r\n        xhr.open('GET', url);\r\n        xhr.onload = () => {\r\n            this.forceShowAll = isShowAll; // return forceShowAll to previous state before the options render\r\n            let callback = this.triggerOptionCallback('onAsyncSuccess', [xhr]);\r\n            let source = callback || xhr.responseText;\r\n            let items = processSourceArray(source, mapping, false);\r\n            this.setListOptions(items);\r\n        };\r\n        xhr.send();\r\n\r\n        // allow the creation of an uncancellable call to use on first load\r\n        if (canCancel !== false) {\r\n            this.xhr = xhr;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description trigger filtering using a value\r\n     * @param {String} value\r\n     */\r\n    filter(value) {\r\n        // fail silently if no value is provided\r\n        if (typeof value !== 'string') {\r\n            this.cancelFilterPrep();\r\n            return;\r\n        }\r\n\r\n        let forceShowAll = this.forceShowAll;\r\n        let callbackResponse = this.triggerOptionCallback('onSearch', [value]);\r\n        let toReturn = [];\r\n\r\n        // allow onSearch callback to affect the searched value\r\n        // only permitted when not a forceShowAll case\r\n        if (!forceShowAll && typeof callbackResponse === 'string') {\r\n            value = callbackResponse;\r\n        }\r\n\r\n        // store search term - used for comparison in filterPrep\r\n        this.term = value;\r\n\r\n        // async handling\r\n        if (this.async) {\r\n            this.handleAsync(value);\r\n            // set show all to false immediately as may be used in other places\r\n            this.forceShowAll = false;\r\n            return;\r\n        }\r\n\r\n        // handle the source as a function\r\n        if (typeof this.source === 'function') {\r\n            toReturn = this.source.call(this.wrapper, this.term);\r\n            toReturn = processSourceArray(toReturn, this.options.sourceMapping);\r\n            this.setListOptions(toReturn);\r\n            return;\r\n        }\r\n\r\n        // if empty string, show all\r\n        if (!value) {\r\n            forceShowAll = true;\r\n        }\r\n\r\n        // existing list handling\r\n        if (this.source && this.source.length) {\r\n            if (!forceShowAll) {\r\n                value = cleanString(value);\r\n            }\r\n            for (let i = 0, l = this.source.length; i < l; i += 1) {\r\n                let entry = this.source[i];\r\n                if (forceShowAll || entry.cleanedLabel.search(value) !== -1) {\r\n                    toReturn.push({\r\n                        element: entry.element,\r\n                        staticSourceIndex: i,\r\n                        label: entry.label,\r\n                        value: entry.value\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setListOptions(toReturn);\r\n    }\r\n\r\n    /**\r\n     * @description cancel filter timer and remove loading classes\r\n     */\r\n    cancelFilterPrep() {\r\n        if (this.filterTimer) {\r\n            clearTimeout(this.filterTimer);\r\n        }\r\n        let nameSpace = this.cssNameSpace;\r\n        removeClass(this.wrapper, `${nameSpace}__wrapper--loading loading`);\r\n        removeClass(this.input, `${nameSpace}__input--loading loading`);\r\n        this.filtering = false;\r\n    }\r\n\r\n    /**\r\n     * @description checks before filtering, and set filter timer\r\n     * @param {Event} e\r\n     * @param {Boolean=} doValueOverrideCheck - whether to check input value against selected item(s)\r\n     * @param {Boolean=} runNow\r\n     */\r\n    filterPrep(e, doValueOverrideCheck = false, runNow = false) {\r\n        let forceShowAll = this.forceShowAll;\r\n        let delay = forceShowAll || runNow ? 0 : this.options.delay;\r\n\r\n        // clear timers\r\n        this.filtering = true;\r\n        this.cancelFilterPrep();\r\n        this.filterTimer = setTimeout(() => {\r\n            let value = this.input.value;\r\n            // treat as empty search if...\r\n            // forceShowAll, or in single mode and selected item label matches current value\r\n            if (\r\n                forceShowAll ||\r\n                value === '' ||\r\n                (doValueOverrideCheck &&\r\n                    !this.multiple &&\r\n                    this.selected.length &&\r\n                    trimString(this.selected[0].label) === trimString(value))\r\n            ) {\r\n                value = '';\r\n            }\r\n\r\n            // handle aria-describedby\r\n            this.setInputDescription();\r\n\r\n            if (!forceShowAll && value.length < this.options.minLength) {\r\n                this.hide();\r\n                return;\r\n            }\r\n\r\n            // try catch used due to permissions issues in some cases\r\n            let modifier;\r\n            try {\r\n                let keydown = e && e.type === 'keydown';\r\n                modifier = keydown && (e.altKey || e.ctrlKey || e.metaKey); // allow shift key, just in case...\r\n            } catch (e) {}\r\n\r\n            // if value to use matches last used search term, do nothing\r\n            let equalVals = value === '' ? false : value === this.term;\r\n\r\n            // prevent search being run again with the same value\r\n            if (!equalVals || (equalVals && !this.menuOpen && !modifier)) {\r\n                let n = this.cssNameSpace;\r\n                addClass(this.wrapper, `${n}__wrapper--loading loading`);\r\n                addClass(this.input, `${n}__input--loading loading`);\r\n                this.currentSelectedIndex = -1;\r\n                this.filter(value);\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description trigger filter prep in showAll mode\r\n     * @param {Event} event\r\n     */\r\n    filterPrepShowAll(event) {\r\n        event.preventDefault();\r\n        this.forceShowAll = true;\r\n        this.filterPrep(event, false, true);\r\n    }\r\n\r\n    /**\r\n     * @description blur behaviour for hiding list and removing focus class(es)\r\n     * @param {Event} event\r\n     * @param {Boolean=} force - fire instantly and force blurring out of the component\r\n     */\r\n    handleComponentBlur(event, force = false) {\r\n        let delay = force ? 0 : 100;\r\n        if (this.componentBlurTimer) {\r\n            clearTimeout(this.componentBlurTimer);\r\n        }\r\n        // use a timeout to ensure this blur fires after other focus events\r\n        // and in case the user focuses back in immediately\r\n        this.componentBlurTimer = setTimeout(() => {\r\n            // do nothing if blurring to an element within the list\r\n            let activeElem = document.activeElement;\r\n            if (\r\n                !force &&\r\n                !(this.showAll && this.showAll === activeElem) && // exception for show all button\r\n                !activeElem.ariaAutocompleteSelectedOption // exception for selected items\r\n            ) {\r\n                // must base this on the wrapper to allow scrolling the list in IE\r\n                if (this.wrapper.contains(activeElem)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            let isQueryIn = this.isQueryContainedIn.bind(this);\r\n\r\n            // cancel any running async call\r\n            if (this.xhr) {\r\n                this.xhr.abort();\r\n            }\r\n\r\n            // confirmOnBlur behaviour\r\n            if (!force && this.options.confirmOnBlur && this.menuOpen) {\r\n                // if blurring from an option (currentSelectedIndex > -1), select it\r\n                let toUse = this.currentSelectedIndex;\r\n                if (typeof toUse !== 'number' || toUse === -1) {\r\n                    // otherwise check for exact match between current input value and available items\r\n                    toUse = isQueryIn('', this.filteredSource);\r\n                }\r\n                this.handleOptionSelect({}, toUse, false);\r\n            }\r\n\r\n            let n = this.cssNameSpace;\r\n            removeClass(this.wrapper, `${n}__wrapper--focused focused focus`);\r\n            removeClass(this.input, `${n}__input--focused focused focus`);\r\n            this.cancelFilterPrep();\r\n            this.hide();\r\n\r\n            // in single select case, if current value and chosen value differ, clear selected and input value\r\n            if (!this.multiple && isQueryIn('', this.selected) === -1) {\r\n                let isInputOrDdl = this.elementIsInput || this.elementIsSelect;\r\n                if (isInputOrDdl && this.element.value !== '') {\r\n                    this.element.value = '';\r\n                    dispatchEvent(this.element, 'change');\r\n                }\r\n                this.input.value = '';\r\n                this.selected = [];\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @description enter keydown for selections\r\n     * @param {Event} event\r\n     */\r\n    handleEnterKey(event) {\r\n        // if in multiple mode, and event target was a selected item, remove it\r\n        if (this.isSelectedElem(event.target)) {\r\n            let option = event.target.ariaAutocompleteSelectedOption;\r\n            return this.removeEntryFromSelected(option);\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (this.showAll && event.target === this.showAll) {\r\n            this.filterPrepShowAll(event);\r\n            return;\r\n        }\r\n\r\n        if (this.menuOpen) {\r\n            event.preventDefault();\r\n            if (this.currentSelectedIndex > -1) {\r\n                this.handleOptionSelect(event, this.currentSelectedIndex);\r\n            }\r\n        }\r\n\r\n        // if enter keypress was from the filter input, trigger search immediately\r\n        if (event.target === this.input) {\r\n            this.filterPrep(event, false, true);\r\n        }\r\n    }\r\n    /**\r\n     * @description down arrow usage - option focus, or search all\r\n     * @param {Event} event\r\n     */\r\n    handleDownArrowKey(event) {\r\n        event.preventDefault();\r\n        // if closed, and text is long enough, run search\r\n        if (!this.menuOpen) {\r\n            this.forceShowAll = this.options.minLength < 1;\r\n            if (\r\n                this.forceShowAll ||\r\n                this.input.value.length >= this.options.minLength\r\n            ) {\r\n                this.filterPrep(event);\r\n            }\r\n        }\r\n        // move focus to downward option\r\n        if (this.menuOpen && !this.filtering) {\r\n            let current = this.currentSelectedIndex;\r\n            if (typeof current !== 'number' || current < 0) {\r\n                this.setOptionFocus(event, 0);\r\n            } else {\r\n                this.setOptionFocus(event, current + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description up arrow usage - option focus, or return focus to input\r\n     * @param {Event} event\r\n     */\r\n    handleUpArrowKey(event) {\r\n        event.preventDefault();\r\n        let usable = !this.disabled && this.menuOpen;\r\n        if (usable && typeof this.currentSelectedIndex === 'number') {\r\n            this.setOptionFocus(event, this.currentSelectedIndex - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description standard keydown handling (excluding enter, up, down, escape)\r\n     * @param {Event} event\r\n     */\r\n    handleKeyDownDefault(event) {\r\n        const targetIsInput = event.target === this.input;\r\n        // on space, if focus state is on any other item, treat as enter\r\n        if (event.keyCode === 32 && !targetIsInput) {\r\n            return this.handleEnterKey(event);\r\n        }\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        // on backspace, if using empty input in multiple mode, delete last selected entry\r\n        let selectedLength = this.selected && this.selected.length;\r\n        if (\r\n            this.options.deleteOnBackspace &&\r\n            this.input.value === '' &&\r\n            event.keyCode === 8 &&\r\n            selectedLength &&\r\n            targetIsInput &&\r\n            this.multiple\r\n        ) {\r\n            let lastSelectedLabel = this.selected[selectedLength - 1].label;\r\n            let announcement = `${lastSelectedLabel} ${this.options.srDeletedText}`;\r\n            this.announce(announcement, 0);\r\n            this.selected.pop();\r\n            this.buildMultiSelected();\r\n            return;\r\n        }\r\n\r\n        // any printable character not on input, return focus to input\r\n        let focusInput = !targetIsInput && isPrintableKey(event.keyCode);\r\n        if (focusInput) {\r\n            this.input.focus();\r\n        }\r\n\r\n        // trigger filtering - done here, instead of using input event, due to IE9 issues\r\n        if (focusInput || targetIsInput) {\r\n            this.filterPrep(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description component keydown handling\r\n     * @param {Event} event\r\n     */\r\n    prepKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 13: // on enter\r\n                this.handleEnterKey(event);\r\n                break;\r\n            case 27: // on escape\r\n                this.handleComponentBlur(event, true);\r\n                break;\r\n            case 38: // on up\r\n                this.handleUpArrowKey(event);\r\n                break;\r\n            case 40: // on down\r\n                this.handleDownArrowKey(event);\r\n                break;\r\n            default:\r\n                this.handleKeyDownDefault(event);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description bind component events to generated elements\r\n     */\r\n    bindEvents() {\r\n        // when focus is moved outside of the component, close everything\r\n        this.wrapper.addEventListener('focusout', event => {\r\n            this.handleComponentBlur(event, false);\r\n        });\r\n        // set wrapper focus state\r\n        this.wrapper.addEventListener('focusin', event => {\r\n            let toAdd = `${this.cssNameSpace}__wrapper--focused focused focus`;\r\n            addClass(this.wrapper, toAdd);\r\n            if (!this.list.contains(event.target)) {\r\n                this.currentSelectedIndex = -1;\r\n            }\r\n        });\r\n        // handle all keydown events inside the component\r\n        this.wrapper.addEventListener('keydown', event => {\r\n            this.prepKeyDown(event);\r\n        });\r\n        // if clicking directly on the wrapper, move focus to the input\r\n        this.wrapper.addEventListener('click', event => {\r\n            if (event.target === this.wrapper) {\r\n                this.input.focus();\r\n                return;\r\n            }\r\n            if (this.isSelectedElem(event.target)) {\r\n                let option = event.target.ariaAutocompleteSelectedOption;\r\n                this.removeEntryFromSelected(option);\r\n            }\r\n        });\r\n\r\n        // when blurring out of input, check current value against selected one and clear if needed\r\n        this.input.addEventListener('blur', () => {\r\n            let toRemove = `${this.cssNameSpace}__input--focused focused focus`;\r\n            removeClass(this.input, toRemove);\r\n        });\r\n        // trigger filter on input event as well as keydown (covering bases)\r\n        this.input.addEventListener('input', event => {\r\n            this.filterPrep(event);\r\n        });\r\n        // when specifically clicking on input, if menu is closed, and value is long enough, search\r\n        this.input.addEventListener('click', event => {\r\n            let open = this.menuOpen;\r\n            if (!open && this.input.value.length >= this.options.minLength) {\r\n                this.filterPrep(event, true);\r\n            }\r\n        });\r\n        // when focusing on input, reset selected index and trigger search handling\r\n        this.input.addEventListener('focusin', () => {\r\n            let toAdd = `${this.cssNameSpace}__input--focused focused focus`;\r\n            addClass(this.input, toAdd);\r\n            if (!this.disabled && !this.menuOpen) {\r\n                this.filterPrep(event, true);\r\n            }\r\n        });\r\n\r\n        // show all button click\r\n        if (this.showAll) {\r\n            this.showAll.addEventListener('click', event => {\r\n                this.filterPrepShowAll(event);\r\n            });\r\n        }\r\n\r\n        // clear any current focus position when hovering into the list\r\n        this.list.addEventListener('mouseenter', event => {\r\n            this.resetOptionAttributes();\r\n        });\r\n        // trigger options selection\r\n        this.list.addEventListener('click', event => {\r\n            if (event.target !== this.list) {\r\n                let childNodes = this.list.childNodes;\r\n                if (childNodes.length) {\r\n                    let nodeIndex = [].indexOf.call(childNodes, event.target);\r\n                    this.handleOptionSelect(event, nodeIndex);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on child checkboxes\r\n     */\r\n    prepListSourceCheckboxes() {\r\n        this.multiple = true; // force multiple in this case\r\n        // reset source and use checkboxes\r\n        this.source = [];\r\n        let elements = this.element.querySelectorAll('input[type=\"checkbox\"]');\r\n        for (let i = 0, l = elements.length; i < l; i += 1) {\r\n            let checkbox = elements[i];\r\n            // must have a value other than empty string\r\n            if (!checkbox.value) {\r\n                continue;\r\n            }\r\n            let toPush = { element: checkbox, value: checkbox.value };\r\n            // label searching\r\n            let label = checkbox.closest('label');\r\n            if (!label && checkbox.id) {\r\n                label = document.querySelector('[for=\"' + checkbox.id + '\"]');\r\n            }\r\n            if (label) {\r\n                toPush.label = label.textContent;\r\n            }\r\n            // if no label so far, re-use value\r\n            if (!toPush.label) {\r\n                toPush.label = toPush.value;\r\n            }\r\n            toPush.cleanedLabel = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (checkbox.checked) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set starting source array based on <select> options\r\n     */\r\n    prepListSourceDdl() {\r\n        this.multiple = this.element.multiple; // force multiple to match select\r\n        // reset source and use options\r\n        this.source = [];\r\n        let options = this.element.querySelectorAll('option');\r\n        for (let i = 0, l = options.length; i < l; i += 1) {\r\n            let option = options[i];\r\n            // must have a value other than empty string\r\n            if (!option.value) {\r\n                continue;\r\n            }\r\n            let toPush = {\r\n                element: option,\r\n                value: option.value,\r\n                label: option.textContent\r\n            };\r\n            toPush.cleanedLabel = cleanString(toPush.label);\r\n            this.source.push(toPush);\r\n            // add to selected if applicable\r\n            if (option.selected) {\r\n                this.selected.push(toPush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust starting source array to format needed, and set selected\r\n     */\r\n    prepListSourceArray() {\r\n        let mapping = this.options.sourceMapping;\r\n        this.source = processSourceArray(this.source, mapping);\r\n\r\n        // build up selected array if starting element was an input, and had a value\r\n        if (this.elementIsInput && this.element.value) {\r\n            let value = this.element.value;\r\n\r\n            // account for multiple mode\r\n            let multiple = this.options.multiple;\r\n            let separator = this.options.multipleSeparator;\r\n            let valueArr = multiple ? value.split(separator) : [value];\r\n\r\n            for (let i = 0, l = valueArr.length; i < l; i += 1) {\r\n                let val = valueArr[i];\r\n                let isQueryIn = this.isQueryContainedIn;\r\n                // make sure it is not already in the selected array\r\n                let isInSelected = isQueryIn(val, this.selected, 'value') > -1;\r\n\r\n                // but is in the source array (check via 'value', not 'label')\r\n                if (!isInSelected) {\r\n                    let indexInSource = isQueryIn(val, this.source, 'value');\r\n                    if (indexInSource > -1) {\r\n                        this.selected.push(this.source[indexInSource]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description adjust set sources to needed format\r\n     */\r\n    prepListSource() {\r\n        this.async = false;\r\n\r\n        // allow complete control over the source handling via custom function\r\n        if (typeof this.source === 'function') {\r\n            return;\r\n        }\r\n\r\n        // string source - treat as async endpoint\r\n        if (typeof this.source === 'string' && this.source.length) {\r\n            return (this.async = true);\r\n        }\r\n\r\n        // array source - copy array\r\n        if (Array.isArray(this.source) && this.source.length) {\r\n            return this.prepListSourceArray();\r\n        }\r\n\r\n        // dropdown source\r\n        if (this.elementIsSelect) {\r\n            return this.prepListSourceDdl();\r\n        }\r\n\r\n        // checkboxlist source\r\n        if (this.element.querySelector('input[type=\"checkbox\"]')) {\r\n            this.prepListSourceCheckboxes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description set input starting states - aria attributes, disabled state, starting value\r\n     */\r\n    setInputStartingStates() {\r\n        // update corresponding label to now focus on the new input\r\n        let label = document.querySelector('[for=\"' + this.ids.ELEMENT + '\"]');\r\n        if (label) {\r\n            label.ariaAutocompleteOriginalFor = this.ids.ELEMENT;\r\n            label.setAttribute('for', this.ids.INPUT);\r\n        }\r\n\r\n        // update aria-describedby and aria-labelledby attributes if present\r\n        let describedBy = this.element.getAttribute('aria-describedby');\r\n        if (describedBy) {\r\n            this.input.setAttribute('aria-describedby', describedBy);\r\n        }\r\n        let labelledBy = this.element.getAttribute('aria-labelledby');\r\n        if (labelledBy) {\r\n            this.input.setAttribute('aria-labelledby', labelledBy);\r\n        }\r\n\r\n        // if selected item(s) already exists\r\n        let disable = false;\r\n        if (this.selected.length) {\r\n            // for multi select variant, set selected items\r\n            if (this.multiple) {\r\n                this.buildMultiSelected();\r\n                disable = this.selected.length >= this.options.maxItems;\r\n            }\r\n            // for single select variant, set value to match\r\n            else {\r\n                this.input.value = this.selected[0].label || '';\r\n                this.term = this.input.value;\r\n            }\r\n        }\r\n\r\n        // setup input description - done here in case value is affected above\r\n        this.setInputDescription();\r\n\r\n        // disable the control if the invoked element was disabled\r\n        if (disable || !!this.element.disabled) {\r\n            this.disable();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description build and insert component html structure\r\n     */\r\n    setHtml() {\r\n        let o = this.options;\r\n        let showAll = o.showAllControl;\r\n        let cssName = this.cssNameSpace;\r\n        let explainerText = o.srExplanatoryText;\r\n        let listClass = o.listClassName ? ` ${o.listClassName}` : '';\r\n        let inputClass = o.inputClassName ? ` ${o.inputClassName}` : '';\r\n        let wrapperClass = o.wrapperClassName ? ` ${o.wrapperClassName}` : '';\r\n        let explainer = explainerText ? ` aria-label=\"${explainerText}\"` : '';\r\n\r\n        if (showAll) {\r\n            wrapperClass += ` ${cssName}__wrapper--show-all`;\r\n        }\r\n\r\n        let newHtml = [\r\n            `<div id=\"${this.ids.WRAPPER}\" class=\"${cssName}__wrapper${wrapperClass}\">`\r\n        ];\r\n\r\n        // add input\r\n        newHtml.push(\r\n            `<input type=\"text\" autocomplete=\"off\" aria-expanded=\"false\" aria-autocomplete=\"list\" ` +\r\n                `role=\"combobox\" id=\"${this.ids.INPUT}\" placeholder=\"${o.placeholder}\" ` +\r\n                `aria-owns=\"${this.ids.LIST}\" aria-placeholder=\"${o.placeholder}\" ` +\r\n                `class=\"${cssName}__input${inputClass}\" />`\r\n        );\r\n\r\n        // button to show all available options\r\n        if (showAll) {\r\n            newHtml.push(\r\n                `<span role=\"button\" aria-label=\"${o.srShowAllText}\" class=\"${cssName}__show-all\" ` +\r\n                    `tabindex=\"0\" id=\"${this.ids.BUTTON}\" aria-expanded=\"false\"></span>`\r\n            );\r\n        }\r\n        // add the list holder\r\n        newHtml.push(\r\n            `<ul id=\"${this.ids.LIST}\" class=\"${cssName}__list${listClass}\" role=\"listbox\" ` +\r\n                `hidden=\"hidden\"${explainer}></ul>`\r\n        );\r\n        // add the screen reader assistance element\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-assistance\" ` +\r\n                `id=\"${this.ids.SR_ASSISTANCE}\">${o.srAssistiveText}</span>`\r\n        );\r\n        // add element for added screen reader announcements\r\n        newHtml.push(\r\n            `<span class=\"sr-only ${cssName}__sr-only ${cssName}__sr-announcements\" ` +\r\n                `id=\"${this.ids.SR_ANNOUNCEMENTS}\" aria-live=\"polite\" aria-atomic=\"true\"></span>`\r\n        );\r\n\r\n        // close all and append\r\n        newHtml.push(`</div>`);\r\n        this.element.insertAdjacentHTML('afterend', newHtml.join(''));\r\n    }\r\n\r\n    /**\r\n     * @description generate api object to expose on the element\r\n     */\r\n    generateApi() {\r\n        this.api = {\r\n            options: this.options,\r\n            open: () => this.show.call(this),\r\n            close: () => this.hide.call(this),\r\n            refresh: () => this.refresh.call(this),\r\n            destroy: () => this.destroy.call(this),\r\n            filter: value => this.filter.call(this, value)\r\n        };\r\n\r\n        // store api on original element\r\n        this.element.ariaAutocomplete = this.api;\r\n    }\r\n\r\n    /**\r\n     * @todo: refresh method for use after changing options, source, etc.\r\n     */\r\n    refresh() {\r\n        let options = mergeObjects(this.options); // store new object from existing options\r\n        /** @todo: soft destroy in this case */\r\n        this.destroy();\r\n        this.options = options;\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * @description destroy component\r\n     */\r\n    destroy() {\r\n        // return original label 'for' attribute back to element id\r\n        let label = document.querySelector('[for=\"' + this.ids.INPUT + '\"]');\r\n        if (label && label.ariaAutocompleteOriginalFor) {\r\n            label.setAttribute('for', label.ariaAutocompleteOriginalFor);\r\n            delete label.ariaAutocompleteOriginalFor;\r\n        }\r\n        // remove the whole wrapper and set all instance properties to null to clean up DOMNode references\r\n        this.element.parentNode.removeChild(this.wrapper);\r\n        for (let i in this) {\r\n            if (this.hasOwnProperty(i)) {\r\n                this[i] = null;\r\n            }\r\n        }\r\n        delete this.element.ariaAutocomplete;\r\n        // re-show original element\r\n        this.show(this.element);\r\n    }\r\n\r\n    /**\r\n     * @description do it!!\r\n     */\r\n    init() {\r\n        this.selected = [];\r\n\r\n        // set these internally so that the component has to be properly refreshed to change them\r\n        this.source = this.options.source;\r\n        this.multiple = this.options.multiple;\r\n        this.cssNameSpace = this.options.cssNameSpace;\r\n\r\n        // create html structure\r\n        this.setHtml();\r\n\r\n        // additional app variables\r\n        this.list = document.getElementById(this.ids.LIST);\r\n        this.input = document.getElementById(this.ids.INPUT);\r\n        this.wrapper = document.getElementById(this.ids.WRAPPER);\r\n        this.showAll = document.getElementById(this.ids.BUTTON);\r\n        this.srAnnouncements = document.getElementById(\r\n            this.ids.SR_ANNOUNCEMENTS\r\n        );\r\n\r\n        // hide element and list manually\r\n        this.hide(this.list); // pass in the list so that the onClose is not triggered\r\n        this.hide(this.element);\r\n\r\n        // set internal source array, from static elements if necessary\r\n        this.prepListSource();\r\n\r\n        // set starting states for input - must be after source has been defined\r\n        this.setInputStartingStates();\r\n\r\n        // bind all necessary events\r\n        this.bindEvents();\r\n\r\n        /** @todo: handling of initial value in async case - other cases handled in setInputStartingStates */\r\n\r\n        // generate api object to expose\r\n        this.generateApi();\r\n\r\n        // fire onready callback\r\n        this.triggerOptionCallback('onReady');\r\n    }\r\n}\r\n\r\n/**\r\n * @description expose specific function rather than the AriaAutocomplete class\r\n * @param {Element} elem\r\n * @param {Object} options\r\n * @returns {Object}\r\n */\r\nwindow['AriaAutocomplete'] = (elem, options) => {\r\n    return new AriaAutocomplete(elem, options).api;\r\n};\r\n\r\nexport default (elem, options) => {\r\n    return new AriaAutocomplete(elem, options).api;\r\n};\r\n"]}